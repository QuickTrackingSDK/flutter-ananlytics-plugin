/*! 2022-11-23 15:18:23 */
!function(e) {
    function t(a) {
        if (n[a]) return n[a].exports;
        var o = n[a] = {
            exports: {},
            id: a,
            loaded: !1
        };
        return e[a].call(o.exports, o, o.exports, t), o.loaded = !0, o.exports;
    }
    var n = {};
    return t.m = e, t.c = n, t.p = "", t(0);
}([ function(e, t, n) {
    e.exports = n(1);
}, function(e, t, n) {
    "use strict";
    n(2).initGlobal(window), function() {
        var e = n(4);
        n(145)(e);
    }();
}, function(e, t, n) {
    "use strict";
    var a, o = n(3), r = o.APLUS, i = o.APLUS_QUEUE, s = o.GOLDLOG, u = o.GOLDLOG_QUEUE, c = !1;
    try {
        window && (a = window, c = !0);
    } catch (e) {
        a = {}, c = !1;
    }
    t.getContext = function() {
        return a;
    }, t.isWeb = function() {
        return window;
    }, t.initGlobal = function(e) {
        a = e ? e : {
            v: 1,
            aplus: {},
            aplus_queue: []
        };
        var t, n;
        if (c) try {
            t = a.aplus || a.goldlog || (a.aplus = {});
            var o = a.goldlog_queue || (a.goldlog_queue = []);
            n = a.aplus_queue || (a.aplus_queue = []), n = o.concat(n);
        } catch (e) {} else t = a.aplus, n = a.aplus_queue;
        return a.aplus = a.goldlog = t, a.aplus_queue = a.goldlog_queue = n, a;
    };
    var l = function(e) {
        if (e === r || e === s) {
            var t = a[r] || a[s];
            return t || (t = a[r] = a[s] = {}), t;
        }
        var n = u, o = i;
        if (e === o || e === n) {
            var c = a[o] || a[n];
            return c || (c = a[o] = a[n] = []), c;
        }
    };
    t.getGlobalValue = l, t.setGlobalValue = function(e, t) {
        a[e] = t;
    };
    var p = function(e) {
        var t;
        try {
            var n = l(r);
            t = n[e];
        } catch (e) {
            t = "";
        } finally {
            return t;
        }
    };
    t.getGoldlogVal = p;
    var f = function(e, t) {
        var n = !1;
        try {
            var a = l(r);
            e && (a[e] = t, n = !0);
        } catch (e) {
            n = !1;
        } finally {
            return n;
        }
    };
    t.setGoldlogVal = f, t.getClientInfo = function() {
        return p("_aplus_client") || {};
    };
}, function(e, t) {
    var n = "aplus", a = "goldlog", o = n + "_queue", r = a + "_queue", i = "mw_change", s = "MetaInfo", u = "append" + s, c = "set" + s, l = "http", p = "_pubsub", f = "other", g = "2101", d = "2201", _ = "2202", h = "19999", m = "1023", v = "1010", y = 3e4, b = 18e5, w = "ekvs", A = 1e4, E = 1, S = 1, T = 3e3, P = "$$_page_start", I = "$$_page_end", x = "$$_app_start", C = "$$_app_end", M = "aplus_user_profile", k = "imprint", O = "aplus-idtype", N = "aplus-jsbridge-only", R = "aplus-page-config", L = "aplus-skip-apv-rules", U = "aplus-rhost-v", D = "aplus-rhost-g", j = "autoGetOpenid";
    e.exports = {
        PAGE_ENTER: "PAGE_ENTER",
        CURRENT_PAGE_CONFIG: "CURRENT_PAGE_CONFIG",
        _ANONY_ID: "_anony_id",
        _DEV_ID: "_dev_id",
        _USER_ID: "_user_id",
        DEFAULT_CODE: f,
        OTHER: h,
        EVENT_MAP: {
            "2101": "click",
            "2201": "exposure",
            "2202": "exposure",
            "19999": f,
            "1023": "app_show",
            "1010": "app_hide_or_unload"
        },
        EVENT_ID_MAP: {
            EXP: d,
            IMPEXP: _,
            CLK: g,
            OTHER: h,
            SHOW: m,
            H_OR_U: v
        },
        APLUS: n,
        GOLDLOG: a,
        UNSUBSCRIBE: n + "." + n + p + ".unsubscribe",
        SUBSCRIBE: n + "." + n + p + ".subscribe",
        PUBLISH: n + "." + n + p + ".publish",
        CACHE_PUBS: n + "." + n + p + ".cachePubs",
        APLUS_UNIVERSAL: n + "_universal",
        APLUS_QUEUE: o,
        GOLDLOG_QUEUE: r,
        COMPLETE: "complete",
        PV_CODE: "2001",
        EXP_CODE: d,
        CLK_CODE: g,
        OTHER_CODE: h,
        CLK: "CLK",
        EXP: "EXP",
        SPM_CNT: "spm-cnt",
        SPM_URL: "spm-url",
        SPM_PRE: "spm-pre",
        MW_CHANGE_PV: i + "_pv",
        MW_CHANGE_HJLJ: i + "_hjlj",
        HTTP: l + ":",
        HTTPS: "https:",
        APPEND_META_INFO: u,
        SET_META_INFO: c,
        APLUS_APPEND_META_INFO: n + "." + u,
        APLUS_SET_META_INFO: n + "." + c,
        PVID: "pvid",
        APLUS_LOG_PIPE: "aplus-log-pipe",
        openAPIs: [ "send", "enter", "sendPV", "record", "combineRecord", "recordUdata", "requestVTConfig", "requestRemoteConfig", "setPageSPM", "setMetaInfo", "appendMetaInfo", "updatePageProperties", "updateNextPageProperties", "updatePageUtparam", "updateNextPageUtparam", "pageAppear", "pageDisappear", "skipPage", "updateSessionProperties", "getPageSpmUrl", "getPageSpmPre", "setPageName", "getElementSPM", "recordAppLink" ],
        SESSION_INTERVAL: y,
        SESSION_PAUSE_TIME: "session_pause_time",
        IMPRINT: "imprint",
        CURRENT_SESSION: "current_session",
        MAX_EVENTID_LENGTH: 128,
        MAX_PROPERTY_KEY_LENGTH: 256,
        MAX_PROPERTY_KEYS_COUNT: 100,
        FAILED_REQUESTS: "failed_requests",
        REQUESTS: "requests",
        SHARES: "shares",
        APLUS_SSRC: "_aplus_ssrc",
        EKVS: w,
        EVENT_MAX_COUNT: A,
        MEMORY_MAX_COUNT: E,
        MAX_QUEUE_COUNT: S,
        EVENT_SEND_DEFAULT_INTERVAL: T,
        PAGE_START: P,
        PAGE_END: I,
        APP_START: x,
        APP_END: C,
        USER_PROFILE_KEY: M,
        SHARE_CACHE_INTERVAL: b,
        IMPRINT: k,
        ID_TYPE: O,
        GLOBAL_PROPERTY: "globalproperty",
        JSBRIDGE_ONLY: N,
        PAGE_CONFIG: R,
        APLUS_SKIP_APV_RULES: L,
        APLUS_PV_DOMAIN: U,
        APLUS_EKV_DOMAIN: D,
        APLUS_IMPRINT_VERSION: "APLUS_IMPRINT_VERSION",
        APLUS_REMOTE_CONFIG: "APLUS_REMOTE_CONFIG",
        RANK: "ekv_rank",
        WEB_EVENT_SUFFIX: "/web_logs",
        WEB_PC_PV_SUFFIX: "v.gif",
        WEB_WAP_PV_SUFFIX: "m.gif",
        PAGE_LEAVE: "$$_page_leave",
        APLUS_AUTOTRACK_ENABLED: "aplus-autotrack-enabled",
        APLUS_AUTOTRACK_ENABLED_REMOTE: "aplus-autotrack-enabled-remote",
        APLUS_AUTOTRACK_CONFIG: "aplus-autotrack-config",
        APLUS_AUTOTRACK_CONFIG_REMOTE: "aplus-autotrack-config-remote",
        APLUS_EVENT_LIMITRATES: "aplus-event-limitrates",
        APLUS_DISABLE_AUTOEVENT: "aplus-disable-autoevent",
        APLUS_DISABLE_AUTOEVENT_REMOTE: "aplus-disable-autoevent",
        APLUS_DISABLE_AUTOPV: "aplus-disable-apv",
        APLUS_DISABLE_AUTOPV_REMOTE: "aplus-disable-apv-remote",
        APLUS_DEVICE_ENABLE: "aplus-device-enable",
        PERFORMANCE_WARING: "$$_perf_warning",
        START_ID: "START_ID",
        AUTO_GET_OPENID: j,
        APLUS_BRIDGE_NAME: "aplus-bridge-name",
        APLUS_MINI_REQUEST_TIMEOUT: "aplus-request-timeout",
        APLUS_LATEAST_UTM: "APLUS_LATEAST_UTM"
    };
}, function(e, t, n) {
    e.exports = {
        metaInfo: {
            "aplus-ifr-pv": "1",
            "aplus-rhost-v": "",
            "aplus-rhost-g": "",
            "aplus-channel": "",
            appId: "",
            sdkId: "aplus_cloud_um",
            "aplus-cpvdata": {},
            "aplus-exdata": {},
            "aplus-globaldata": {},
            "aplus-mmstat-timeout": "10000",
            "aplus-toUT": "",
            "aplus-disable-autoevent": !1,
            "aplus-disable-apv": !1,
            "aplus-autotrack-enabled": !1,
            "aplus-device-enable": !0
        },
        globalConfig: {
            isDecodeUrl: !0,
            isAli: !1,
            isUM: !0,
            APLUS_QUEUE: "aplus_queue",
            ETAG_STORAGE_KEY: "__ETAG__CNA__ID__",
            script_name: "aplus.js",
            lver: "1.9.51",
            NAME_STORAGE_KEYS: {
                REFERRER: "wm_referrer",
                REFERRER_PV_ID: "refer_pv_id",
                LOST_PV_PAGE_DURATION: "lost_pv_page_duration",
                LOST_PV_PAGE_SPMAB: "lost_pv_page_spmab",
                LOST_PV_PAGE: "lost_pv_page",
                LOST_PV_PAGE_MSG: "lost_pv_page_msg"
            }
        },
        plugins: [ {
            name: "aplus_session_manager",
            path: n(5)
        }, {
            name: "aplus_track_debug",
            path: n(12)
        }, {
            name: "aplus_body_ready",
            path: n(16)
        }, {
            name: "pubsub",
            path: n(17)
        }, {
            name: "aplus_client",
            path: n(22)
        }, {
            name: "aplus_meta_inject",
            path: n(24)
        }, {
            name: "aplus_ac",
            path: n(44)
        }, {
            name: "aplus_ae",
            path: n(57)
        }, {
            name: "name_storage",
            path: n(65)
        }, {
            name: "record_lost_pv",
            path: n(66),
            config: {
                lostPvRecordRatio: .01
            }
        }, {
            name: "aplus_monitor",
            path: n(68),
            config: {
                obsoleteInterRecordRatio: "0.01",
                jsErrorRecordRatio: "0.01",
                browserSupportRatio: "0.01"
            }
        }, {
            name: "aplus_web_http_um",
            path: n(70)
        }, {
            name: "aplus_log_inject",
            path: n(86),
            deps: [ "aplus_meta_inject" ],
            config: {
                plugins: {
                    pv: [ {
                        name: "remote_config",
                        path: n(87)
                    }, {
                        name: "when_to_sendpv",
                        path: n(93),
                        config: {
                            aplusWaiting: ""
                        }
                    }, {
                        name: "where_to_send",
                        path: n(94)
                    }, {
                        name: "what_to_send",
                        path: n(96),
                        config: {
                            pvdataToUt: {}
                        }
                    }, {
                        name: "what_to_sendpv_userdata",
                        path: n(99),
                        deps: [ "what_to_send" ]
                    }, {
                        name: "what_to_sendpv_userdata_web",
                        path: n(101),
                        deps: [ "what_to_send", "what_to_sendpv_userdata" ]
                    }, {
                        name: "what_to_sendpv_ut2",
                        path: n(104),
                        deps: [ "what_to_send" ]
                    }, {
                        name: "what_to_sendpv_um2native",
                        path: n(105),
                        deps: [ "what_to_send" ]
                    }, {
                        name: "can_to_sendpv",
                        path: n(106),
                        config: {
                            flag: "NO"
                        }
                    }, {
                        name: "after_pv",
                        path: n(109)
                    } ],
                    hjlj: [ {
                        name: "remote_config",
                        path: n(87)
                    }, {
                        name: "where_to_send",
                        path: n(94),
                        deps: []
                    }, {
                        name: "what_to_send",
                        path: n(96),
                        deps: []
                    }, {
                        name: "what_to_hjlj_userdata",
                        path: n(110),
                        deps: [ "what_to_send" ]
                    }, {
                        name: "what_to_hjlj_userdata_web",
                        path: n(111),
                        deps: [ "what_to_send", "what_to_hjlj_userdata" ]
                    }, {
                        name: "what_to_hjlj_ut2",
                        path: n(112),
                        deps: [ "what_to_send" ]
                    }, {
                        name: "what_to_hjlj_um2native",
                        path: n(113),
                        deps: [ "what_to_send" ]
                    } ]
                }
            }
        }, {
            name: "aplus_spm_inject",
            path: n(114)
        }, {
            name: "aplus_api",
            path: n(117)
        }, {
            name: "aplus_fingerpint",
            path: n(127)
        }, {
            name: "meta_queue",
            path: n(129)
        }, {
            name: "aplusUmBridge",
            path: n(131)
        }, {
            name: "aplus_queue",
            path: n(132)
        }, {
            name: "hot_loader",
            path: n(133),
            config: {
                urlRules: [ {
                    rule: "aplus_webvt_messager",
                    cdnPath: [ "https://d.alicdn.com/alilog/mlog/aplus_webvt_messager.js" ]
                } ]
            }
        }, {
            name: "aplus_apv",
            path: n(134),
            deps: [ "aplus_log_inject", "aplus_api" ]
        }, {
            name: "aplus_autotrack",
            path: n(136)
        }, {
            name: "aplus_heatmap",
            path: n(141),
            deps: [ "aplus_log_inject", "aplus_api" ]
        }, {
            name: "aplus_pageleave",
            path: n(143),
            deps: [ "aplus_log_inject", "aplus_api" ]
        } ]
    };
}, function(e, t, n) {
    "use strict";
    e.exports = function() {
        return {
            run: function() {
                n(6)();
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(3), o = n(7);
    e.exports = function() {
        try {
            var e = o.getStartId();
            window.sessionStorage.setItem(a.START_ID, e);
        } catch (e) {}
    };
}, function(e, t, n) {
    function a(e) {
        for (var t = "", n = [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ], a = 0; a < Number(e); a++) {
            var o = Math.round(Math.random() * (n.length - 1));
            t += n[o];
        }
        return t;
    }
    t.getRandomStr = a, t.startsWith = function(e, t) {
        return !(!e || !t || 0 === t.length || t.length > e.length) && e.substr(0, t.length) === t;
    }, t.assign = function(e) {
        if (void 0 === e || null === e) throw new TypeError("Cannot convert undefined or null to object");
        for (var t = Object(e), n = 1; n < arguments.length; n++) {
            var a = arguments[n];
            if (a) for (var o in a) Object.prototype.hasOwnProperty.call(a, o) && (t[o] = a[o]);
        }
        return t;
    }, t.checkEvent = function(e, t) {
        var a = n(3), o = n(8), r = n(9);
        if (!e || "string" != typeof e) return o().w("event logkey is invalid, id =", e || "'' event properties = ", r.stringfy(t.cusp)), 
        !1;
        var i = [ "id", "du" ], s = {};
        if (i.forEach(function(e) {
            s[e] = 1;
        }), s[e]) return o().e("eventId has conflict with reservewords: " + i.join(",")), 
        !1;
        if (e.length > a.MAX_EVENTID_LENGTH) return o().e("The maximum length of event id shall not exceed " + a.MAX_EVENTID_LENGTH), 
        !1;
        if (t && ("object" != typeof t || Array.isArray(t)) && "string" != typeof t) return o().e("please check trackEvent properties. properties should be string or object(not include Array)"), 
        !1;
        if ("object" == typeof t) {
            var u = 0;
            for (var c in t) if ({}.hasOwnProperty.call(t, c)) {
                if (c.length > a.MAX_PROPERTY_KEY_LENGTH) return o().e("The maximum length of property key shall not exceed " + a.MAX_PROPERTY_KEY_LENGTH), 
                !1;
                if (u >= a.MAX_PROPERTY_KEYS_COUNT) return o().e("The maximum count of properties shall not exceed " + a.MAX_PROPERTY_KEYS_COUNT), 
                !1;
                if (s[c]) return o().e("property key has conflict with reserveWords: " + i.join(",")), 
                !1;
                u += 1;
            }
        }
        return !0;
    };
    var o = n(10);
    t.deleteInfo = function(e, t) {
        return o(t, function(t) {
            delete e[t];
        }), e;
    }, t.checkEmptyObj = function(e) {
        return "object" != typeof e || 0 === Object.keys(e).length;
    }, t.getStartId = function() {
        return a(10) + Date.now() + a(9);
    }, t.DataType = {
        HALF_SESSION: "half_session",
        CLOSE_SESSION: "close_session",
        EKV: "ekv",
        ENTER_PAGE: "enter_page",
        LEAVE_PAGE: "leave_page"
    }, t.AccessType = {
        MOBILE_NETWORK_2G: "2g",
        MOBILE_NETWORK_3G: "3g",
        MOBILE_NETWORK_4G: "4g",
        MOBILE_NETWORK_NONE: "none"
    };
}, function(e, t) {
    var n = "[APLUS] -- ";
    e.exports = function() {
        function e() {
            this.setDebug = function(e) {
                a = e;
            }, this.i = function() {
                if (a) try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.info.apply(console, arguments);
                } catch (e) {}
            }, this.e = function() {
                if (a) try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.error.apply(console, arguments);
                } catch (e) {}
            }, this.w = function() {
                if (a) try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.warn.apply(console, arguments);
                } catch (e) {}
            }, this.v = function() {
                try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.warn.apply(console, arguments);
                } catch (e) {}
            }, this.tip_w = function(e) {
                try {
                    console.log("%c " + n + e, "background:red; padding: 4px; padding-right: 8px; border-radius: 4px; color: #fff;");
                } catch (e) {}
            }, this.repeat = function(e) {
                for (var t = e; t.length < 86; ) t += e;
                return t;
            };
        }
        var t = null, a = !1;
        return function() {
            return null === t && (t = new e()), t;
        };
    }();
}, function(e, t) {
    t.stringfy = function(e) {
        if (e) try {
            return JSON.stringify(e);
        } catch (e) {}
        return "";
    }, t.parse = function(e) {
        if (e) try {
            return JSON.parse(e);
        } catch (e) {}
        return null;
    }, t.parseToArray = function(e) {
        if (e) try {
            return JSON.parse(e);
        } catch (e) {}
        return [];
    };
}, function(e, t, n) {
    "use strict";
    var a = n(11);
    e.exports = function(e, t) {
        if (a(e) && void 0 === e.length) for (var n in e) e.hasOwnProperty(n) && t(n, e[n], e); else {
            var o, r = e.length;
            for (o = 0; o < r; o++) {
                var i = t(e[o], o);
                if ("break" === i) break;
            }
        }
    };
}, function(e, t) {
    e.exports = function(e) {
        if ("object" != typeof e || null === e) return !1;
        for (var t = e; null !== Object.getPrototypeOf(t); ) t = Object.getPrototypeOf(t);
        return Object.getPrototypeOf(e) === t;
    };
}, function(e, t, n) {
    "use strict";
    var a = n(13);
    e.exports = function() {
        return {
            run: function() {
                var e = document, t = window.aplus || (window.aplus = {});
                if (!t._aplus_cplugin_track_deb) {
                    t._aplus_cplugin_track_deb = {
                        status: "init"
                    };
                    var n = window, o = function() {
                        try {
                            var t = n.localStorage, a = "aplus_track_debug_id", o = new RegExp("[?|&]" + a + "=(\\w*)"), r = location.href.match(o);
                            if (r && r.length > 0) t.setItem(a, r[1]); else {
                                var i = e.referrer || "", s = i.match(o);
                                if (s && s.length > 0) t.setItem(a, s[1]); else {
                                    var u = n.name || "", c = u.match(o);
                                    c && c.length > 0 && t.setItem(a, c[1]);
                                }
                            }
                            var l = t.getItem(a) || "";
                            if (!(l && l.length > 50)) return !1;
                            var p, f = l.split("_");
                            if (f && f.length > 0) {
                                p = f[f.length - 1].replace(/log/, "");
                                var g = new Date(), d = g.getTime(), _ = new Date(), h = _.getTime();
                                g.setFullYear(parseInt(p.substr(0, 4))), g.setMonth(parseInt(p.substr(4, 2) - 1)), 
                                g.setDate(parseInt(p.substr(6, 2))), g.setHours(parseInt(p.substr(8, 2))), g.setMinutes(parseInt(p.substr(10, 2))), 
                                g.setSeconds(parseInt(p.substr(12, 2))), g.setMilliseconds(0), d = g.getTime(), 
                                h = _.getTime();
                                var m = h - d;
                                return m <= 36e5 && (l || r[1]);
                            }
                        } catch (e) {
                            return !1;
                        }
                    }, r = function(e) {
                        t._aplus_cplugin_track_deb.status = "start";
                        var n = {
                            aplus_track_debug_id: e
                        }, a = window.aplus_queue || (window.aplus_queue = []);
                        a.push({
                            action: "aplus.appendMetaInfo",
                            arguments: [ "aplus-exdata", n ]
                        }), a.push({
                            action: "aplus.appendMetaInfo",
                            arguments: [ "aplus-cpvdata", n ]
                        }), t._aplus_cplugin_track_deb.status = "complete";
                    };
                    a.on(n, "message", function(e) {
                        var t = e && e.data;
                        t && "qt_verify_msg" === t.message && (window.localStorage.setItem("aplus_track_debug_id", t.data), 
                        r(t.data), e.source && e.source.postMessage({
                            message: "qt_msg_sdk"
                        }, e.origin));
                    });
                    var i = o();
                    i && r(i);
                }
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    function a(e, t, n) {
        var a = aplus._$ || {}, o = a.meta_info || {}, r = o.aplus_ctap || {}, i = o["aplus-touch"];
        if (r && "function" == typeof r.on) r.on(e, t); else {
            var s = "ontouchend" in document.createElement("div");
            !s || "tap" !== i && "tapSpm" !== n && "tap" !== n ? u(e, s ? "touchstart" : "mousedown", t) : l.on(e, t);
        }
    }
    function o(e) {
        try {
            document.documentElement.doScroll("left");
        } catch (t) {
            return void setTimeout(function() {
                o(e);
            }, 1);
        }
        e();
    }
    function r(e) {
        var t = 0, n = function() {
            0 === t && e(), t++;
        };
        "complete" === document.readyState && n();
        var a;
        if (document.addEventListener) a = function() {
            document.removeEventListener("DOMContentLoaded", a, !1), n();
        }, document.addEventListener("DOMContentLoaded", a, !1), window.addEventListener("load", n, !1); else if (document.attachEvent) {
            a = function() {
                "complete" === document.readyState && (document.detachEvent("onreadystatechange", a), 
                n());
            }, document.attachEvent("onreadystatechange", a), window.attachEvent("onload", n);
            var r = !1;
            try {
                r = null === window.frameElement;
            } catch (e) {}
            document.documentElement.doScroll && r && o(n);
        }
    }
    function i(e) {
        "complete" === document.readyState ? e() : u(window, "load", e);
    }
    function s(e) {
        var t = history[e];
        return function() {
            var n;
            try {
                n = new Event(e), n.arguments = arguments;
            } catch (t) {
                n = document.createEvent("Event"), n.initEvent(e, !0, !0);
            }
            window.dispatchEvent(n);
            var a = t.apply(this, arguments);
            return a;
        };
    }
    function u() {
        var e = window, t = arguments;
        if (2 === t.length) "DOMReady" === t[0] && r(t[1]), "onload" === t[0] && i(t[1]); else if (3 === t.length) {
            var n = t[0], o = t[1], u = t[2];
            if ("tap" === o || "tapSpm" === o) a(n, u, o); else {
                [ "pushState", "replaceState" ].indexOf(o) > -1 && (history[o] = s(o));
                var l = document.attachEvent ? "attachEvent" : "addEventListener", p = !!document.attachEvent;
                n[l]((p ? "on" : "") + o, function(t) {
                    t = t || e.event;
                    var n = t.target || t.srcElement;
                    "function" == typeof u && u(t, n);
                }, !!c(o) && {
                    passive: !0
                });
            }
        }
    }
    var c = n(14), l = n(15);
    t.DOMReady = r, t.onload = i, t.on = u;
}, function(e, t) {
    var n;
    e.exports = function(e) {
        if ("boolean" == typeof n) return n;
        if (!/touch|mouse|scroll|wheel/i.test(e)) return !1;
        n = !1;
        try {
            var t = Object.defineProperty({}, "passive", {
                get: function() {
                    n = !0;
                }
            });
            window.addEventListener("test", null, t);
        } catch (e) {}
        return n;
    };
}, function(e, t) {
    "use strict";
    function n(e, t) {
        return e + Math.floor(Math.random() * (t - e + 1));
    }
    function a(e, t, n) {
        var a = document.createEvent("HTMLEvents");
        if (a.initEvent(t, !0, !0), "object" == typeof n) for (var o in n) a[o] = n[o];
        e.dispatchEvent(a);
    }
    function o(e) {
        var t = document.documentElement;
        0 === Object.keys(l).length && (t.addEventListener(g, r, !1), t.addEventListener(f, i, !1), 
        t.addEventListener(_, i, !1));
        for (var n = 0; n < e.changedTouches.length; n++) {
            var a = e.changedTouches[n], o = {};
            for (var s in a) o[s] = a[s];
            var u = {
                startTouch: o,
                startTime: Date.now(),
                status: d,
                element: e.srcElement || e.target
            };
            l[a.identifier] = u;
        }
    }
    function r(e) {
        for (var t = 0; t < e.changedTouches.length; t++) {
            var n = e.changedTouches[t], a = l[n.identifier];
            if (!a) return;
            var o = n.clientX - a.startTouch.clientX, r = n.clientY - a.startTouch.clientY, i = Math.sqrt(Math.pow(o, 2) + Math.pow(r, 2));
            (a.status === d || "pressing" === a.status) && i > 10 && (a.status = "panning");
        }
    }
    function i(e) {
        for (var t = 0; t < e.changedTouches.length; t++) {
            var n = e.changedTouches[t], o = n.identifier, s = l[o];
            s && (s.status === d && e.type === f && (s.timestamp = Date.now(), a(s.element, h, {
                touch: n,
                touchEvent: e
            })), delete l[o]);
        }
        var u = document.documentElement;
        0 === Object.keys(l).length && (u.removeEventListener(g, r, !1), u.removeEventListener(f, i, !1), 
        u.removeEventListener(_, i, !1));
    }
    function s(e) {
        e.__fixTouchEvent || (e.addEventListener(p, function() {}, !1), e.__fixTouchEvent = !0);
    }
    function u() {
        if (!c) {
            var e = document.documentElement;
            e.addEventListener(p, o, !1), c = !0;
        }
    }
    var c = !1, l = {}, p = "touchstart", f = "touchend", g = "touchmove", d = "tapping", _ = "touchcancel", h = "aplus_tap" + n(1, 1e5);
    e.exports = {
        on: function(e, t) {
            u(), e && e.addEventListener && t && (s(e), e.addEventListener(h, t._aplus_tap_callback = function(e) {
                t(e, e.target);
            }, !1));
        },
        un: function(e, t) {
            e && e.removeEventListener && t && t._aplus_tap_callback && e.removeEventListener(h, t._aplus_tap_callback, !1);
        }
    };
}, function(e, t) {
    "use strict";
    e.exports = function() {
        return {
            run: function(e, t) {
                var n = setInterval(function() {
                    document.getElementsByTagName("body").length && (clearInterval(n), n = null, t());
                }, 50);
                return setTimeout(function() {
                    n && clearInterval(n);
                }, 1e3), 1e3;
            }
        };
    };
}, function(e, t, n) {
    var a = n(18), o = n(2);
    e.exports = function() {
        return {
            run: function() {
                var e = o.getGlobalValue("aplus");
                e.aplus_pubsub || (e.aplus_pubsub = a.create());
            }
        };
    };
}, function(e, t, n) {
    var a = n(19);
    e.exports = a.extend({
        subscribeOnce: function(e, t) {
            this.callable(t);
            var n, a = this;
            return this.subscribe.call(this, e, n = function() {
                a.unsubscribe.call(a, e, n);
                var o = Array.prototype.slice.call(arguments);
                t.apply(a, o);
            }), this;
        }
    });
}, function(e, t, n) {
    "use strict";
    var a = n(20), o = n(21), r = function(e) {
        for (var t = e.length, n = new Array(t - 1), a = 1; a < t; a++) n[a - 1] = e[a];
        return n;
    }, i = o.extend({
        callable: function(e) {
            if (!a(e)) throw new TypeError(e + " is not a function");
            return e;
        },
        create: function(e) {
            var t = new this();
            for (var n in e) t[n] = e[n];
            return t.handlers = [], t.pubs = {}, t;
        },
        setHandlers: function(e) {
            this.handlers = e;
        },
        subscribe: function(e, t) {
            this.callable(t);
            var n = this, a = n.pubs || {}, o = n.handlers || [];
            e in o || (o[e] = []), o[e].push(t), n.setHandlers(o);
            for (var r = a[e] || [], i = 0; i < r.length; i++) {
                var s = r[i]();
                t.apply(n, s);
            }
            return n;
        },
        unsubscribe: function(e, t) {
            this.callable(t);
            try {
                var n = this.handlers[e];
                if (!n) return this;
                if ("object" == typeof n && n.length > 0) {
                    for (var a = 0; a < n.length; a++) t === n[a] && n.splice(a, 1);
                    this.handlers[e] = n;
                } else delete this.handlers[e];
            } catch (e) {}
            return this;
        },
        publish: function(e) {
            var t = r(arguments), n = this.handlers || [], o = n[e] ? n[e].length : 0;
            if (o > 0) for (var i = 0; i < o; i++) {
                var s = n[e][i];
                a(s) && s.apply(this, t);
            }
            return this;
        },
        cachePubs: function(e) {
            var t = this.pubs || {}, n = r(arguments);
            t[e] || (t[e] = []), t[e].push(function() {
                return n;
            });
        }
    });
    e.exports = i;
}, function(e, t) {
    "use strict";
    e.exports = function(e) {
        return "function" == typeof e;
    };
}, function(e, t, n) {
    "use strict";
    function a() {}
    var o = n(20);
    a.prototype.extend = function() {}, a.prototype.create = function() {}, a.extend = function(e) {
        return this.prototype.extend.call(this, e);
    }, a.prototype.create = function(e) {
        var t = new this();
        for (var n in e) t[n] = e[n];
        return t;
    }, a.prototype.extend = function(e) {
        var t = function() {};
        try {
            o(Object.create) || (Object.create = function(e) {
                function t() {}
                return t.prototype = e, new t();
            }), t.prototype = Object.create(this.prototype);
            for (var n in e) t.prototype[n] = e[n];
            t.prototype.constructor = t, t.extend = t.prototype.extend, t.create = t.prototype.create;
        } catch (e) {
            console && console.log(e);
        } finally {
            return t;
        }
    }, e.exports = a;
}, function(e, t, n) {
    "use strict";
    e.exports = function() {
        return {
            run: function() {
                var e = window.aplus || (window.aplus = {});
                e._aplus_client = n(23)();
            }
        };
    };
}, function(e, t) {
    "use strict";
    function n(e) {
        for (var t = [ [ "Windows NT 5.1", "winXP" ], [ "Windows NT 6.1", "win7" ], [ "Windows NT 6.0", "winVista" ], [ "Windows NT 6.2", "win8" ], [ "Windows NT 6.3", "win8.1" ], [ "Windows NT 10.0", "win10" ], [ "Ubuntu", "ubuntu" ], [ "Linux", "linux" ], [ "Windows NT 5.2", "win2003" ], [ "Windows NT 5.0", "win2000" ], [ "Windows", "winOther" ], [ "rhino", "rhino" ] ], n = 0, a = t.length; n < a; ++n) {
            var o = t[n][0];
            if (e.indexOf(o) !== -1) {
                var r = o.split(" ")[0];
                return {
                    device_model: r,
                    os: r,
                    os_version: t[n][1]
                };
            }
        }
        var i = "other";
        return {
            device_model: i,
            os: i,
            os_version: i
        };
    }
    function a(e, t) {
        var n = e.substring(e.indexOf("(") + 1, e.indexOf(")")), a = {
            device_model: t
        }, o = t.toLowerCase();
        switch (o) {
          case "ipad":
          case "iphone":
          case "ipod":
          case "macintosh":
            "macintosh" === o ? /Mac OS X/.test(n) ? a.os = "Mac OS X" : a.os = "Mac OS" : a.os = "IOS", 
            a.os_version = n.match(/[0-9_.]+/)[0];
            break;

          case "android":
            a.os = "Android", a.os_version = n.match(/[0-9.]+/)[0];
        }
        return a.os_version = a.os_version.replace(/_/g, "."), a;
    }
    e.exports = function() {
        var e = navigator.userAgent, t = {}, o = e.match(/iphone|ipad|android|macintosh/i), r = e.match(/Darwin/i);
        if (o) t = a(e, o[0]); else if (r) {
            var i = e.split(" ")[2];
            t = {
                os: "Darwin",
                os_version: i.match(/[0-9.]+/)[0],
                device_model: "Darwin"
            };
        } else t = n(e);
        var s = screen || {};
        return t.screenWidth = s.width, t.screenHeight = s.height, navigator && (t.userAgent = navigator.userAgent || "-", 
        t.language = navigator.language || navigator.userLanguage || "-"), t;
    };
}, function(e, t, n) {
    "use strict";
    e.exports = function() {
        return {
            run: function() {
                n(25)(this.options.context.aplus_config);
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    function a() {
        var e = document, t = "//g.alicdn.com";
        if (e) {
            var n = e.getElementById("beacon-aplus") || e.getElementById("tb-beacon-aplus"), a = [ "//assets.alicdn.com/g", "//g-assets.daily.taobao.net", "//alidt.oss-cn-hangzhou.aliyuncs.com" ];
            if (n) for (var o = 0; o < a.length; o++) {
                var r = new RegExp(a[o]);
                if (r.test(n.src)) {
                    t = a[o];
                    break;
                }
            }
        }
        return t;
    }
    function o() {
        s || (s = a());
        var e = "//assets.alicdn.com/g" === s || "//laz-g-cdn.alicdn.com" === s;
        return e || "int" === f.getMetaInfo("aplus-env");
    }
    function r() {
        if (navigator && navigator.userAgent) {
            var e = /iphone|android/i.test(navigator.userAgent), t = e || /TB\-PD/i.test(navigator.userAgent);
            return t;
        }
        return !0;
    }
    function i() {
        var e, t = c.getParamFromUrl("utparamcnt", location.href);
        if (t) try {
            e = t = JSON.parse(decodeURIComponent(t));
        } catch (e) {}
        return e;
    }
    var s, u = n(2), c = n(26), l = n(30), p = n(31), f = n(32);
    e.exports = function(e) {
        var t = u.getGlobalValue("aplus"), s = e.globalConfig.NAME_STORAGE_KEYS, c = n(43).getRefer(s);
        t.nameStorage = p.nameStorage, l.haveNativeFlagInUA();
        var g = t._$ = t._$ || {};
        g.is_terminal = r(), g.send_pv_count = 0, g.page_referrer = c, g.spm = {
            data: {},
            page_referrer: c
        }, t.globalConfig = e.globalConfig;
        var d = i();
        g.meta_info = f.qGet() || {};
        for (var _ in e.metaInfo) if (!g.meta_info.hasOwnProperty(_)) {
            var h = e.metaInfo[_];
            "aplus-utparam" === _ ? (d && f.appendMetaInfo(_, d), f.appendMetaInfo(_, h)) : f.setMetaInfo(_, h);
        }
        t._$ = g, t.isInternational = o, t.getCdnPath = a;
    };
}, function(e, t, n) {
    "use strict";
    function a(e, t) {
        if (!e || !t) return "";
        var n, a = "";
        try {
            var o = new RegExp(e + "=([^&|#|?|/]+)");
            if ("spm" === e || "scm" === e) {
                var r = new RegExp("\\?.*" + e + "=([\\w\\.\\-\\*/]+)"), i = t.match(o), s = t.match(r), u = i && 2 === i.length ? i[1] : "", c = s && 2 === s.length ? s[1] : "";
                a = u > c ? u : c, a = decodeURIComponent(a);
            } else n = t.match(o), a = n && 2 === n.length ? n[1] : "";
        } catch (e) {} finally {
            return a;
        }
    }
    function o(e, t) {
        var n, a, o, r, i, u = t || location.href, c = "&", l = [];
        return s(e, function(e, t) {
            new RegExp(e + "=").test(u) || l.push(e + "=" + t);
        }), 0 === l.length ? u : (u.indexOf("#") !== -1 && (o = u.split("#"), u = o.shift(), 
        a = o.join("#")), r = u.split("?"), i = r.length - 1, o = r[0].split("//"), o = o[o.length - 1].split("/"), 
        i > 0 && (n = r.pop(), u = r.join("?")), n && i > 1 && n.indexOf("&") == -1 && n.indexOf("%") !== -1 && (c = "%26"), 
        u = u + "?" + l.join("&") + (n ? c + n : "") + (a ? "#" + a : ""));
    }
    function r(e) {
        var t = location.hash + "";
        u.pushIntoGoldlogQueue("aplus.on", [ window, "hashchange", function() {
            t !== location.hash && (t = location.hash + "", e && "function" == typeof e && e(t, l));
        } ]);
    }
    function i(e) {
        function t(t) {
            var a = "";
            if (t) {
                a = t && t.arguments && t.arguments.length > 2 && t.arguments[2];
                var o = /^http|https/.test(a) ? a : location.protocol + "//" + location.host + a;
                location.href !== o && setTimeout(function() {
                    e && "function" == typeof e && e(a, p);
                }, 0);
            } else a = location.pathname + location.search, a !== n && setTimeout(function() {
                e && "function" == typeof e && e(a, p);
            }, 0);
            n = a;
        }
        var n = location.pathname + location.search;
        if (history.pushState && window.addEventListener) {
            u.pushIntoGoldlogQueue("aplus.on", [ window, "pushState", function(e) {
                t(e);
            } ]), u.pushIntoGoldlogQueue("aplus.on", [ window, "popstate", function() {
                t();
            } ]);
            var a = c.getMetaCnt("aplus-track-replacestate") || aplus.getMetaInfo("aplus-track-replacestate");
            a && u.pushIntoGoldlogQueue("aplus.on", [ window, "replaceState", function(e) {
                t(e);
            } ]);
        }
    }
    var s = n(10);
    t.addParamsIntoUrl = o, t.getParamFromUrl = a, t.getSPMFromUrl = function(e) {
        return a("spm", e);
    }, t.getQueryFromUrl = function() {
        function e(e) {
            for (var t = decodeURIComponent(e), n = t.indexOf("?") + 1, a = t.substring(n), o = Object.create(null), r = a.split("&"), i = 0; i < r.length; i++) o[r[i].split("=")[0]] = decodeURIComponent(r[i].split("=")[1]);
            return o;
        }
        try {
            var t = location && location.hash, a = location && location.search;
            if (t && t.indexOf("?") !== -1) return e(t);
            if (a && a.indexOf("?") !== -1) return e(a);
        } catch (e) {
            var o = n(8);
            o().w("url error === ", location.href);
        }
    };
    var u = n(27), c = n(28), l = "hash", p = "history";
    t.watchHashChange = r, t.watchHistoryChange = i;
}, function(e, t, n) {
    "use strict";
    var a = n(2);
    t.pushIntoGoldlogQueue = function(e, t) {
        var n = a.getGlobalValue("aplus_queue"), o = a.getGlobalValue("aplus"), r = e.split("."), i = o[r[1]], s = i ? i[r[2]] : null;
        o && 2 === r.length && i ? i.apply(o, t) : 3 === r.length && s ? s.apply(i, t) : n.push({
            action: e,
            arguments: t
        });
    };
}, function(e, t, n) {
    "use strict";
    function a(e) {
        return i = i || document.getElementsByTagName("head")[0], s && !e ? s : i ? s = i.getElementsByTagName("meta") : [];
    }
    function o(e, t) {
        var n, o, r, i = a(), s = i.length;
        for (n = 0; n < s; n++) o = i[n], u.tryToGetAttribute(o, "name") === e && (r = u.tryToGetAttribute(o, t || "content"));
        return r || "";
    }
    function r(e) {
        var t = {
            isonepage: "-1",
            urlpagename: ""
        }, n = e.qGet();
        if (n && n.hasOwnProperty("isonepage_data")) t.isonepage = n.isonepage_data.isonepage, 
        t.urlpagename = n.isonepage_data.urlpagename; else {
            var a = o("isonepage") || "-1", r = a.split("|");
            t.isonepage = r[0], t.urlpagename = r[1] ? r[1] : "";
        }
        return t;
    }
    var i, s, u = n(29);
    t.getMetaTags = a, t.getMetaCnt = o, t.getOnePageInfo = r;
}, function(e, t) {
    "use strict";
    t.tryToGetAttribute = function(e, t) {
        return e && e.getAttribute ? e.getAttribute(t) || "" : "";
    };
    var n = function(e, t, n) {
        if (e && e.setAttribute) try {
            e.setAttribute(t, n);
        } catch (e) {}
    };
    t.tryToSetAttribute = n, t.tryToRemoveAttribute = function(e, t) {
        if (e && e.removeAttribute) try {
            e.removeAttribute(t);
        } catch (a) {
            n(e, t, "");
        }
    };
}, function(e, t, n) {
    "use strict";
    var a = n(2), o = "UT4Aplus", r = "Umeng4Aplus";
    t.isNative4Aplus = function() {
        var e = a.getGlobalValue("aplus"), t = e.getMetaInfo("aplus-toUT"), n = e.aplusBridgeName;
        return n === o && t === o || n === r;
    }, t.haveNativeFlagInUA = function() {
        var e = a.getGlobalValue("aplus"), t = e.aplusBridgeName;
        if (!t && "boolean" != typeof t && navigator && navigator.userAgent) {
            var n = new RegExp([ o, r ].join("|"), "i"), i = navigator.userAgent.match(n);
            t = !!i && i[0], e.aplusBridgeName = t;
        }
        return !!t;
    };
}, function(e, t, n) {
    "use strict";
    var a = n(2), o = function() {
        function e() {
            var e, t = [], n = !0;
            for (var a in f) f.hasOwnProperty(a) && (n = !1, e = f[a] || "", t.push(l(a) + u + l(e)));
            window.name = n ? o : r + l(o) + s + t.join(c);
        }
        function t(e, t, n) {
            e && (e.addEventListener ? e.addEventListener(t, n, !1) : e.attachEvent && e.attachEvent("on" + t, function(t) {
                n.call(e, t);
            }));
        }
        var n = a.getGlobalValue("nameStorage");
        if (n) return n;
        var o, r = "nameStorage:", i = /^([^=]+)(?:=(.*))?$/, s = "?", u = "=", c = "&", l = encodeURIComponent, p = decodeURIComponent, f = {}, g = {};
        return function(e) {
            if (e && 0 === e.indexOf(r)) {
                var t = e.split(/[:?]/);
                t.shift(), o = p(t.shift()) || "";
                for (var n, a, s, u = t.join(""), l = u.split(c), g = 0, d = l.length; g < d; g++) n = l[g].match(i), 
                n && n[1] && (a = p(n[1]), s = p(n[2]) || "", f[a] = s);
            } else o = e || "";
        }(window.name), g.setItem = function(t, n) {
            t && "undefined" != typeof n && (f[t] = String(n), e());
        }, g.getItem = function(e) {
            return f.hasOwnProperty(e) ? f[e] : null;
        }, g.removeItem = function(t) {
            f.hasOwnProperty(t) && (f[t] = null, delete f[t], e());
        }, g.clear = function() {
            f = {}, e();
        }, g.valueOf = function() {
            return f;
        }, g.toString = function() {
            var e = window.name;
            return 0 === e.indexOf(r) ? e : r + e;
        }, t(window, "beforeunload", function() {
            e();
        }), g;
    }();
    t.nameStorage = o;
}, function(e, t, n) {
    "use strict";
    function a(e) {
        var t, n, a, o = e.length, r = {};
        for (v._microscope_data = r, t = 0; t < o; t++) n = e[t], "microscope-data" === _.tryToGetAttribute(n, "name") && (a = _.tryToGetAttribute(n, "content"), 
        f.parseSemicolonContent(a, r), v.is_head_has_meta_microscope_data = !0);
        v._microscope_data_params = l.obj2param(r), v.ms_data_page_id = r.pageId, v.ms_data_shop_id = r.shopId, 
        v.ms_data_instance_id = r.siteInstanceId, v.ms_data_siteCategoryId = r.siteCategory, 
        v.ms_prototype_id = r.prototypeId, v.site_instance_id_or_shop_id = v.ms_data_instance_id || v.ms_data_shop_id, 
        v._atp_beacon_data = {}, v._atp_beacon_data_params = "";
    }
    function o(e) {
        var t, n = function() {
            var t;
            return document.querySelector && (t = document.querySelector("meta[name=data-spm]")), 
            d(e, function(e) {
                "data-spm" === _.tryToGetAttribute(e, "name") && (t = e);
            }), t;
        }, a = n();
        return a && (t = _.tryToGetAttribute(a, "data-spm-protocol")), t;
    }
    function r(e) {
        var t = e.isonepage || "-1", n = t.split("|"), a = n[0], o = n[1] ? n[1] : "";
        e.isonepage_data = {
            isonepage: a,
            urlpagename: o
        };
    }
    function i() {
        if (document) {
            var e = h.getMetaTags();
            a(e), d(e, function(e) {
                var t = _.tryToGetAttribute(e, "name");
                if (/^aplus/.test(t) && (v[t] = h.getMetaCnt(t), t === y)) try {
                    u = v[t] = JSON.parse(h.getMetaCnt(t));
                } catch (e) {}
            }), d(b, function(e) {
                v[e] = h.getMetaCnt(e);
            }), v.spm_protocol = o(e), u && (v = p.assign(v, u));
            var t, n, i = [ "aplus-rate-ahot" ], s = i.length;
            for (t = 0; t < s; t++) n = i[t], v[n] = parseFloat(v[n]);
            r(v);
        }
        return c = v || {}, v;
    }
    function s(e) {
        g.logger({
            msg: "please do not repeat setPriorityMetaInfo " + e
        });
    }
    var u, c, l = n(33), p = n(34), f = n(36), g = n(40), d = n(10), _ = n(29), h = n(28), m = n(2), v = {}, y = "aplus-x-settings", b = [ "ahot-aplus", "isonepage", "spm-id", "data-spm", "microscope-data" ];
    t.getInfo = i, t.qGet = function() {
        return c || i();
    }, t.setMetaInfo = function(e, t) {
        if (c || (c = {}), "object" == typeof u && u[e]) return s(e), !0;
        if (e === y) {
            if (u) s(e); else try {
                u = "object" == typeof t ? t : JSON.parse(t), c = p.assign(c, u);
            } catch (e) {
                console && console.log(e);
            }
            return !0;
        }
        return "aplus-exinfo" === e ? c[e] = "object" == typeof t ? t : l.param2obj(t) : c[e] = t, 
        !0;
    };
    var w = function(e) {
        return c || (c = {}), c[e] || "";
    };
    t.getMetaInfo = w, t.appendMetaInfo = function(e, t) {
        var n = m.getGlobalValue("aplus");
        if (e && t) {
            var a, o = function(n) {
                try {
                    var a = "string" == typeof t ? JSON.parse(t) : t;
                    s(e, p.assign(n, a));
                } catch (e) {}
            }, r = function(n) {
                try {
                    var a = "string" == typeof t ? JSON.parse(t) : t;
                    s(e, n.concat(a));
                } catch (e) {}
            }, i = function(e) {
                e.constructor === Array ? r(e) : o(e);
            }, s = function(e, t) {
                n.setMetaInfo(e, t, {
                    from: "appendMetaInfo"
                });
            }, u = function(n) {
                var a = l.param2obj(t);
                s(e, p.assign(n, a));
            }, c = n.getMetaInfo(e);
            if ("aplus-exinfo" === e && (u(c), a = !0), c) if ("object" == typeof c) i(c), a = !0; else try {
                var f = JSON.parse(c);
                "object" == typeof f && (i(f), a = !0);
            } catch (e) {}
            a || s(e, t);
        }
    };
}, function(e, t) {
    "use strict";
    function n(e, t) {
        var n, o, r, i = [], s = e.length;
        for (r = 0; r < s; r++) {
            n = e[r][0], o = e[r][1];
            var u = 0 === n.indexOf(a), c = u || t ? o : encodeURIComponent(o);
            i.push(u ? c : n + "=" + c);
        }
        return i.join("&");
    }
    t.arr2obj = function(e) {
        var t, n, a, o = {}, r = e.length;
        for (a = 0; a < r; a++) t = e[a][0], n = e[a][1], o[t] = n;
        return o;
    }, t.param2obj = function(e) {
        if ("object" == typeof e) return e;
        var t = {};
        if (!e || "string" != typeof e) return t;
        for (var n = e.split("&"), a = 0; a < n.length; a++) {
            var o = n[a], r = o.indexOf("="), i = o.split("="), s = o.length;
            if (2 === i.length) t[i[0]] = i[1] || ""; else if (r > 0) {
                var u = o.slice(0, r), c = o.slice(r + 1, s) || "";
                t[u] = c;
            } else t[i[0]] = "";
        }
        return t;
    };
    var a = "::-plain-::";
    t.s_plain_obj = a, t.arr2param = n, t.obj2param = function(e, t) {
        var n, o, r, i = [];
        for (n in e) n && e.hasOwnProperty(n) && ("object" == typeof e[n] ? (o = "" + this.obj2param(e[n]), 
        r = o) : (o = "" + e[n], r = n + "=" + o), t ? i.push(r) : i.push(0 === n.indexOf(a) ? o : r));
        return i.join("&");
    }, t.encodeGokeyValue = function(e) {
        return e;
    };
}, function(e, t, n) {
    "use strict";
    t.assign = n(35), t.makeCacheNum = function() {
        return Math.floor(268435456 * Math.random()).toString(16);
    }, t.isStartWith = function(e, t) {
        return 0 === e.indexOf(t);
    }, t.isEndWith = function(e, t) {
        if (String.prototype.endsWith) return e.endsWith(t);
        var n = e.length, a = t.length;
        return n >= a && e.substring(n - a) === t;
    }, t.any = function(e, t) {
        var n, a = e.length;
        for (n = 0; n < a; n++) if (t(e[n])) return !0;
        return !1;
    }, t.isNumber = function(e) {
        return "number" == typeof e;
    }, t.isNaN = function(e) {
        return isNaN ? isNaN(e) : e !== e;
    }, t.isContain = function(e, t) {
        return e.indexOf(t) > -1;
    };
    var a = function(e) {
        var t, n = e.constructor === Array ? [] : {};
        if ("object" == typeof e) {
            if (JSON && JSON.parse) t = JSON.stringify(e), n = JSON.parse(t); else for (var o in e) n[o] = "object" == typeof e[o] ? a(e[o]) : e[o];
            return n;
        }
    };
    t.cloneDeep = a;
    var o = function() {
        for (var e, t = /[?&]([^=#]+)=([^&#]*)/g, n = window.location.href, a = {}; e = t.exec(n); ) a[e[1]] = e[2];
        return a;
    };
    t.getUrlParams = o;
    var r = function(e) {
        if (!e) return !0;
        for (var t in e) if (Object.prototype.hasOwnProperty.call(e, t)) return !1;
        return !0;
    };
    t.isEmptyObject = r;
}, function(e, t) {
    e.exports = function(e, t) {
        return "function" != typeof Object.assign ? function(e) {
            for (var t = Object(e), n = 1; n < arguments.length; n++) {
                var a = arguments[n];
                if (null !== a) for (var o in a) Object.prototype.hasOwnProperty.call(a, o) && (t[o] = a[o]);
            }
            return t;
        }(e, t) : Object.assign({}, e, t);
    };
}, function(e, t, n) {
    "use strict";
    var a = n(37), o = n(38), r = n(2), i = n(34), s = n(9), u = n(39);
    e.exports = {
        tryToDecodeURIComponent: function(e, t) {
            var n = t || "";
            if (e) try {
                n = decodeURIComponent(e);
            } catch (e) {}
            return n;
        },
        parseSemicolonContent: function(e, t, n) {
            t = t || {};
            var o, r, i = e.split(";"), s = i.length;
            for (o = 0; o < s; o++) {
                r = i[o].split("=");
                var u = a.trim(r.slice(1).join("="));
                t[a.trim(r[0]) || ""] = n ? u : this.tryToDecodeURIComponent(u);
            }
            return t;
        },
        nodeListToArray: function(e) {
            var t, n;
            try {
                return t = [].slice.call(e);
            } catch (o) {
                t = [], n = e.length;
                for (var a = 0; a < n; a++) t.push(e[a]);
                return t;
            }
        },
        getLsCna: function(e, t) {
            if (o.get && o.test()) {
                var n = "", a = o.get(e);
                if (a) {
                    var r = a.split("_") || [];
                    n = t ? r.length > 1 && t === r[0] ? r[1] : "" : r.length > 1 ? r[1] : "";
                }
                return decodeURIComponent(n);
            }
            return "";
        },
        setLsCna: function(e, t, n) {
            n && o.set && o.test() && o.set(e, t + "_" + encodeURIComponent(n));
        },
        getLsImpv: function(e, t) {
            if (o.get && o.test()) {
                var n = "", a = o.get(e);
                if (a) {
                    var r = a.split("||") || [];
                    n = t ? r.length > 1 && t === r[0] ? r[1] : "" : r.length > 1 ? r[1] : "";
                }
                return decodeURIComponent(n);
            }
            return "";
        },
        setLsImpv: function(e, t, n) {
            n && o.set && o.test() && o.set(e, t + "||" + encodeURIComponent(n));
        },
        setLsRemoteCfg: function(e, t, n) {
            if (n && o.set && o.test()) {
                var a = i.cloneDeep(n);
                "object" == typeof a && (a = JSON.stringify(a)), o.set(e, t + "||" + encodeURIComponent(a));
            }
        },
        getLsRemoteCfg: function(e, t) {
            if (o.get && o.test()) {
                var n = "", a = o.get(e);
                if (a) {
                    var r = a.split("||") || [];
                    n = t ? r.length > 1 && t === r[0] ? r[1] : "" : r.length > 1 ? r[1] : "";
                }
                return s.parse(decodeURIComponent(n));
            }
            return "";
        },
        getUrl: function(e) {
            var t = r.getGlobalValue("aplus"), a = n(3), o = e || "//log.mmstat.com/eg.js";
            try {
                var i = t.getMetaInfo(a.APLUS_PV_DOMAIN);
                i = u.fixDomain(i).replace(/\/\w+.gif$/, ""), o = i + "/eg.js";
            } catch (e) {}
            return o;
        }
    };
}, function(e, t) {
    "use strict";
    function n(e) {
        return "string" == typeof e ? e.replace(/^\s+|\s+$/g, "") : "";
    }
    t.trim = n;
}, function(e, t) {
    "use strict";
    e.exports = {
        set: function(e, t) {
            try {
                return localStorage.setItem(e, t), !0;
            } catch (e) {
                return !1;
            }
        },
        get: function(e) {
            try {
                return localStorage.getItem(e);
            } catch (e) {
                return "";
            }
        },
        test: function() {
            var e = "grey_test_key";
            try {
                return localStorage.setItem(e, 1), localStorage.removeItem(e), !0;
            } catch (e) {
                return !1;
            }
        },
        remove: function(e) {
            localStorage.removeItem(e);
        }
    };
}, function(e, t, n) {
    "use strict";
    function a(e) {
        var t, n, a, r = [], i = e.length;
        for (a = 0; a < i; a++) t = e[a][0], n = e[a][1], r.push(0 === t.indexOf(o) ? n : t + "=" + encodeURIComponent(n));
        return r.join("&");
    }
    var o = "::-plain-::";
    t.mkPlainKey = function() {
        return o + Math.random();
    }, t.s_plain_obj = o, t.mkPlainKeyForExparams = function(e) {
        var t = e || o;
        return t + "exparams";
    }, t.arr2param = a, t.param2arr = function(e) {
        for (var t, n = e.split("&"), a = 0, o = n.length, r = []; a < o; a++) t = n[a].split("="), 
        r.push([ t.shift(), t.join("=") ]);
        return r;
    }, t.arr2obj = function(e) {
        var t, n, a, o = {}, r = e.length;
        for (a = 0; a < r; a++) t = e[a][0], n = e[a][1], o[t] = n;
        return o;
    }, t.jsonLikeStr2JSON = function(e) {
        if (!e || "string" != typeof e) return {};
        for (var t = e.replace(/['"{}]+/g, ""), n = t.split(","), a = [], o = 0; o < n.length; o++) a.push(n[o].split(":"));
        var r = this.arr2obj(a);
        return r;
    }, t.fixDomain = function(e) {
        return e.indexOf("https://") !== -1 || e.indexOf("http://") !== -1 ? e : (e = (/^\/\//.test(e) ? "" : "//") + e, 
        /^\/\/(\d+\.){3,}\d+/.test(e) ? "http:" + e : "https:" + e);
    }, t.getAppKey = function() {
        var e = n(2).getGlobalValue("aplus");
        return e.getMetaInfo("appkey") || e.getMetaInfo("appId") || e.getMetaInfo("appKey");
    }, t.checkEmptyObj = function(e) {
        return "object" != typeof e || 0 === Object.keys(e).length;
    }, t.checkDomain = function(e) {
        var t = new RegExp(/^((http|https|''):\/\/)?([a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+(:[0-9]{1,5})*)$/), a = (e.match(t) || [])[0];
        if (!e || !a) {
            var o = n(8);
            return o().tip_w(o().repeat("!")), o().tip_w("trackDomain error, please check aplus-rhost-v setting, current value is: " + e || "undefined"), 
            o().tip_w("we accept these three patterns:"), o().tip_w("eg1: https://test-qtracking-xxx.com:port, port is optional"), 
            o().tip_w("eg2: http://test-qtracking-xxx.com:port, port is optional"), o().tip_w("eg3: test-qtracking-xxx.com:port, port is optional"), 
            o().tip_w(o().repeat("!")), !1;
        }
        return !0;
    }, t.checkOpenid = function(e) {
        if (!e) {
            var t = n(8);
            return t().tip_w(t().repeat("!")), t().tip_w("QT need an unique id as QT's deviceid!!"), 
            t().tip_w("setting examples: aplus_queue.push({action: 'aplus.setMetaInfo', arguments: ['_anony_id', xxxxxx]});"), 
            t().tip_w("referrence document: https://t.tb.cn/1dTHjTTQF0UjOTNHiCkaCS"), t().tip_w(t().repeat("!")), 
            !1;
        }
        return !0;
    };
    var r = n(10);
    t.mapEventSampleRates = function(e) {
        var t = [];
        return r(e, function(e) {
            e.eventIds && e.eventIds.length > 0 && r(e.eventIds, function(n) {
                t.push({
                    eventId: n,
                    samplingRate: e.samplingRate
                });
            });
        }), t;
    };
}, function(e, t, n) {
    "use strict";
    var a = n(41), o = "[APLUS] -- ";
    t.logger = function(e) {
        e || (e = {});
        var t = e.level || "warn";
        console && console[t] && console[t](o + e.msg);
    }, t.log = function() {
        var e = a && a.getMetaInfo("debug");
        e && console.log.apply(console, [ o ].concat(Array.prototype.slice.apply(arguments)));
    }, t.debugLog = function(e) {
        var t = n(2).getGlobalValue("aplus");
        t && t.aplusDebug && this.logger(e);
    };
}, function(e, t, n) {
    "use strict";
    function a() {
        return i = f || {}, f;
    }
    function o() {
        return i || a();
    }
    function r(e, t) {
        return i || (i = {}), "aplus-inject-record-gokey" === e && (_("the API aplus-inject-record-gokey is deprecated, if needed please concat APLUS SDK supporter"), 
        p.record("/inject.record.gokey", "OTHER", "")), i[e] = t, !0;
    }
    var i, s = n(42), u = n(33), c = n(2), l = n(3), p = c.getGlobalValue(l.APLUS), f = {}, g = "object", d = "string";
    t.getInfo = a, t.qGet = o, t.setMetaInfo = r;
    var _ = function(e) {
        try {
            console && console.error(e);
        } catch (e) {}
    };
    t.catchException = _;
    var h = function(e) {
        return i || (i = {}), i[e] || "";
    };
    t.getMetaInfo = h;
    var m = function(e) {
        var t = h("aplus-inject-record-gokey");
        return "function" == typeof t ? t(e) : e.gokey;
    };
    t.getUserInjectGokey = m;
    var v = function(e, t) {
        if (e && t) {
            var n, a = function(n) {
                try {
                    var a = typeof t === d ? JSON.parse(t) : t;
                    i(e, Object.assign({}, n, a));
                } catch (e) {}
            }, o = function(n) {
                try {
                    var a = typeof t === d ? JSON.parse(t) : t;
                    i(e, n.concat(a));
                } catch (e) {}
            }, r = function(e) {
                e.constructor === Array ? o(e) : a(e);
            }, i = function(e, t) {
                y(e, t, {
                    from: "appendMetaInfo"
                });
            }, s = h(e);
            if ("aplus-exinfo" === e && (i(e, Object.assign({}, s, u.param2obj(t))), n = !0), 
            "aplus-page-properties" === e) {
                var c = t;
                if (s) for (var l in s) t[l] ? c[l] = Object.assign({}, s[l], t[l]) : c[l] = s[l];
                i(e, c), n = !0;
            }
            if (s) if (typeof s === g) r(s), n = !0; else try {
                var p = JSON.parse(s);
                typeof p === g && (r(p), n = !0);
            } catch (e) {}
            n || i(e, t);
        }
    };
    t.appendMetaInfo = v;
    var y = function(e, t) {
        var n, a, i = "OVERWRITE", u = i;
        if ("object" == typeof e ? (n = e.metaName, a = e.metaValue, u = e.mode || i) : (n = e, 
        a = t), u !== i) return v(n, a);
        if (r(n, a)) {
            var l = c.getGoldlogVal("_$") || {};
            l.meta_info = o();
            var p = c.setGoldlogVal("_$", l), f = [ "setMetaInfo", n, a, {} ];
            return s.doPubMsg(f), s.doCachePubs(f), p;
        }
    };
    t._setMetaInfo = y;
}, function(e, t, n) {
    "use strict";
    var a = n(2), o = "function", r = function() {
        var e = a.getGlobalValue("aplus"), t = e.aplus_pubsub || {}, n = typeof t.publish === o;
        return n ? t : "";
    };
    t.doPubMsg = function(e) {
        var t = r();
        t && typeof t.publish === o && t.publish.apply(t, e);
    }, t.doCachePubs = function(e) {
        var t = r();
        t && typeof t.cachePubs === o && t.cachePubs.apply(t, e);
    }, t.doSubMsg = function(e, t) {
        var n = r();
        n && typeof n.subscribe === o && n.subscribe(e, t);
    };
}, function(e, t, n) {
    "use strict";
    var a = n(31).nameStorage;
    t.getRefer = function(e) {
        return document.referrer || a.getItem(e.REFERRER) || "";
    };
}, function(e, t, n) {
    "use strict";
    e.exports = function() {
        return {
            run: function() {
                n(45)();
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    function a(e) {
        var t, n = window.aplus || (window.aplus = {}), a = !1, l = function() {
            a || (o.wrap(function() {
                t = c.getAutoClkConfig();
                var e;
                t && t.length > 0 && (e = u.create({
                    autoClkConfig: t
                }), e.init(), s.watch_clk()), n.aplus_pubsub.subscribe("setMetaInfo", function(n, a, o) {
                    if ("aplus-auto-clk" === n) {
                        var r = c.getAutoClkConfig(a);
                        if (JSON.stringify(r) === JSON.stringify(t)) return;
                        t = r, s.clear(), o || (o = {
                            from: "setMetaInfo"
                        }), e && e.clear(o), e && e.clearDom({
                            autoClkConfig: t
                        }, o), a && (e ? e.reset({
                            autoClkConfig: t
                        }, o) : (e = u.create({
                            autoClkConfig: t
                        }), e.init()), s.watch_clk());
                    }
                });
            }, "do_init"), a = !0);
        };
        setTimeout(function() {
            a || i().w("aplus_ac_init failed! please check whether aplusJs is loaded correctly!");
        }, 5e3);
        var p = n._$ || {}, f = window.g_SPM || {};
        "complete" === p.status && f.spm && l();
        var g = window.aplus_queue || (window.aplus_queue = []);
        g.push({
            action: r.SUBSCRIBE,
            arguments: [ "aplusReady", function(e) {
                "complete" === e && l("aplusReady");
            } ]
        }), "function" == typeof e && e();
    }
    var o = n(46), r = n(3), i = n(8), s = n(47), u = n(56), c = n(55);
    e.exports = function() {
        var e = window.aplus || window.goldlog || (window.aplus = {});
        e._aplus_ac || (e._aplus_ac = {
            status: "init",
            elementSelectorSizeMap: {}
        }, a(function() {
            e._aplus_ac.status = "complete";
        }));
    };
}, function(e, t, n) {
    "use strict";
    var a = n(2), o = function(e, t) {
        var n = a.getGlobalValue("aplus_queue", []);
        n.push({
            action: "aplus._aplus_cplugin_track_deb.monitor",
            arguments: [ {
                key: "APLUS_PLUGIN_DEBUG",
                title: "aplus_core",
                msg: [ "_error_:methodName=" + t + ",params=" + JSON.stringify(e) ],
                type: "updateMsg",
                description: t || "aplus_core"
            } ]
        });
    }, r = function(e, t, n) {
        var o = a.getGlobalValue("aplus_queue", []);
        o.push({
            action: [ "aplus", "_aplus_cplugin_m", t ].join("."),
            arguments: [ e, n ]
        });
    };
    t.do_tracker_jserror = function(e, t) {
        var n = "do_tracker_jserror";
        r(e, n, t), o(e, n);
        var i = a.getGlobalValue("aplus");
        i && i.aplusDebug && console && console.warn(e);
    }, t.wrap = function(e) {
        if ("function" == typeof e) try {
            e();
        } catch (e) {
            o({
                msg: e.message || e
            }, "exception");
        } finally {}
    };
}, function(e, t, n) {
    "use strict";
    var a = n(48), o = n(29), r = n(49), i = n(2), s = n(34), u = n(50), c = n(10), l = n(33), p = n(51), f = n(52), g = n(55), d = window, _ = [ "iframe", "html", "body", "head" ], h = g.DATA_APLUS_AC_KEY, m = function(e) {
        var t = [], n = e ? o.tryToGetAttribute(e, h) : "";
        if (n) {
            var a = i.getGoldlogVal("_aplus_ac") || {}, r = a._acHashMap || {};
            u(r, function(e, a) {
                c(a, function(e) {
                    e.hash_value === n && t.push(e.clkConfig);
                });
            });
        }
        return {
            clkConfigs: t,
            el: e
        };
    }, v = function(e) {
        var t = m(e);
        if (t && t.clkConfigs && t.clkConfigs.length > 0) return t;
        for (;(e = e.parentNode) && a.indexof(_, e.tagName ? e.tagName.toLowerCase() : "html") === -1; ) if (t = m(e), 
        t && t.clkConfigs && t.clkConfigs.length > 0) return t;
    }, y = function(e) {
        e = e || d.event;
        var t = e.target || e.srcElement, n = v(t) || {}, a = n.clkConfigs;
        n && a && n.el && c(a, function(a) {
            var o = a;
            t = n.el;
            var r = aplus.spm_ab ? aplus.spm_ab.join(".") : "0.0", i = r + ".0.0", u = "";
            d.g_SPM && "function" == typeof d.g_SPM.spm && (i = d.g_SPM.spm(t));
            var c = [], p = {}, _ = f.fillPropsData(o, t, p);
            _ = f.fillFilterData(o, t, p), _ = f.fillSpmData(o, t, p), _ = s.assign(_, f.getDataTrackerParams(t));
            var h = g.getAutoClkUserFn();
            if (h) {
                var m = f.autoUserFnHandler(h, t, o.elementSelector, o, e);
                if ("object" == typeof m) "object" == typeof m.userdata && (_ = s.assign(_, m.userdata)), 
                m.spm && (i = m.spm), m.scm && (u = m.scm); else if (m === !1) return;
            }
            if ("on" === aplus.getMetaInfo("aplus-track-combine")) c.push("clkdata=" + JSON.stringify([ {
                exargs: _,
                scm: u,
                spm: i,
                aplusContentId: ""
            } ])); else for (var v in _) c.push(v + "=" + _[v]);
            c.push("_is_auto_clk=1");
            var y = o.method || "POST";
            "on" !== aplus.getMetaInfo("aplus-track-combine") && c.push("is_auto=1"), "$$_APLUS" !== o.logkey && (aplus.globalConfig.isUM ? aplus_queue.push({
                action: "aplus.record",
                arguments: [ o.logkey, "CLK", l.param2obj(c.join("&")), y ]
            }) : aplus_queue.push({
                action: "aplus.record",
                arguments: [ o.logkey, "CLK", c.join("&"), y ]
            }));
        });
    };
    t.watch_clk = function() {
        r.isTouch() ? p.on(document, "tap", y) : p.on(document, "mousedown", y);
    }, t.clear = function() {
        r.isTouch() ? p.un(document, "tap", y) : p.un(document, "mousedown", y);
    };
}, function(e, t) {
    "use strict";
    function n(e) {
        return Array.isArray ? Array.isArray(e) : /Array/.test(Object.prototype.toString.call(e));
    }
    function a(e) {
        var t = [];
        if (n(e)) for (var o = 0; o < e.length; o++) {
            var r = e[o];
            n(r) ? (e[o] = a(r), t = t.concat(e[o])) : t.push(r);
        }
        return t;
    }
    function o(e, t) {
        try {
            return e.find(t);
        } catch (o) {
            for (var n = 0; n < e.length; n++) {
                var a = t(e[n]);
                if (a) return e[n];
            }
        }
    }
    t.indexof = function(e, t) {
        var n = -1;
        try {
            n = e.indexOf(t);
        } catch (o) {
            for (var a = 0; a < e.length; a++) e[a] === t && (n = a);
        } finally {
            return n;
        }
    }, t.itemMatch = function(e, t) {
        var n = !1;
        try {
            if (!this.isArray(e)) return n;
            n = e.some(function(e) {
                return e && e.length > 0 && t.indexOf(e) !== -1;
            });
        } catch (o) {
            for (var a = 0; a < e.length; a++) if (t.indexOf(e[a]) !== -1) {
                n = !0;
                break;
            }
        }
        return n;
    }, t.isArray = n, t.flat = a, t.find = o;
}, function(e, t, n) {
    "use strict";
    function a() {
        return i || (i = document.getElementById("beacon-aplus") || document.getElementById("tb-beacon-aplus")), 
        i;
    }
    function o(e) {
        var t = a(), n = s.tryToGetAttribute(t, "cspx");
        e && n && (e.nonce = n);
    }
    var r, i, s = n(29), u = n(3), c = n(10);
    t.getCurrentNode = a, t.addScript = function(e, t, n) {
        var i = "script", s = document.createElement(i);
        s.type = "text/javascript", s.async = !0;
        var c = a(), l = c && c.hasAttribute("crossorigin");
        l && (s.crossOrigin = "anonymous");
        var p = u.HTTPS === location.protocol ? t || e : e;
        0 === p.indexOf("//") && (p = u.HTTPS + p), s.src = p, n && (s.id = n), o(s);
        var f = document.getElementsByTagName(i)[0];
        r = r || document.getElementsByTagName("head")[0], f ? f.parentNode.insertBefore(s, f) : r && r.appendChild(s);
    }, t.loadScript = function(e, t) {
        function n(e) {
            a.onreadystatechange = a.onload = a.onerror = null, a = null, t(e);
        }
        var a = document.createElement("script");
        if (r = r || document.getElementsByTagName("head")[0], a.async = !0, "onload" in a) a.onload = n; else {
            var i = function() {
                /loaded|complete/.test(a.readyState) && n();
            };
            a.onreadystatechange = i, i();
        }
        if (a.onerror = function(e) {
            n(e);
        }, a.src = e, o(a), aplus.globalConfig.isUM) {
            a.id = "aplus-setting", a.type = "text/javascript", a.charset = "utf-8";
            var s = document.getElementsByTagName("script");
            s && s.length > 0 && c(s, function(e) {
                e && "aplus-setting" === e.id && r.removeChild(e);
            });
        }
        r.appendChild(a);
    }, t.isTouch = function() {
        return "ontouchend" in document.createElement("div");
    };
}, function(e, t) {
    "use strict";
    e.exports = function(e, t) {
        if (Object && Object.keys) for (var n = Object.keys(e), a = n.length, o = 0; o < a; o++) {
            var r = n[o];
            t(r, e[r]);
        } else for (var i in e) t(i, e[i]);
    };
}, function(e, t, n) {
    "use strict";
    function a() {
        var e = aplus._$ || {}, t = e.meta_info || {}, n = t.aplus_ctap || {};
        return n && "function" == typeof n.on ? n : null;
    }
    function o(e, t) {
        var n = a();
        n ? n.on(e, t) : s.on(e, t);
    }
    function r(e, t) {
        var n = a();
        n ? n.un(e, t) : s.un(e, t);
    }
    var i = !!document.attachEvent, s = n(15);
    t.on = function(e, t, n) {
        return "tap" === t ? void o(e, n) : void (i ? e.attachEvent(t, n) : e.addEventListener(t, n));
    }, t.un = function(e, t, n) {
        return "tap" === t ? void r(e, n) : void (i ? e.detachEvent(t, n) : e.removeEventListener(t, n));
    };
}, function(e, t, n) {
    "use strict";
    function a(e, t, n) {
        var a = t.hash_value, o = i.getGoldlogVal(n) || {};
        if (o.hash_value || (o.hash_value = {}), o.hash_value[e] || (o.hash_value[e] = r.Map ? new r.Map() : {}), 
        r.Map) {
            var s = o.hash_value[e].get(a);
            s ? ++s : s = 1, o.hash_value[e].set(a, s);
        } else o.hash_value[e][a] ? ++o.hash_value[e][a] : o.hash_value[e][a] = 1;
        i.setGoldlogVal(n, o);
    }
    var o = document, r = window, i = n(2), s = n(8), u = n(53), c = n(10), l = n(50), p = n(54), f = n(55), g = function(e) {
        return "[object Array]" === Object.prototype.toString.call(e);
    };
    t.isArray = g, t.getXPath = function(e) {
        var t, n, a, r, i, s, u = o.getElementsByTagName("*");
        for (t = []; e && 1 == e.nodeType; e = e.parentNode) if (e.id) {
            for (s = e.id, r = 0, n = 0; n < u.length; n++) if (i = u[n], i.id && i.id == s) {
                r++;
                break;
            }
            if (t.unshift(e.tagName.toLowerCase() + '[@id="' + s + '"]'), 1 == r) return t.unshift("/"), 
            t.join("/");
        } else {
            for (n = 1, a = e.previousSibling; a; a = a.previousSibling) a.tagName == e.tagName && n++;
            t.unshift(e.tagName.toLowerCase() + "[" + n + "]");
        }
        return t.length ? "/" + t.join("/") : null;
    };
    var d = function(e, t) {
        if (t && 0 !== t.length || (t = []), e && e.length > 0) for (var n = 0; n < e.length; n++) t.push(e[n]);
        return t;
    };
    t.nodelistToArray = d, t.getElements = function(e, t) {
        var n = t || o, a = [];
        if (n.querySelectorAll) a = d(n.querySelectorAll(e.elementSelector) || []); else for (var r = document.getElementsByTagName(e.tag), i = e.filter.split("="), s = i.length > 0 ? i[0].trim() : "", u = i.length > 1 ? i[1].trim() : "", c = 0; c < r.length; c++) {
            var l = r[c], p = l.getAttribute(s), f = l.hasAttribute(s);
            !f || u && u !== p || a.push(l);
        }
        return a;
    };
    var _ = function() {
        return /aplusDebug=true/.test(location.search);
    }, h = _();
    t.IS_DEBUG = h, t.fillPropsData = function(e, t, n) {
        n || (n = {});
        try {
            var a = e.props || [];
            if (a && g(a) && a.length > 0) for (var o = 0; o < a.length; o++) if (t && t.getAttribute) {
                var r = a[o], i = t.getAttribute(r);
                if (void 0 !== typeof i && null !== i && "" !== i) {
                    var u = r.toLowerCase().replace(/^data-/, "");
                    aplus.globalConfig && aplus.globalConfig.isUM ? n[u] = i : n[u] = encodeURIComponent(i);
                }
            }
        } catch (e) {
            s().w(e && e.message);
        }
        return n;
    };
    var m = function(e, t, n) {
        n || (n = {});
        try {
            var a = e.filter || "", o = a.split("=");
            if (g(o) && o[1]) n[o[0]] = o[1]; else if (o[0] && t && t.getAttribute) {
                var r = t.getAttribute(o[0]) || "";
                void 0 !== typeof r && null !== r && "" !== r && (n[o[0]] = r);
            }
        } catch (e) {
            s().w(e && e.message);
        }
        return n;
    };
    t.fillFilterData = m;
    var v = "data-tracker-params";
    t.getDataTrackerParams = function(e) {
        var t = {};
        try {
            var n = m({
                filter: v
            }, e);
            n && n[v] && (t = JSON.parse(n[v]));
        } catch (e) {}
        return t;
    }, t.fillSpmData = function(e, t, n) {
        n || (n = {});
        var a, o, r;
        return a = e && e.spmB ? e.spmB : document.body.dataset && document.body.dataset.pagename, 
        o = e && e.spmC ? e.spmC : t.parentNode && t.parentNode.dataset && t.parentNode.dataset.spmc, 
        r = e && e.spmD ? e.spmD : t.dataset && t.dataset.spmd, t.dataset && t.dataset.aplusVtPos && (r += "_" + t.dataset.aplusVtPos), 
        a && (n.spmB = a), o && (n.spmC = o), r && (n.spmD = r), n;
    };
    var y = function(e) {
        return !!/^POST|GET$/i.test(e);
    };
    t.isMethod = y;
    var b = function(e) {
        var t = !!/^\d+$/.test(e);
        return !!(t && parseInt(e) > 0);
    };
    t.isPkgSize = b, t.filterExpConfigRequestCfg = function(e) {
        var t = f.getDefaultRequestCfg() || {};
        try {
            var n = e || {};
            y(n.method) && (t.method = n.method), b(n.pkgSize) && (t.pkgSize = parseInt(n.pkgSize));
        } catch (e) {
            s().w(e && e.message);
        }
        return t;
    };
    var w = function(e) {
        var t = e.split("&"), n = {};
        return t.length > 0 && c(t, function(e) {
            var t = e.split("=");
            2 === t.length && (n[t[0]] = p.tryToEncodeURIComponent(t[1]));
        }), n;
    };
    t.autoUserFnHandler = function(e, t, n, a, o) {
        var r = {
            userdata: {},
            spm: "",
            scm: ""
        };
        try {
            var i = e(t, n, a, o);
            i && ("string" == typeof i ? r.userdata = w(i) : "object" == typeof i && "object" == typeof i.userdata && (l(i.userdata, function(e, t) {
                aplus.globalConfig && aplus.globalConfig.isUM ? r.userdata[e] = t : r.userdata[e] = p.tryToEncodeURIComponent(t);
            }), r.spm = i.spm, r.scm = i.scm));
        } catch (e) {
            s().w(e);
        }
        return r;
    };
    var A = function(e, t) {
        var n = "";
        if (e && t) {
            var a = [ e.getAttribute(t.filter) ], o = t.props || [];
            if (o) for (var r = 0; r < o.length; r++) a.push(e.getAttribute(o[r]));
            n = a.join("_");
        }
        return n;
    }, E = function(e) {
        var t = e.getAttribute("data-spm-anchor-id");
        if (t) {
            var n = t.split(".");
            return {
                a: n[0],
                b: n[1],
                c: n[2],
                d: n[3],
                e: n[4]
            };
        }
    };
    t.getSpmObj = E, t.getElementHash = function(e, t) {
        var n = {};
        "aplus_webvt" !== e.source && (n = E(t.ele) || (window.g_SPM ? window.g_SPM.getParam(t.ele) : {}));
        var a = "", o = "x" + t.index;
        if (n.a && n.b && n.c && n.d) {
            var r = /^i/.test(n.d) ? o : n.d;
            a = n.a + "_" + n.b + "_" + n.c + "_" + r, n.e && (a += "_" + n.e);
        } else a = o, aplus.pvid && (a += aplus.pvid);
        t.ignore_attr || (a += e.logkey + "_", a += e.elementSelector + "_", a += A(t.ele, e));
        var i = o + "_" + u.hash(a);
        return i;
    }, t.filterUnloadAttr = function(e) {
        return e && (e = e.replace(/(href|style|data-spm-anchor-id)=[\'|\"][\w|\W|\.]+[\'|\"]/, ""), 
        e = e.replace(/\s\>/g, ">"), e = e.replace(new RegExp(f.DATA_APLUS_AE_KEY + "=[\\'|\\\"]\\w+[\\'|\\\"]"), ""), 
        e = e.replace(new RegExp(f.DATA_APLUS_AC_KEY + "=[\\'|\\\"]\\w+[\\'|\\\"]"), "")), 
        e;
    };
    var S = function(e, t) {
        for (var n, a = 0, o = e.length; a < o; ) {
            var r = e[a] || {};
            if (r.hash_value === t.hash_value) return e[a] = t, n = !0, e;
            a++;
        }
        return n || e.push(t), e;
    }, T = function(e, t, n, o) {
        if (n || (n = "ADD"), e && "object" == typeof t) {
            var r = i.getGoldlogVal(o) || {}, s = r._acHashMap || {}, u = s[e] || [], c = function() {
                for (var e = 0, n = u.length; e < n; ) {
                    var a = u[e] || {};
                    if (a.hash_value === t.hash_value) return e;
                    e++;
                }
                return -1;
            }, l = c();
            "ADD" === n && l === -1 ? (u.push(t), a(e, t, o)) : "CLEAR" === n && l > -1 ? u.splice(l, 1) : "UPDATE" === n && (u = S(u, t)), 
            s[e] = u, r._acHashMap = s, i.setGoldlogVal(o, r);
        }
    };
    t.updateExpHashMap = function(e, t, n) {
        T(e, t, n, "_aplus_auto_exp");
    }, t.updateClkHashMap = function(e, t, n) {
        T(e, t, n, "_aplus_ac");
    };
    var P = function() {
        return new Date().getTime();
    };
    t.throttle = function(e, t, n) {
        var a, o, r, i, s = 0;
        n || (n = {});
        var u = function() {
            s = n.leading === !1 ? 0 : P(), a = null, i = e.apply(o, r), a || (o = r = null);
        }, c = function() {
            var c = P();
            s || n.leading !== !1 || (s = c);
            var l = t - (c - s);
            return o = this, r = arguments, l <= 0 || l > t ? (a && (clearTimeout(a), a = null), 
            s = c, i = e.apply(o, r), a || (o = r = null)) : a || n.trailing === !1 || (a = setTimeout(u, l)), 
            i;
        };
        return c.cancel = function() {
            clearTimeout(a), s = 0, a = o = r = null;
        }, c;
    }, t.checkIsInHashMap = function(e) {
        var t = i.getGoldlogVal(e.aplusKey) || {}, n = t.hash_value || {}, a = n[e.logkey] || (r.Map ? new r.Map() : {}), o = a && a.get ? a.get(e.hash_value) : a[e.hash_value];
        if (o > 1) return !0;
        for (var s = t._acHashMap || {}, u = s[e.logkey] || [], c = u.length, l = 0; l < c; l++) if (u[l].hash_value === e.hash_value) return !0;
        return !1;
    }, t.setRecordSuccess = function(e, t) {
        try {
            var n = e ? e.element : {}, a = e.hash_value || "";
            n && n.setAttribute && n.setAttribute(t, a);
        } catch (e) {}
    };
}, function(e, t) {
    "use strict";
    t.hash = function(e, t) {
        var n, a, o = 1315423911, r = t || o;
        for (n = e.length - 1; n >= 0; n--) a = e.charCodeAt(n), r ^= (r << 5) + a + (r >> 2);
        var i = (2147483647 & r).toString(16);
        return i;
    };
}, function(e, t) {
    "use strict";
    t.tryToEncodeURIComponent = function(e) {
        var t = e || "";
        if (e) try {
            t = encodeURIComponent(decodeURIComponent(e));
        } catch (e) {}
        return t;
    };
}, function(e, t, n) {
    "use strict";
    function a(e) {
        return aplus && aplus.getMetaInfo ? aplus.getMetaInfo(e) : r.getMetaCnt(e);
    }
    var o = n(48), r = n(28), i = n(8);
    t.DATA_APLUS_AE_KEY = "data-aplus-ae", t.DATA_APLUS_AC_KEY = "data-aplus-clk", t.DATA_APLUS_SPM_ANCHOR_ID_KEY = "data-spm-anchor-id", 
    t.DATA_APLUS_VT_ITEM_INDEX_KEY = "data-aplus-vt-pos", t.LOOP_TIME = 1e3, t.getDefaultRequestCfg = function() {
        return {
            method: "POST",
            pkgSize: 10
        };
    };
    var s = function(e) {
        var t = e;
        try {
            var n = a("aplus-auto-exp-visible");
            n && (t = parseFloat(n)), t <= 0 && (t = e);
        } catch (n) {
            t = e;
        } finally {
            return t;
        }
    };
    t.AUTO_AT_VIEW_RATE = s(.3);
    var u = function(e) {
        var t = e;
        try {
            var n = a("aplus-auto-exp-duration"), o = parseInt(n);
            o + "" != "NaN" && (t = o);
        } catch (e) {} finally {
            return t;
        }
    };
    t.EXP_DURATION = u(300);
    var c = function(e, t) {
        var n, r = [], s = [];
        try {
            n = t || a(e);
            var u = [];
            if (n && "string" == typeof n) try {
                u = JSON.parse(n);
            } catch (e) {
                u = JSON.parse(n.replace(/'/g, '"'));
            } else "object" == typeof n && n.constructor === Array && (u = n);
            if (u && u.constructor === Array) for (var c = 0; c < u.length; c++) {
                var l = u[c] || {}, p = l.logkey || "", f = l.tag ? l.tag : "", g = l.filter, d = l.cssSelector, _ = d || f && g;
                if (!p || !_) throw new Error("meta " + e + " config error, " + JSON.stringify(l));
                g = "string" == typeof g ? g.split("=") : [];
                var h = f;
                if (g.length >= 2 ? h += "[" + g.shift() + '="' + decodeURIComponent(g.join("")) + '"]' : 1 == g.length && g[0] && (h += "[" + decodeURIComponent(g[0]) + "]"), 
                d && (h += d), l.elementSelector = h, o.indexof(s, h) > -1) throw new Error("meta " + e + " config error, tag_filter_cssSelector " + h + " repeated");
                s.push(h), r.push(l);
            }
        } catch (e) {
            i().w(e);
        } finally {
            return r;
        }
    };
    t.getAutoExpConfig = function(e) {
        return c("aplus-auto-exp", e) || [];
    }, t.getAutoExpUserFn = function() {
        var e = a("aplus-auto-exp-userfn");
        if (e) {
            var t = window[e] || e;
            if ("function" == typeof t) return t;
        }
        return null;
    }, t.isThrottleWatchDom = function() {
        var e = !1;
        try {
            e = "throttle" === a("aplus-auto-exp-watchdom");
        } catch (e) {}
        return e;
    }, t.getAutoClkConfig = function(e) {
        return c("aplus-auto-clk", e) || [];
    }, t.getAutoClkUserFn = function() {
        var e = a("aplus-auto-clk-userfn");
        if (e) {
            var t = window[e] || e;
            if ("function" == typeof t) return t;
        }
        return null;
    };
}, function(e, t, n) {
    "use strict";
    var a = n(21), o = n(46), r = n(8), i = n(51), s = n(52), u = n(55), c = window, l = document, p = a.extend({
        eachElements: function(e, t) {
            for (var n = t.logkey || "", a = 0; a < e.length; a++) {
                var o = e[a];
                t._pos_id && !o.getAttribute("data-aplus-pos-id") && o.setAttribute("data-aplus-pos-id", t._pos_id);
                var r = o.getAttribute(u.DATA_APLUS_AC_KEY);
                if (!(r && r.indexOf("_") > 0)) {
                    isNaN(parseInt(r)) && (r = aplus._aplus_ac.elementSelectorSizeMap[t.elementSelector]++, 
                    o.setAttribute(u.DATA_APLUS_AC_KEY, r)), !aplus.globalConfig.isAli && t.spmB && t.spmC && t.spmD && (o.setAttribute(u.DATA_APLUS_SPM_ANCHOR_ID_KEY, [ t.spmB, t.spmC, t.spmD + "_" + (a + 1) ].join(".")), 
                    o.setAttribute(u.DATA_APLUS_VT_ITEM_INDEX_KEY, "" + (a + 1)));
                    var i = s.getElementHash(t, {
                        ignore_attr: !1,
                        index: r,
                        ele: o
                    });
                    if (!s.checkIsInHashMap({
                        logkey: n,
                        hash_value: i,
                        aplusKey: "_aplus_ac"
                    })) {
                        var c = {
                            clkConfig: t,
                            hash_value: i,
                            element: o,
                            status: 0,
                            elementSelector: t.elementSelector
                        };
                        s.updateClkHashMap(n, c, "ADD"), s.setRecordSuccess(c, u.DATA_APLUS_AC_KEY);
                    }
                }
            }
        },
        handler_dom_change: function() {
            for (var e = this, t = e.autoClkConfig || [], n = 0; n < t.length; n++) {
                var a = t[n];
                aplus._aplus_ac.elementSelectorSizeMap[a.elementSelector] || (aplus._aplus_ac.elementSelectorSizeMap[a.elementSelector] = 1);
                var o = s.getElements(a, l);
                e.eachElements(o, a);
            }
        },
        throttle_handler_dom_change: s.throttle(function() {
            this.handler_dom_change();
        }, 200),
        init_observer: function(e, t) {
            var n = new e(function() {
                o.wrap(function() {
                    var e = aplus._aplus_ac || {};
                    ++e.observer_times, t();
                }, "init_observer_init_elements");
            }), a = {
                attributes: !0,
                childList: !0,
                characterData: !0,
                subtree: !0
            };
            n.observe(l.body, a), s.IS_DEBUG && r().w("aplus_ac init MutationObserver success!"), 
            this._observer = n;
        },
        init_watch_dom: function() {
            var e = this, t = aplus._aplus_ac || {};
            e._loop_observer = setTimeout(function() {
                "blur" !== t.current_win_status ? (s.IS_DEBUG && r().w("watch_dom in ac LOOP_TIME is " + u.LOOP_TIME + "ms total: " + ++t.watch_times), 
                e.throttle_handler_dom_change(), e.init_watch_dom()) : t.watch_dom_running = !1;
            }, u.LOOP_TIME);
        },
        onFocusHandler: function() {
            var e = this, t = aplus._aplus_ac || {};
            t.current_win_status = "focus", t.watch_dom_running || e.init_watch_dom();
        },
        onBlurHandler: function() {
            var e = aplus._aplus_ac || {};
            e.current_win_status = "blur";
        },
        onVisibilityChange: function() {
            var e = this;
            "visible" === l.visibilityState ? e.onFocusHandler() : "hidden" === l.visibilityState && e.onBlurHandler();
        },
        addAllListener: function() {
            var e = this, t = aplus._aplus_ac || {};
            t.watch_times = 0, t.watch_dom_running = !0, e.init_watch_dom(), c.WindVane && l.addEventListener && (i.on(l, "WV.Event.APP.Active", e.onFocusHandler, !1), 
            i.on(l, "WV.Event.APP.Background", e.onBlurHandler, !1)), "hidden" in l ? i.on(c, "visibilitychange", e.onVisibilityChange) : (i.on(c, "blur", e.onBlurHandler), 
            i.on(c, "focus", e.onFocusHandler));
        },
        removeAllListener: function() {
            var e = this;
            c.WindVane && l.removeEventListener && (i.un(l, "WV.Event.APP.Active", e.onFocusHandler, !1), 
            i.un(l, "WV.Event.APP.Background", e.onBlurHandler, !1)), "hidden" in l ? i.un(c, "visibilitychange", e.onVisibilityChange) : (i.un(c, "blur", e.onBlurHandler), 
            i.un(c, "focus", e.onFocusHandler));
        },
        init: function() {
            var e = this, t = aplus._aplus_ac || {};
            e.throttle_handler_dom_change();
            var n = c.MutationObserver || c.WebKitMutationObserver || c.MozMutationObserver;
            n ? (t.observer_times = 0, e.init_observer(n, function() {
                e.throttle_handler_dom_change();
            })) : e.addAllListener();
        },
        clearDom: function(e, t) {
            var n = this.autoClkConfig || [];
            if (t && "appendMetaInfo" !== t.from) for (var a = 0; a < n.length; a++) try {
                for (var o = n[a].elementSelector, r = l.querySelectorAll(o), i = 0; i < r.length; i++) r[i].setAttribute(u.DATA_APLUS_AC_KEY, "");
            } catch (e) {}
            this.autoClkConfig = e && e.autoClkConfig;
        },
        clear: function(e) {
            if (!e || "appendMetaInfo" !== e.from) {
                var t = aplus._aplus_ac || {};
                t._acHashMap && (t._acHashMap = {}), t.hash_value && (t.hash_value = {}), aplus._aplus_ac = t, 
                this._loop_observer && (clearTimeout(this._loop_observer), this._loop_observer = null), 
                this._observer ? this._observer.disconnect() : this.removeAllListener();
            }
        },
        reset: function(e, t) {
            this.clearDom(e, t), this.init();
        }
    });
    e.exports = p;
}, function(e, t, n) {
    "use strict";
    e.exports = function() {
        return {
            run: function() {
                n(58)();
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    function a() {
        r = n(59), i = n(window.IntersectionObserver ? 61 : 63), s = n(64), u = n(55);
    }
    function o(e) {
        var t, n = window.aplus || (window.aplus = {}), a = !1, o = !1, f = function(e) {
            o || (o = e, a || (c.wrap(function() {
                t = u.getAutoExpConfig() || [], p().w("aplus-auto-exp metaValue init: " + JSON.stringify(t));
                var e;
                t && t.length > 0 && (s.watch_data_change(), i.watch_exposure_change(t), e = r.create({
                    isThrottleWatch: u.isThrottleWatchDom(),
                    autoExpConfig: t
                }), e.init({
                    type: "init"
                })), n.aplus_pubsub.subscribe("setMetaInfo", function(n, a, o) {
                    if ("aplus-auto-exp" === n) {
                        p().w("aplus-auto-exp metaVaue change: " + JSON.stringify(a));
                        var c = u.getAutoExpConfig(a);
                        if (JSON.stringify(c) === JSON.stringify(t)) return;
                        if (t = c, s.clear(), o || (o = {
                            from: "setMetaInfo"
                        }), i.clear(t, o), e && e.clear(o), a && t && t.length > 0) {
                            s.watch_data_change(), i.watch_exposure_change(t);
                            var l = {
                                isThrottleWatch: u.isThrottleWatchDom(),
                                autoExpConfig: t
                            };
                            e ? e.reset(l, o) : (e = r.create(l), e.init({
                                type: "init"
                            }));
                        }
                    }
                });
            }, "do_init"), a = !0));
        };
        setTimeout(function() {
            a || p().w("aplus_auto_exp_init failed! please check whether aplusJs is loaded correctly!");
        }, 5e3);
        var g = n._$ || {}, d = window.g_SPM || {};
        "complete" === g.status && d.spm && f();
        var _ = window.aplus_queue || (window.aplus_queue = []);
        _.push({
            action: l.SUBSCRIBE,
            arguments: [ "aplusReady", function(e) {
                "complete" === e && f("aplusReady");
            } ]
        }), "function" == typeof e && e();
    }
    var r, i, s, u, c = n(46), l = n(3), p = n(8);
    e.exports = function() {
        var e = window.aplus || window.goldlog || (window.aplus = {});
        e._aplus_auto_exp || (e._aplus_auto_exp = {
            tags: {},
            status: "init",
            exp_times: 0,
            elementSelectorSizeMap: {}
        }, a(), o(function() {
            e._aplus_auto_exp.status = "complete";
        }));
    };
}, function(e, t, n) {
    "use strict";
    var a = n(21), o = n(46), r = n(8), i = n(51), s = n(60), u = n(52), c = n(55), l = window, p = document, f = a.extend({
        eachElements: function(e, t) {
            for (var n = t.logkey || "", a = 0; a < e.length; a++) {
                var o = e[a], r = o.getAttribute(c.DATA_APLUS_AE_KEY);
                if (!(r && r.indexOf("_") > 0)) {
                    isNaN(parseInt(r)) && (r = aplus._aplus_auto_exp.elementSelectorSizeMap[t.elementSelector]++, 
                    o.setAttribute(c.DATA_APLUS_AE_KEY, r)), !aplus.globalConfig.isAli && t.spmB && t.spmC && t.spmD && (o.setAttribute(c.DATA_APLUS_SPM_ANCHOR_ID_KEY, [ t.spmB, t.spmC, t.spmD + "_" + (a + 1) ].join(".")), 
                    o.setAttribute(c.DATA_APLUS_VT_ITEM_INDEX_KEY, "" + (a + 1)));
                    var i = u.getElementHash(t, {
                        ignore_attr: !1,
                        index: r,
                        ele: o
                    }), l = s.checkIsRecord(o, i, c.DATA_APLUS_AE_KEY), p = u.checkIsInHashMap({
                        logkey: n,
                        hash_value: i,
                        aplusKey: "_aplus_auto_exp"
                    });
                    if (!l && !p) {
                        var f = {
                            expConfig: t,
                            hash_value: i,
                            element: o,
                            status: 0,
                            elementSelector: t.elementSelector
                        };
                        u.updateExpHashMap(n, f, "ADD");
                    }
                }
            }
        },
        handler_dom_change: function(e, t) {
            try {
                for (var n = this.autoExpConfig || [], a = 0; a < n.length; a++) {
                    var o = n[a], i = u.getElements(o, p);
                    aplus._aplus_auto_exp.elementSelectorSizeMap[o.elementSelector] || (aplus._aplus_auto_exp.elementSelectorSizeMap[o.elementSelector] = 1), 
                    this.eachElements(i, o);
                }
                aplus.aplus_pubsub.publish("APLUS_AE_DOM_CHANGE", t || {});
            } catch (e) {
                r().w(e && e.message);
            }
        },
        throttle_handler_dom_change: u.throttle(function(e, t) {
            this.handler_dom_change(e, t);
        }, 200),
        init_watch_dom: function() {
            var e = this, t = aplus._aplus_auto_exp || {};
            e._loop_observer = setTimeout(function() {
                "blur" !== t.current_win_status ? (r().w("watch_dom in ae LOOP_TIME is " + c.LOOP_TIME + "ms total: " + ++t.watch_times), 
                e.handler_dom_change(null, {
                    type: "polling"
                }), e.init_watch_dom()) : t.watch_dom_running = !1;
            }, c.LOOP_TIME);
        },
        onFocusHandler: function() {
            var e = this, t = aplus._aplus_auto_exp || {};
            t.current_win_status = "focus", t.watch_dom_running || e.init_watch_dom();
        },
        onBlurHandler: function() {
            var e = aplus._aplus_auto_exp || {};
            e.current_win_status = "blur";
        },
        onVisibilityChange: function() {
            var e = this;
            "visible" === p.visibilityState ? e.onFocusHandler() : "hidden" === p.visibilityState && e.onBlurHandler();
        },
        addAllListener: function() {
            var e = this, t = aplus._aplus_auto_exp || {};
            t.watch_times = 0, t.watch_dom_running = !0, e.init_watch_dom(), l.WindVane && p.addEventListener && (i.on(p, "WV.Event.APP.Active", e.onFocusHandler, !1), 
            i.on(p, "WV.Event.APP.Background", e.onBlurHandler, !1)), "hidden" in p ? i.on(l, "visibilitychange", e.onVisibilityChange) : (i.on(l, "blur", e.onBlurHandler), 
            i.on(l, "focus", e.onFocusHandler));
        },
        removeAllListener: function() {
            var e = this;
            l.WindVane && p.removeEventListener && (i.un(p, "WV.Event.APP.Active", e.onFocusHandler, !1), 
            i.un(p, "WV.Event.APP.Background", e.onBlurHandler, !1)), "hidden" in p ? i.un(l, "visibilitychange", e.onVisibilityChange) : (i.un(l, "blur", e.onBlurHandler), 
            i.un(l, "focus", e.onFocusHandler));
        },
        init_observer: function(e, t) {
            var n = [ "IFRAME", "BODY", "OBJECT", "SCRIPT", "NOSCRIPT", "LINK", "STYLE", "#comment" ], a = [ "class", "style" ], i = function(e) {
                return "characterData" === e.type ? [ e.target ] : "attributes" === e.type && a.indexOf(e.attributeName) > -1 ? [ e.target ] : "childList" !== e.type ? [] : void 0;
            }, s = function(e, a) {
                if (e && e.length > 0) for (var r = 0; r < e.length; r++) {
                    var i = e[r] || {}, s = i.nodeName, u = aplus._aplus_auto_exp.tags || {};
                    u[s] || (u[s] = 0), u[s]++, aplus._aplus_auto_exp.tags = u, n.indexOf(s) === -1 && o.wrap(function() {
                        var e = aplus._aplus_auto_exp || {};
                        ++e.observer_times;
                        var n = a.attributeName;
                        t(i, {
                            type: a.type + (n ? "_" + n : "")
                        });
                    }, "init_observer_init_elements");
                }
            };
            this._observer || (this._observer = new e(function(e) {
                if (e && e.length > 0) for (var t = 0; t < e.length; t++) {
                    var n = e[t] || {}, a = u.nodelistToArray(n.addedNodes || []);
                    a = u.nodelistToArray(i(n), a), s(a, n);
                }
            }));
            var c = {
                attributes: !0,
                childList: !0,
                characterData: !0,
                subtree: !0
            };
            this._observer.observe(p.body, c), u.IS_DEBUG && r().w("aplus_auto_exp init MutationObserver success!");
        },
        init: function(e) {
            var t = this, n = aplus._aplus_auto_exp || {};
            e && "reset" !== e.type && !n.hash_value && (n.hash_value = {}), t.handler_dom_change(null, {
                type: "aplus_init"
            });
            var a = l.MutationObserver || l.WebKitMutationObserver || l.MozMutationObserver;
            a ? (n.observer_times = 0, t.init_observer(a, function(e, n) {
                var a = e && e.parentElement ? e.parentElement : e;
                t.throttle_handler_dom_change(a, n);
            })) : t.addAllListener();
        },
        clear: function(e) {
            if (!e || "appendMetaInfo" !== e.from) {
                var t = aplus._aplus_auto_exp || {};
                t._acHashMap && (t._acHashMap = {}), t.hash_value && (t.hash_value = {}), aplus._aplus_auto_exp = t, 
                this._loop_observer && (clearTimeout(this._loop_observer), this._loop_observer = null), 
                this._observer ? (this._observer.takeRecords(), this._observer.disconnect()) : this.removeAllListener();
            }
        },
        clearDom: function(e, t) {
            var n = this.autoExpConfig || [];
            if (t && "appendMetaInfo" !== t.from) for (var a = 0; a < n.length; a++) try {
                for (var o = n[a].elementSelector, r = p.querySelectorAll(o), i = 0; i < r.length; i++) r[i].setAttribute(c.DATA_APLUS_AE_KEY, "");
            } catch (e) {}
            this.autoExpConfig = e && e.autoExpConfig ? e.autoExpConfig : [];
        },
        reset: function(e, t) {
            this.clearDom(e, t), this.init({
                type: "reset"
            });
        }
    });
    e.exports = f;
}, function(e, t) {
    "use strict";
    var n = document, a = function(e, t) {
        return t.x >= e.pLeftTop[0] && t.x <= e.pRightBottom[0] && t.y >= e.pLeftTop[1] && t.y <= e.pRightBottom[1];
    }, o = function(e, t) {
        var n = 0, o = a(e, t), r = a(e, {
            x: t.x + t.width,
            y: t.y
        }), i = a(e, {
            x: t.x,
            y: t.y + t.height
        }), s = a(e, {
            x: t.x + t.width,
            y: t.y + t.height
        }), u = function() {
            var e = 0;
            return o && s && (e = t.size / t.size), e;
        }, c = function() {
            var n = 0, a = 0;
            return o && r && !i && !s ? (n = t.width, a = e.pLeftBottom[1] - t.y) : !o && r && !i && s ? (n = e.pLeftTop[0] - t.x, 
            a = t.y) : !o && !r && i && s ? (n = t.width, a = t.height - Math.abs(e.pLeftTop[1] - t.y)) : o && !r && i && !s && (n = e.pRightTop[0] - t.x, 
            a = t.height), t.size > 0 ? Math.abs(n * a) / t.size : 0;
        }, l = function() {
            var n = 0, a = 0;
            return !o || r || i || s ? o || !r || i || s ? o || r || !i || s ? o || r || i || !s || (n = e.pLeftTop[0] - t.x, 
            a = e.pLeftTop[1] - t.y) : (n = e.pRightTop[0] - t.x, a = e.pRightTop[1] - t.y) : (n = e.pLeftBottom[0] - t.x, 
            a = e.pLeftBottom[1] - t.y) : (n = e.pRightBottom[0] - t.x, a = e.pRightBottom[1] - t.y), 
            t.size > 0 ? Math.abs(n * a) / t.size : 0;
        };
        return n = u(), n > 0 ? n : (n = c(), n > 0 ? n : (n = l(), n > 0 ? n : n));
    };
    t.wrapViewabilityRate = function(e, t, n) {
        var a = 0;
        if (e) for (var r = 0; r < e.length; r++) if (a = o(e[r], t), a < n) return !1;
        return a;
    };
    var r = function(e) {
        return "number" == typeof e && NaN !== e;
    }, i = function(e) {
        var t = {};
        return e && ("function" == typeof e.getBoundingClientRect && (t = e.getBoundingClientRect() || {}), 
        r(t.x) || r(t.left) && (t.x = t.left), r(t.y) || r(t.top) && (t.y = t.top), r(t.width) || (t.width = e.offsetWidth), 
        r(t.height) || (t.height = e.offsetHeight)), t;
    };
    t.getElementPosition = i, t.getWinPositions = function(e) {
        var t = [];
        if (e && "function" == typeof document.querySelector) {
            var a = document.querySelector(e);
            if (a) {
                var o = i(a) || {};
                r(o.x) && r(o.y) && r(o.width) && r(o.height) && t.push({
                    pLeftTop: [ o.x, o.y ],
                    pRightTop: [ o.x + o.width, o.y ],
                    pLeftBottom: [ o.x, o.y + o.height ],
                    pRightBottom: [ o.x + o.width, o.y + o.height ]
                });
            }
        }
        var s = n.documentElement, u = n.body, c = s.clientWidth || u.offsetWidth || 0, l = s.clientHeight || u.offsetHeight || 0;
        return t.push({
            pLeftTop: [ 0, 0 ],
            pRightTop: [ c, 0 ],
            pLeftBottom: [ 0, l ],
            pRightBottom: [ c, l ]
        }), t;
    }, t.checkIsRecord = function(e, t, n) {
        var a;
        try {
            if (e && e.getAttribute) {
                var o = e.getAttribute(n) || "";
                a = t ? o === t : !!o;
            }
        } catch (e) {}
        return a;
    }, t.getViewabilityRateInWindow = function(e, t, n) {
        var a = 0;
        if (e) for (var o = 0; o < e.length; o++) if (a = t / e[o].size, a >= n) return a;
        return a;
    };
}, function(e, t, n) {
    "use strict";
    function a(e, t, n) {
        var a = p.getWinPositions(), o = 0, r = u.getGoldlogVal("_aplus_auto_exp") || {}, i = r._acHashMap || {};
        for (var c in i) for (var l = i[c] || [], h = 0; h < l.length; h++) {
            var m = l[h] || {};
            m.eventType = "IObserver";
            var v = !!n || m.element === t.target;
            if (0 === m.status && m.expConfig && v) {
                var y = t.boundingClientRect || {};
                if (y.width || y.height || (y = t.target.getBoundingClientRect() || {}), y.width && y.height) {
                    m = s.assign(m, y), m.x = y.x || y.left, m.y = y.y || y.top, m.width = y.width, 
                    m.height = y.height, m.size = y.width * y.height;
                    var b = p.checkIsRecord(m.element, m.hash_value, "_aplus_auto_exp"), w = m.width * m.height * t.intersectionRatio, A = p.getViewabilityRateInWindow(a, w, _);
                    if (!b) {
                        var E = t.intersectionRatio >= d;
                        if (E || A >= _) {
                            m.exposureTime = e, m.status = 1;
                            var S = f.getAutoExpUserFn();
                            S && (m.userParams = g.autoUserFnHandler(S, m.element, m.elementSelector, m.expConfig)), 
                            m.viewabilityRate = E ? t.intersectionRatio : A, m.viewability = E ? "intersection" : "fillwindow", 
                            f.EXP_DURATION || (m.status = 2), g.updateExpHashMap(c, m, "UPDATE"), ++o;
                        } else A && g.updateExpHashMap(c, s.assign(l[h], {
                            lastEventType: m.eventType
                        }), "UPDATE");
                    }
                }
            }
        }
        return o;
    }
    function o(e, t) {
        var n = "APLUS_AE_EXPOSURE_CHANGE", o = e && e.type ? e.type : "IObserver", r = new Date().getTime(), i = 0;
        i = t ? l.filterStartExposureSize(r, e) : a(r, e), i > 0 && (f.EXP_DURATION ? setTimeout(function() {
            i = l.filterEndExposureSize(r, o), i > 0 && aplus.aplus_pubsub.publish(n, {
                size: i,
                eventType: o
            });
        }, f.EXP_DURATION) : aplus.aplus_pubsub.publish(n, {
            size: i,
            eventType: o
        }));
    }
    function r(e) {
        var t = {
            root: null,
            rootMargin: "0px",
            threshold: d
        };
        return new m(function(e) {
            c(e, function(e) {
                e.intersectionRatio > 0 && o(e);
            });
        }, s.assign(t, e));
    }
    function i(e) {
        if (m) {
            v.io_base || (v.io_base = r());
            var t = u.getGoldlogVal("_aplus_auto_exp") || {}, n = t._acHashMap || {};
            for (var a in n) for (var o = n[a] || [], i = 0; i < o.length; i++) {
                var s = o[i] || {};
                if (!s.inObserver) {
                    var c, l = "io_v_" + encodeURIComponent(s.positionSelector);
                    s.positionSelector && !v[l] && (c = r({
                        root: document.querySelector(s.positionSelector),
                        expConfig: e
                    }), v[l] = c), c ? c.observe(s.element) : v.io_base.observe(s.element), s.inObserver = !0;
                }
            }
        }
        return !0;
    }
    var s = n(34), u = n(2), c = n(10), l = n(62), p = n(60), f = n(55), g = n(52), d = f.AUTO_AT_VIEW_RATE, _ = f.AUTO_AT_VIEW_RATE_IN_WINDOW, h = window, m = h.IntersectionObserver, v = {};
    aplus._aplus_auto_exp.iobserverMap = v, t.watch_exposure_change = function(e) {
        aplus.aplus_pubsub.subscribe("APLUS_AE_DOM_CHANGE", function() {
            i(e);
        }), i(e);
    }, t.clear = function(e, t) {
        if (t && "appendMetaInfo" !== t.from) for (var n in v) {
            var a = v[n];
            a.disconnect();
        }
    };
}, function(e, t, n) {
    "use strict";
    var a, o = n(2), r = n(60), i = n(55), s = n(52), u = i.AUTO_AT_VIEW_RATE, c = i.AUTO_AT_VIEW_RATE_IN_WINDOW, l = function(e) {
        for (var t; e && "HTML" !== e.tagName; ) {
            t = e.style.display;
            {
                if ("none" === t) break;
                e = e.parentNode;
            }
        }
        return "none" === t;
    };
    t.filterStartExposureSize = function(e, t) {
        var n = 0, a = r.getWinPositions(), p = o.getGoldlogVal("_aplus_auto_exp") || {}, f = p._acHashMap || {};
        for (var g in f) for (var d = f[g] || [], _ = 0; _ < d.length; _++) {
            var h = d[_] || {};
            if (0 === h.status && h.expConfig && !l(h.element)) {
                var m = r.getElementPosition(h.element);
                if (m.width && m.height) {
                    h.x = m.x, h.y = m.y, h.eventType = t, h.width = m.width, h.height = m.height, h.size = m.width * m.height;
                    var v;
                    h.expConfig.positionSelector && (v = r.getWinPositions(h.expConfig.positionSelector));
                    var y = r.wrapViewabilityRate(v || a, h, u), b = y >= u, w = y;
                    v && (w = r.wrapViewabilityRate(a, h, u));
                    var A = h.width * h.height * w, E = r.getViewabilityRateInWindow(a, A, c), S = r.checkIsRecord(h.element, h.hash_value, "_aplus_auto_exp");
                    if ((b || E >= c) && !S) {
                        h.exposureTime = e, h.status = 1;
                        var T = i.getAutoExpUserFn();
                        T && (h.userParams = s.autoUserFnHandler(T, h.element, h.elementSelector, h.expConfig)), 
                        i.EXP_DURATION || (h.viewabilityRate = b ? y : E, h.viewability = b ? "intersection" : "fillwindow", 
                        h.status = 2), s.updateExpHashMap(g, h, "UPDATE"), ++n;
                    }
                }
            }
        }
        return n;
    }, t.filterEndExposureSize = function(e, t) {
        var n = 0;
        a || (a = r.getWinPositions());
        var i = o.getGoldlogVal("_aplus_auto_exp") || {}, c = i._acHashMap || {};
        for (var l in c) for (var p = c[l] || [], f = 0; f < p.length; f++) {
            var g = p[f] || {};
            if (1 === g.status && g.exposureTime === e && g.expConfig) {
                g.eventType = t, g.expConfig.positionSelector && (a = r.getWinPositions(g.expConfig.positionSelector));
                var d = r.wrapViewabilityRate(a, g, u), _ = r.checkIsRecord(g.element, g.hash_value, "_aplus_auto_exp");
                d && !_ ? (g.viewabilityRate = d, g.status = 2, s.updateExpHashMap(l, g, "UPDATE"), 
                ++n) : (g.status = 0, g.exposureTime = "", s.updateExpHashMap(l, g, "UPDATE"));
            }
        }
        return n;
    };
}, function(e, t, n) {
    "use strict";
    var a = n(51), o = n(62), r = n(52), i = n(55), s = function(e) {
        var t = "APLUS_AE_EXPOSURE_CHANGE", n = e && e.type ? e.type : "init", a = new Date().getTime(), r = o.filterStartExposureSize(a, n);
        r > 0 && (i.EXP_DURATION ? setTimeout(function() {
            r = o.filterEndExposureSize(a, n), r > 0 && aplus.aplus_pubsub.publish(t, {
                size: r,
                eventType: n
            });
        }, i.EXP_DURATION) : aplus.aplus_pubsub.publish(t, {
            size: r,
            eventType: n
        }));
    }, u = r.throttle(function(e) {
        s(e);
    }, 100), c = {}, l = function(e, t) {
        if (e && e.forEach && Object.keys && document.querySelector) {
            e.forEach(function(e) {
                e.positionSelector && document.querySelector(e.positionSelector) && (c[e.positionSelector] = !0);
            });
            var n = Object.keys(c);
            n.forEach(function(e) {
                a[t] && a[t](document.querySelector(e), "scroll", function(e) {
                    u(e);
                });
            });
        }
    };
    t.watch_exposure_change = function(e) {
        aplus.aplus_pubsub.subscribe("APLUS_AE_DOM_CHANGE", s), a.on(window, "touchmove", u), 
        a.on(window, "scroll", u), a.on(window, "resize", s), l(e, "on");
    }, t.clear = function(e) {
        a.un(window, "touchmove", u), a.un(window, "scroll", u), a.un(window, "resize", s), 
        l(e, "un");
    };
}, function(e, t, n) {
    "use strict";
    function a(e, t, n) {
        var a = "0";
        if (n) {
            if ("spmc" === e) {
                var o = n.split(".");
                a = o[2] ? o[2] : o[3], /^(\i|\d)[0-9]+$/.test(a) && (a = "0"), n = [ o[0], o[1], a ].join(".");
            }
        } else {
            n = "";
            var r = window.g_SPM || {};
            if ("function" == typeof r.getParam) {
                var i = r.getParam(t);
                "spmc" === e ? (a = t.getAttribute("data-spm") || "0", n = [ i.a, i.b, a ].join(".")) : n = [ i.a, i.b, i.c, i.d ].join(".");
            }
        }
        return n;
    }
    function o() {
        i || (i = !0, aplus.on(window, "beforeunload", function() {
            clearInterval(r);
            for (var e = 0; e < m.length; e++) aplus_queue.push(m[e]);
        }));
    }
    var r, i, s = n(46), u = n(34), c = n(2), l = n(8), p = n(50), f = n(52), g = n(55), d = function() {
        var e = aplus.aplusDebug, t = {}, n = g.getDefaultRequestCfg(), o = c.getGoldlogVal("_aplus_auto_exp") || {}, r = o._acHashMap || {};
        return p(r, function(r, i) {
            for (var s = i || [], c = 0, p = s.length; c < p; c++) {
                var g = s[c] || {};
                if (2 === g.status) {
                    g.status = 3, f.updateExpHashMap(r, g, "UPDATE"), o.exp_times++;
                    var d, _ = g.expConfig || {}, h = goldlog.spm_ab ? goldlog.spm_ab.join(".") : "0.0.0.0", m = a(_.eltype, g.element) || h, v = "";
                    try {
                        var y = new Number(g.viewabilityRate);
                        d = y.toFixed(2);
                    } catch (e) {
                        d = g.viewabilityRate;
                    }
                    var b = {
                        _w: g.width,
                        _h: g.height,
                        _x: g.x,
                        _y: g.y,
                        _rate: d,
                        _viewability: g.viewability
                    };
                    "object" == typeof g.userParams && ("object" == typeof g.userParams.userdata && (b = u.assign(b, g.userParams.userdata)), 
                    g.userParams.spm && (m = a(_.eltype, "", g.userParams.spm)), g.userParams.scm && (v = g.userParams.scm)), 
                    (f.isMethod(_.method) || f.isPkgSize(_.pkgSize)) && (n = f.filterExpConfigRequestCfg(_));
                    var w = {
                        scm: v,
                        spm: m,
                        aplusContentId: ""
                    }, A = f.fillPropsData(_, g.element, b);
                    if (A = f.fillFilterData(_, g.element, b), A = u.assign(A, f.getDataTrackerParams(g.element)), 
                    aplus.globalConfig.isAli) w.exargs = A; else {
                        var E = f.fillSpmData(_, g.element, b);
                        A = u.assign(A, E), w = A;
                    }
                    t[r] || (t[r] = []), t[r].push(w), e && l().w("logkey = " + r + ", params = " + decodeURIComponent(JSON.stringify(w)));
                }
            }
        }), {
            logkeyContainer: t,
            request_cfg: n
        };
    }, _ = function(e) {
        for (var t = [], n = 0, a = e.length; n < a; n++) {
            var o = e[n] || {}, r = {};
            p(o, function(e, t) {
                "element" !== e && (r[e] = t);
            });
            var i = u.cloneDeep(r);
            i.element = o.element, t.push(i);
        }
        return t;
    }, h = function(e) {
        var t = c.getGoldlogVal("_aplus_auto_exp") || {}, n = t._acHashMap || {}, a = [];
        p(n, function(t, n) {
            for (var o = _(n) || [], r = 0, i = o.length; r < i; r++) {
                var s = o[r] || {}, u = n[r] || {};
                if (3 === s.status) try {
                    f.setRecordSuccess(u, g.DATA_APLUS_AE_KEY), aplus.aplus_pubsub.publish("APLUS_ELEMENT_EXPOSURE", {
                        logkey: t,
                        v_origin: u,
                        options: e
                    }), a.push(u);
                } catch (e) {
                    l().w(e && e.message);
                }
            }
            for (;a.length > 0; ) f.updateExpHashMap(t, a.pop(), "CLEAR");
        });
    }, m = [], v = function() {
        r = setInterval(function() {
            m.length > 0 ? aplus_queue.push(m.pop()) : (clearInterval(r), r = null);
        }, 200);
    }, y = function(e, t, n) {
        var a = e.logkeyContainer || [], o = e.request_cfg || {};
        s.wrap(function() {
            p(a, function(e, a) {
                if (a && a.length > 0) {
                    for (var r = 0; r < a.length; ) {
                        var i = [], s = JSON.stringify(a.slice(r, r + o.pkgSize));
                        i.push("expdata=" + s), i.push("_is_auto_exp=1"), i.push("_eventType=" + t.eventType), 
                        i.push("_method=" + o.method), i.push("_pkgSize=" + o.pkgSize);
                        var u = o.method || "POST";
                        m.push({
                            action: "aplus.record",
                            arguments: [ e, "EXP", i.join("&"), u ]
                        }), r += o.pkgSize;
                    }
                    n(t);
                }
            });
        }, "recordAplusAtForAli");
    }, b = function(e, t, n) {
        var a = e.logkeyContainer || [], o = e.request_cfg || {};
        s.wrap(function() {
            p(a, function(e, a) {
                if (a && a.length > 0) {
                    for (var r = 0; r < a.length; ) {
                        var i = {
                            _is_auto_exp: 1,
                            _eventType: t.eventType,
                            _method: o.method,
                            is_auto: 1
                        }, s = a[r];
                        for (var u in s) i[u] = s[u];
                        var c = o.method || "POST";
                        aplus_queue.push({
                            action: "aplus.record",
                            arguments: [ e, "EXP", i, c ]
                        }), r += 1;
                    }
                    n(t);
                }
            });
        }, "recordAplusAtForAliyun");
    }, w = function(e) {
        if (e.size > 0) {
            r || v();
            var t = d() || {};
            "on" === aplus.getMetaInfo("aplus-track-combine") ? y(t, e, h) : b(t, e, h);
        }
    };
    t.watch_data_change = function() {
        aplus.aplus_pubsub.subscribe("APLUS_AE_EXPOSURE_CHANGE", w), o();
    }, t.clear = function() {
        aplus.aplus_pubsub.unsubscribe("APLUS_AE_EXPOSURE_CHANGE", w);
    };
}, function(e, t, n) {
    "use strict";
    var a = n(13), o = n(3), r = n(31).nameStorage, i = n(43);
    e.exports = function() {
        return {
            recordValInWindowName: function() {
                var e, t, n = o.HTTPS == location.protocol, a = aplus.globalConfig.NAMESTORAGE_KEYS || {}, s = parent !== self;
                if (!s && n) {
                    var u = location.href, c = n && (u.indexOf("login.taobao.com") >= 0 || u.indexOf("login.tmall.com") >= 0), l = i.getRefer(a);
                    c && l ? (e = l, t = r.getItem(a.REFERRER_PV_ID)) : (e = u, t = aplus.pvid), r.setItem(a.REFERRER, e), 
                    r.setItem(a.REFERRER_PV_ID, t);
                }
            },
            run: function() {
                var e = this;
                a.on(window, "beforeunload", function() {
                    e.recordValInWindowName();
                });
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(13), o = n(67);
    e.exports = function() {
        return {
            do_tracker_lostpv: function(e) {
                if (e && e.page) {
                    var t = e.spm_ab ? e.spm_ab.split(".") : [], n = navigator && navigator.sendBeacon ? "post" : "get", a = "record_lostpv_by" + n + "_" + e.msg, r = new o({
                        ratio: e.ratio || this.options.config.lostPvRecordRatio
                    });
                    r.run({
                        code: 102,
                        page: e.page,
                        msg: a,
                        spm_a: t[0],
                        spm_b: t[1],
                        c1: e.duration,
                        c2: e.page_url
                    });
                }
            },
            recordLostPv: function(e) {
                var t = window.aplus || {}, n = t._$ = t._$ || {}, a = t.spm_ab ? t.spm_ab.join(".") : "0.0", o = n.send_pv_count || 0;
                if (o < 1 && navigator && navigator.sendBeacon) {
                    var r = location.hostname + location.pathname;
                    this.do_tracker_lostpv({
                        page: r,
                        page_url: location.protocol + "//" + r,
                        duration: e,
                        spm_ab: a,
                        msg: "dom_state=" + document.readyState
                    });
                }
            },
            run: function() {
                var e = this, t = new Date();
                a.on(window, "beforeunload", function() {
                    var n = new Date(), a = n.getTime() - t.getTime();
                    e.recordLostPv(a);
                });
            }
        };
    };
}, function(e, t, n) {
    var a = n(33), o = n(34), r = n(40), i = {
        ratio: 1,
        logkey: "fsp.1.1",
        gmkey: "",
        chksum: "H46747615"
    }, s = function(e) {
        e && "object" == typeof e || (e = i), this.opts = e, this.opts.ratio = e.ratio || i.ratio, 
        this.opts.logkey = e.logkey || i.logkey, this.opts.gmkey = e.gmkey || i.gmkey, this.opts.chksum = e.chksum || i.chksum;
    }, u = s.prototype;
    u.getRandom = function() {
        return Math.floor(100 * Math.random()) + 1;
    }, u.run = function(e, t) {
        var n, i, s = {
            pid: "aplus",
            code: 101,
            msg: "异常内容"
        }, u = "";
        try {
            var c = window.aplus || {}, l = c._$ || {}, p = l.meta_info || {}, f = parseFloat(p["aplus-tracker-rate"]);
            if (n = this.opts || {}, "number" == typeof f && f + "" != "NaN" || (f = n.ratio), 
            i = this.getRandom(), t || i <= 100 * f) {
                u = "//gm.mmstat.com/" + n.logkey, e.rel = c.globalConfig.script_name + "@" + c.globalConfig.lver, 
                e.type = e.code, e.uid = encodeURIComponent(c.getCookieCna("cna")), e = o.assign(s, e);
                var g = a.obj2param(e);
                c.tracker = c.send(u, {
                    cache: o.makeCacheNum(),
                    gokey: g,
                    logtype: "2"
                }, "POST");
            }
        } catch (e) {
            r.logger({
                msg: "tracker.run() exec error: " + e
            });
        }
    }, e.exports = s;
}, function(e, t, n) {
    "use strict";
    var a = n(2);
    e.exports = function() {
        return {
            run: function() {
                var e = a.getGlobalValue("aplus");
                if (!e._aplus_cplugin_m) {
                    var t = this.options.config;
                    e._aplus_cplugin_m = n(69).run(t);
                }
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(40), o = n(67), r = navigator && navigator.sendBeacon ? "post" : "get";
    t.run = function(e) {
        return {
            status: "complete",
            do_tracker_jserror: function(t) {
                try {
                    var n = new o({
                        logkey: t ? t.logkey : "",
                        ratio: t && "number" == typeof t.ratio && t.ratio > 0 ? t.ratio : e.jsErrorRecordRatio
                    }), i = [ "Message: " + t.message, "Error object: " + t.error ].join(" - "), s = aplus.spm_ab || [], u = location ? location.hostname + location.pathname : "";
                    n.run({
                        code: 110,
                        page: u,
                        msg: "record_jserror_by" + r + "_" + t.message,
                        spm_a: s[0],
                        spm_b: s[1],
                        c1: i,
                        c2: t.filename,
                        c3: location ? location.protocol + "//" + u : ""
                    });
                } catch (e) {
                    a.logger({
                        msg: e
                    });
                }
            },
            do_tracker_browser_support: function(t) {
                var n = !1;
                try {
                    if (t && t.page) {
                        var i = t.spm_ab ? t.spm_ab.split(".") : [], s = new o({
                            ratio: t.ratio || e.browserSupportRatio
                        }), u = aplus._aplus_client || {}, c = u.ua_info || {};
                        s.run({
                            code: 111,
                            page: t.page,
                            msg: t.msg + "_by" + r,
                            spm_a: i[0],
                            spm_b: i[1],
                            c1: [ c.o, c.b, c.w ].join("_"),
                            c2: t.etag || "",
                            c3: t.cna || ""
                        }), n = !0;
                    }
                } catch (e) {
                    a.logger({
                        msg: e
                    });
                }
                return n;
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    e.exports = function() {
        return {
            run: function() {
                var e = n(71), t = e.create({
                    WS: null,
                    CTX: window,
                    CTX_TYPE: "WEB"
                });
                t.run(this.options);
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a, o = n(72), r = n(2), i = n(73), s = n(74), u = n(8), c = n(3), l = n(38), p = n(85);
    e.exports = i.extend({
        handlerMiddleware: function(e) {
            var t = r.getGlobalValue("aplus");
            if (!t.getMetaInfo(c.JSBRIDGE_ONLY)) {
                var n = o.changeToObj(e.what_to_send.logdata), i = location && location.href.match(/aplusDebug=(true|false)/) || [], f = t.getMetaInfo("DEBUG") || i[1];
                u().setDebug(!!f);
                var g, d = s(n, e.userdata);
                t._h5_share_enable ? g = "POST" : (g = e.where_to_send.method, "POST" === g && navigator && navigator.sendBeacon || (d = "d=" + encodeURIComponent(d))), 
                d && u().i("event before send to: ", e.where_to_send.url), a || (a = new Date().getTime()), 
                a && a - new Date().getTime() > c.SHARE_CACHE_INTERVAL && t._h5_share_enable && (l.remove("__sharefrom"), 
                l.remove("__fromappkey"), l.remove("_um_ssrc"), l.remove("_um_channel"), l.remove("_um_campaign")), 
                t._h5_share_enable ? p.request4um({
                    url: e.where_to_send.url,
                    method: g,
                    data: d,
                    success: function(e) {
                        e && e.imprint && l.set(c.IMPRINT, e.imprint);
                    },
                    error: function(e) {
                        u().w("aplus weblogs error: " + e);
                    }
                }) : t.send(e.where_to_send.url, d, g);
            }
        }
    });
}, function(e, t, n) {
    "use strict";
    var a = n(2);
    t.getKeyIndex = function(e) {
        var t = {
            protocol: 1,
            event_args: 25
        };
        return t[e];
    };
    var o = "-";
    t.changeToArray = function(e, t) {
        var n = a.getGlobalValue("aplus"), r = t.event_timestamp.getTime().toString(), i = t.client || {}, s = i.screenWidth || "", u = i.screenHeight || "", c = s + "*" + u, l = s && u ? c : o, p = i.language || o, f = t.gokey || {}, g = JSON.stringify(f), d = JSON.stringify({
            customSdkId: t.sdk_info.customSdkId || "",
            platform_type: t.sdk_info.platformType || ""
        }), _ = t.appKey || t.appId || o, h = JSON.stringify({
            appId: i.appId || n.getMetaInfo("miniAppId") || ""
        }), m = JSON.stringify(t.sessionArgs || {}), v = JSON.stringify(t.globalArgs || {}), y = t.arg1 || t.logkey || o;
        0 === y.indexOf("/$$_") && (y = y.substring(1, y.length)), "2001" === t.event_code && t.trackerEventCode && (y = t.trackerEventCode);
        var b = [ t.cache, t.method || "GET", o, l, _, h, t._dev_id || o, "{}", t._user_nick || o, t._user_id || o, t._anony_id || o, "{}", p, t.timeZone || o, i.os || o, i.os_version || o, d, t._session_id || o, t.cna || o, r, encodeURIComponent(t.url) || o, t.event_code || o, encodeURIComponent(t.pre) || o, v, m, g, y, t.sdk_info.jsver, t.sdk_info.lver, i.appVersion || "devtools" || o, i.brand || o, o, i.networkType || o ];
        return b;
    }, t.changeToObj = function(e) {
        var t = a.getGlobalValue("aplus"), n = e.event_timestamp.getTime().toString(), r = e.client || {}, i = r.language || o, s = e.gokey || {}, u = JSON.stringify(s), c = JSON.stringify({
            customSdkId: e.sdk_info.customSdkId || "",
            platform_type: e.sdk_info.platformType || ""
        }), l = e.appKey || e.appId || o, p = JSON.stringify({
            appId: r.appId || t.getMetaInfo("miniAppId") || ""
        }), f = JSON.stringify(e.sessionArgs || {}), g = JSON.stringify(e.globalArgs || {}), d = e.arg1 || e.logkey || o;
        0 === d.indexOf("/$$_") && (d = d.substring(1, d.length)), "2001" === e.event_code && e.trackerEventCode && (d = e.trackerEventCode);
        var _ = {};
        _.platform = e.sdk_info.platformType || "", _.sdk_type = _.platform ? _.platform + "mp" : "", 
        _.appkey = l, _.sdk_version = e.sdk_info.lver, _.device_type = r.device_model || "", 
        _.os = r.os || "", _.os_version = r.os_version || "", _.jsver = e.sdk_info.jsver, 
        _.pixel_ratio = window.devicePixelRatio || "";
        var h = Math.round(r.screenWidth * (window.devicePixelRatio || 1)), m = Math.round(r.screenHeight * (window.devicePixelRatio || 1));
        _.resolution = h > m ? h + "*" + m : m + "*" + h, _.language = i, _.app_version = t.getMetaInfo("appVersion") || "devtools", 
        _.arg1 = d, _.event_args = u, _.event_code = e.event_code || "", _.sessionArgs = f, 
        _.global_args = g, _.app_ext_info = p, _.time = n, _.cna = e.cna || "", _.url = e.url || "", 
        _.pre = e.pre || "", _.method = e.method || "GET", _.log_id = e.cache || "", _.sdk_info = c, 
        _.is_auto = e.is_auto, _.track_type = e.track_type;
        var v = t.getMetaInfo("aplus-exdata");
        return v && v.aplus_track_debug_id && (_.track_debug_id = v.aplus_track_debug_id), 
        _;
    };
}, function(e, t, n) {
    "use strict";
    var a = n(21), o = n(27), r = n(3);
    e.exports = a.extend({
        subscribeLogs: function(e, t) {
            o.pushIntoGoldlogQueue(r.SUBSCRIBE, [ e, function(e) {
                e.status === r.COMPLETE && t(e);
            } ]);
        },
        getLogicSymbol: function() {
            return "ALI" === this.format ? "&" : "||";
        },
        handlerMiddleware: function() {},
        watchLOG: function() {
            var e = this;
            e.subscribeLogs(r.MW_CHANGE_PV, function(t) {
                e.handlerMiddleware(t, "pv");
            }), e.subscribeLogs(r.MW_CHANGE_HJLJ, function(t) {
                e.handlerMiddleware(t, r.APLUS);
            });
        },
        run: function() {
            this.watchLOG();
        }
    });
}, function(e, t, n) {
    function a() {
        var e = {}, t = m.getUrlParams();
        try {
            y(t, function(t, n) {
                0 === t.indexOf("utm_") && (e[t] = n);
            });
            var n = v.get(g.APLUS_LATEAST_UTM);
            m.isEmptyObject(e) ? e = d.parse(n) || {} : n && d.stringfy(e) === n || v.set(g.APLUS_LATEAST_UTM, d.stringfy(e));
        } catch (e) {}
        return e;
    }
    function o() {
        var e = c.getGlobalValue("aplus");
        if (e._h5_share_enable) {
            var t = {}, n = v.get("__sharefrom"), a = v.get("__fromappkey"), o = v.get("_um_ssrc"), r = v.get("_um_channel"), i = v.get("_um_campaign");
            return n && (t.sharefrom = n), a && (t.fromappkey = a), o && (t._um_ssrc = o), r && (t._um_channel = r), 
            i && (t._um_campaign = i), t;
        }
    }
    function r(e, t) {
        var n = c.getGlobalValue("aplus");
        try {
            var a = {}, r = n.getMetaInfo("globalproperty");
            a.gp = r;
            var i, u = t.gokey;
            i = "string" == typeof u ? w.arr2obj(w.param2arr(u)) : "object" == typeof u ? s(u) : {}, 
            i.targetAppKey && (a.targetAppKey = i.targetAppKey, delete i.targetAppKey), i.is_auto ? (a.is_auto = 1, 
            a.track_type = "1", delete i.is_auto, delete i["aplus-ae"], delete i["aplus-clk"], 
            delete i.auto_element, e.event_code && (a.event_type_id = e.event_code)) : (a.is_auto = 0, 
            a.track_type = "0"), i.ap && (a.ap = i.ap, delete i.ap), a.page_title = i.page_title || A.getPageTitle(location.pathname) || document.title || "", 
            i.page_title && delete i.page_title, e.url && (a.page_name = A.getPageName(location.pathname, i), 
            a.url = e.url || "-", a.page_name && i.spmC && (a["spm-cnt"] = [ encodeURIComponent(a.page_name), encodeURIComponent(i.spmC), encodeURIComponent(i.spmD) ].filter(function(e) {
                return !!e;
            }).join("."), delete i.spmC, delete i.spmD, delete i.spmB));
            var p = s(i);
            for (var f in p) "string" == typeof f && l.startsWith(f, "_") && (a[f] = p[f], delete i[f]);
            a = m.assign(a, o() || {}), a.rank = b.rank(), t.logkey === g.PAGE_LEAVE && (a.amount = a.rank);
            var d = _(t.logkey, m.assign(a, {
                cusp: i
            }));
            return d;
        } catch (e) {
            return h().w("JSON parse failed", e), {};
        }
    }
    function i(e, t) {
        var n = c.getGlobalValue("aplus"), a = n.getMetaInfo("globalproperty"), r = {};
        r.r = e.arg1, r.gp = a, r.is_auto = e.is_auto ? 1 : 0, r.track_type = e.track_type;
        var i = t, u = s(l.deleteInfo(s(i), [ "_anony_id", "_dev_id", "_session_id", "_user_id", "_user_nick", "_src_pos_id", "cna", "_abfpc" ]));
        if (u.duration && (r.duration = u.duration, delete u.duration), r.page_title = u.page_title || A.getPageTitle(location.pathname) || document.title || "", 
        u.page_title && delete u.page_title, e.url && (r.page_name = A.getPageName(location.pathname, u), 
        r.url = e.url, r["spm-cnt"] = encodeURIComponent(r.page_name)), e.pre && (r.ref_url = e.pre || "-", 
        n._h5_share_enable && r.ref_url.length > 1)) {
            var p = r.ref_url.match(/(\w|-)+\.(\w|-)+\.(\w|-)+/);
            p && p.length > 0 && (r._um_referer_domain = p[0]);
        }
        return r.rank = b.rank(), r = m.assign(r, o() || {}), _(g.PAGE_START, m.assign(r, {
            cusp: u
        }));
    }
    var s = n(75), u = n(76), c = n(2), l = n(7), p = n(77), f = n(78), g = n(3), d = n(9), _ = n(79), h = n(8), m = n(34), v = n(38), y = n(50), b = n(80), w = n(39), A = n(81), E = n(7);
    e.exports = function(e, t) {
        var n = c.getGlobalValue("aplus"), o = n.getMetaInfo("aplus-globaldata") || {}, _ = a();
        if (n.appendMetaInfo("globalproperty", _), !e || !t || l.checkEmptyObj(e) || l.checkEmptyObj(t)) return {};
        var m = {}, y = s(u(e)), b = n.getMetaInfo(g._ANONY_ID) || e.cna;
        b && (y.id_tracking.anony_id = b), o._abfpc && (y.id_tracking._abfpc = o._abfpc);
        var w = n.getMetaInfo("_dev_id") || e.cna;
        if (w && (y.id_tracking.dev_id = w), n._h5_share_enable) {
            var A = n.getMetaInfo("uuid");
            A && (y.id_tracking.ud = A);
            var S = n.getMetaInfo("unionid");
            S && (y.id_tracking.unionid = S);
            var T = n.getMetaInfo("anouymousopenid");
            T && (y.id_tracking.anonymousid = T);
            var P = n.getMetaInfo("alipayid");
            P && (y.id_tracking.alipay_id = P);
            var I = n.getMetaInfo("swanid");
            I && (y.id_tracking.anonymousid = I);
            var x = n.getMetaInfo(g.USER_PROFILE_KEY);
            x && (y.user_info = x);
            var C = v.get(g.IMPRINT);
            C && (y.imprint = C);
            var M = n.getMetaInfo(g.ID_TYPE) || "cnaid";
            y.id_type = M;
        }
        var k = n.getMetaInfo("openid");
        k && (y.id_tracking.openid = k);
        var O = null;
        if (O = "2001" === e.event_code ? i(e, t) : r(e, t)) {
            m = {
                analytics: {
                    ekvs: {
                        sessionid: [ s(O) ]
                    }
                }
            };
            var N = n.getMetaInfo(g._USER_ID);
            N && m.analytics && (m.analytics.active_user = {
                puid: N,
                provider: n.getMetaInfo("_user_nick")
            }), m.header = l.assign(y, m.header, {
                ts: Date.now(),
                traceId: l.getRandomStr(10) + Date.now() + l.getRandomStr(9)
            });
            try {
                var R = window.sessionStorage.getItem(g.START_ID);
                R ? m.header.start_id = R : (R = E.getStartId(), window.sessionStorage.setItem(g.START_ID, R));
            } catch (e) {}
            var L = p(m), U = d.stringfy(L);
            return h().i("event data: ", L), f.encode(U);
        }
    };
}, function(e, t) {
    function n(e) {
        var t, a = Array.isArray(e) ? [] : {};
        if ("object" == typeof e) {
            if (JSON && JSON.parse) t = JSON.stringify(e), a = JSON.parse(t); else for (var o in e) a[o] = "object" == typeof e[o] ? n(e[o]) : e[o];
            return a;
        }
    }
    e.exports = n;
}, function(e, t) {
    e.exports = function(e) {
        var t = {};
        return t.sdk_type = e.sdk_type, t.appkey = e.appkey, t.sdk_version = e.sdk_version, 
        t.device_type = e.device_type, t.os = e.os, t.os_version = e.os_version, t.platform = e.platform, 
        t.pixel_ratio = e.pixel_ratio, t.resolution = e.resolution, t.language = e.language, 
        t.app_version = e.app_version, t.jsver = e.jsver, t.pre = e.pre, t.url = e.url, 
        t.debugId = e.track_debug_id, t.id_tracking = {}, t;
    };
}, function(e, t) {
    function n(e, t) {
        var n = a(e, t);
        return e && e.id_tracking && (n[t.id_tracking || "id_tracking"] = a(e.id_tracking, s)), 
        n;
    }
    function a(e, t) {
        var n = {};
        for (var a in e) t[a] ? n[t[a]] = e[a] : n[a] = e[a];
        return n;
    }
    function o(e, t) {
        var n = {};
        if (e) for (var a in e) e[a] && (n[t[a]] = e[a]);
        return n;
    }
    var r = {
        ekvs: "e",
        active_user: "active_user"
    }, i = {
        sdk_type: "sdt",
        device_model: "dm",
        language: "lang",
        device_type: "dt",
        os_version: "ov",
        appkey: "ak",
        sdk_version: "sv",
        resolution: "rl",
        testToken: "ttn",
        pixel_ratio: "pr",
        _id: "id",
        id_type: "it",
        id_tracking: "itr",
        imprint: "imp",
        debugId: "dk"
    }, s = {
        uuid: "ud",
        unionid: "und",
        openid: "od",
        anonymousid: "nd",
        alipay_id: "ad",
        device_id: "dd",
        userid: "puid"
    };
    e.exports = function(e) {
        return {
            h: n(e.header, i),
            a: o(e.analytics, r)
        };
    };
}, function(e, t) {
    var n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a = function(e) {
        for (var t = {}, n = 0, a = e.length; n < a; n++) t[e.charAt(n)] = n;
        return t;
    }(n), o = String.fromCharCode, r = function(e) {
        var t;
        return e.length < 2 ? (t = e.charCodeAt(0), t < 128 ? e : t < 2048 ? o(192 | t >>> 6) + o(128 | 63 & t) : o(224 | t >>> 12 & 15) + o(128 | t >>> 6 & 63) + o(128 | 63 & t)) : (t = 65536 + 1024 * (e.charCodeAt(0) - 55296) + (e.charCodeAt(1) - 56320), 
        o(240 | t >>> 18 & 7) + o(128 | t >>> 12 & 63) + o(128 | t >>> 6 & 63) + o(128 | 63 & t));
    }, i = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g, s = function(e) {
        return e.replace(i, r);
    }, u = function(e) {
        var t = [ 0, 2, 1 ][e.length % 3], a = e.charCodeAt(0) << 16 | (e.length > 1 ? e.charCodeAt(1) : 0) << 8 | (e.length > 2 ? e.charCodeAt(2) : 0), o = [ n.charAt(a >>> 18), n.charAt(a >>> 12 & 63), t >= 2 ? "=" : n.charAt(a >>> 6 & 63), t >= 1 ? "=" : n.charAt(63 & a) ];
        return o.join("");
    }, c = function(e) {
        return e.replace(/[\s\S]{1,3}/g, u);
    }, l = function(e) {
        return c(s(e));
    }, p = function(e, t) {
        return t ? l(String(e)).replace(/[+\/]/g, function(e) {
            return "+" == e ? "-" : "_";
        }).replace(/\=/g, "") : l(String(e));
    }, f = new RegExp([ "[À-ß][-¿]", "[à-ï][-¿]{2}", "[ð-÷][-¿]{3}" ].join("|"), "g"), g = function(e) {
        switch (e.length) {
          case 4:
            var t = (7 & e.charCodeAt(0)) << 18 | (63 & e.charCodeAt(1)) << 12 | (63 & e.charCodeAt(2)) << 6 | 63 & e.charCodeAt(3), n = t - 65536;
            return o((n >>> 10) + 55296) + o((1023 & n) + 56320);

          case 3:
            return o((15 & e.charCodeAt(0)) << 12 | (63 & e.charCodeAt(1)) << 6 | 63 & e.charCodeAt(2));

          default:
            return o((31 & e.charCodeAt(0)) << 6 | 63 & e.charCodeAt(1));
        }
    }, d = function(e) {
        return e.replace(f, g);
    }, _ = function(e) {
        var t = e.length, n = t % 4, r = (t > 0 ? a[e.charAt(0)] << 18 : 0) | (t > 1 ? a[e.charAt(1)] << 12 : 0) | (t > 2 ? a[e.charAt(2)] << 6 : 0) | (t > 3 ? a[e.charAt(3)] : 0), i = [ o(r >>> 16), o(r >>> 8 & 255), o(255 & r) ];
        return i.length -= [ 0, 0, 2, 1 ][n], i.join("");
    }, h = function(e) {
        return e.replace(/[\s\S]{1,4}/g, _);
    }, m = function(e) {
        return d(h(e));
    }, v = function(e) {
        return m(String(e).replace(/[-_]/g, function(e) {
            return "-" == e ? "+" : "/";
        }).replace(/[^A-Za-z0-9\+\/]/g, ""));
    };
    t.encode = p, t.decode = v;
}, function(e, t, n) {
    var a = n(8), o = n(9);
    e.exports = function(e, t) {
        if ("string" != typeof e || !e) return void a().w("event logkey is invalid, id =", e || "'' event properties = ", o.stringfy(t.cusp));
        var n = Object.create(null);
        n.id = e, t && t.ts || (n.ts = Date.now());
        var r = typeof t;
        if ("object" === r) for (var i in t) ({}).hasOwnProperty.call(t, i) && (n[i] = t[i]);
        return n;
    };
}, function(e, t) {
    function n() {
        return o++, r.hasOwnProperty(o) ? o++ : r[o] = o, o;
    }
    function a() {
        o = 0, r = {};
    }
    var o = 0, r = {};
    t.rank = n, t.clear = a;
}, function(e, t, n) {
    function a(e, t) {
        try {
            t = t || {};
            var n = r.getPageCode(e), a = i.getGlobalValue("aplus"), o = a.getMetaInfo && a.getMetaInfo("aplus-pagename") || "", p = a.getMetaInfo && a.getMetaInfo("aplus-dynamicpage"), f = location.href;
            p && c(p) && l(p()) && (f = p());
            var g = f.split("?")[0], d = g;
            if (f.split("?").length > 1) {
                var _ = f.split("?")[1], h = _.indexOf("/"), m = _.indexOf("#/"), v = -1;
                if (m > -1 && h > -1 ? m < h ? v = m : m > h && (v = h) : h > -1 ? v = h + 1 : m > -1 && (v = m), 
                v > -1) {
                    var y = _.substring(v), b = y.indexOf("?");
                    b > -1 && (y = y.substring(0, b)), d = u.isEndWith(g, "/") && u.isStartWith(y, "/") ? g + y.substring(1) : u.isEndWith(g, "/") || u.isStartWith(y, "/") ? g + y : g + "/" + y;
                }
            }
            return t.spmB || t.page_name || document && document.body && document.body.dataset && document.body.dataset.pagename || o || n || d || "-";
        } catch (e) {
            s().w("get pagename failed e =", e);
        }
    }
    function o(e) {
        return r.getPageTitle(e);
    }
    var r = n(82), i = n(2), s = n(8), u = n(34), c = n(20), l = n(84);
    t.getPageName = a, t.getPageTitle = o;
}, function(e, t, n) {
    function a(e, t) {
        if (!e || "-" === e) return "-";
        var n = [];
        for (var a in t) n.push(a + "=" + t[a]);
        var o = n.join("&");
        return o ? e + "?" + o : e;
    }
    var o = n(2), r = "", i = {};
    t.getCurrentPagePath = function() {
        return r;
    }, t.setCurrentPath = function(e) {
        e && (r = e);
    }, t.getPageQuery = function(e) {
        if (e) return i[e];
    }, t.setPageQuery = function(e, t) {
        e && (i[e] = t);
    }, t.getFullPath = function(e) {
        return a(e, i[e]);
    }, t.getPageName = function(e) {
        var t = o.getGlobalValue("aplus"), n = t.getMetaInfo("pageConfig") || {}, a = e || r;
        n.hashMode && (a = location.hash);
        try {
            if (n && "object" == typeof n) for (var i in n) {
                if (i === a) break;
                if (n[i] && n[i].regRule && n[i].regRule.test(a)) {
                    a = i;
                    break;
                }
            }
        } catch (e) {}
        return n[a];
    };
    var s = n(8), u = n(50);
    t.getWxTitle = function(e) {
        if (!e) return "";
        var t = n(83), a = t.getPlatformType(), r = "";
        try {
            if ("wx" === a && __wxConfig) {
                var i = __wxConfig, c = __wxConfig.page || {}, l = c[e] || c[e + ".html"], p = {}, f = {};
                if (i.global && i.global.window && i.global.window.navigationBarTitleText && (p.title = i.global.window.navigationBarTitleText), 
                l && l.window && l.window.navigationBarTitleText && (f.title = l.window.navigationBarTitleText), 
                !f.title && __wxAppCode__) {
                    var g = __wxAppCode__[e + ".json"];
                    g && g.navigationBarTitleText && (f.title = g.navigationBarTitleText);
                }
                var d = o.getContext();
                d.globalTitleMap && u(d.globalTitleMap, function(t, n) {
                    t === e && (r = n);
                }), 0 === r.length && (r = f.title || p.title || "");
            }
            return r;
        } catch (e) {
            return s().w("current platform can not track page title"), r;
        }
    }, t.getPageCode = function(e) {
        return (this.getPageName(e) || {}).pageName;
    }, t.getPageTitle = function(e) {
        return (this.getPageName(e) || {}).pageTitle || this.getWxTitle(e);
    }, t.getVTRealtimeCode = function() {
        if (r) {
            var e = i[r] || {}, t = /^\$vt_/, n = decodeURIComponent(e.scene);
            return n && t.test(n) && n.replace(t, "");
        }
    };
}, function(e, t, n) {
    "use strict";
    function a() {
        if ("boolean" == typeof c) return c;
        var e = !1;
        try {
            var t = navigator ? navigator.userAgent || navigator.swuserAgent : "";
            if (e = !!/AliApp/i.test(t), /AliApp\((AP|DingTalk|AMAP|UC|QUARK)/i.test(t) && (e = !1), 
            /AliApp\(KB/i.test(t) && (e = !!/Mist/.test(t)), /AlipayIDE Taobao/.test(t) && (e = !0), 
            e) {
                var n = l().ctx;
                r(n.canIUse) && (e = !!n.canIUse("callUserTrack"));
            }
        } catch (e) {}
        return c = e, e;
    }
    function o() {
        return "boolean" == typeof c ? !!c : a();
    }
    var r = n(20), i = n(2), s = n(39), u = n(3);
    t.getCurrentPage = function() {
        var e = getCurrentPages();
        return e[e.length - 1] || {};
    }, t.getReferrerPage = function() {
        var e = getCurrentPages();
        return e[e.length - 2] || {};
    };
    var c;
    t.resetIsTB = function(e) {
        c = e;
    }, t.initIsTB = a;
    var l = function() {
        try {
            return {
                ctx: dd,
                platType: "dd",
                sdkType: "ddmp",
                logDomain: "/ddm_logs"
            };
        } catch (e) {
            try {
                return {
                    ctx: my,
                    platType: my && my.tb ? "taobao" : "my",
                    sdkType: my && my.tb ? "taobaomp" : "mymp",
                    logDomain: "/alipaym_logs"
                };
            } catch (e) {
                try {
                    return {
                        ctx: tt,
                        platType: "tt",
                        sdkType: "ttmp",
                        logDomain: "/bytedancem_logs"
                    };
                } catch (e) {
                    try {
                        return {
                            ctx: swan,
                            platType: "bd",
                            sdkType: "bdmp",
                            logDomain: "/baidum_logs"
                        };
                    } catch (e) {
                        try {
                            return {
                                ctx: wx,
                                platType: "wx",
                                sdkType: "wxmp",
                                logDomain: "/wxm_logs"
                            };
                        } catch (e) {
                            return {
                                ctx: {},
                                platType: "UNKNOW",
                                sdkType: "UNKNOW"
                            };
                        }
                    }
                }
            }
        }
    };
    t.isTB = o, t.getPlatformType = function() {
        return l().platType;
    }, t.getSdkType = function() {
        return l().sdkType;
    }, t.getContext = function() {
        return l().ctx;
    }, t.getLogDomain = function() {
        return l().logDomain;
    };
    var p = "httpRequest", f = "request", g = function() {};
    t.request = function(e, t, n, a) {
        var o = i.getGlobalValue("aplus"), c = l().ctx;
        r(a) || (a = g), r(n) || (n = g);
        var d = t.requestMethodName || f, _ = c[d];
        r(_) || d === f || (d = f, _ = c[d]), r(_) || d === p || (d = p, _ = c[d]);
        var h, m = t && t.dataType ? t.dataType : "base64", v = t && t.timeout ? t.timeout : 3e3, y = t.method || "GET", b = o.getMetaInfo(u.APLUS_MINI_REQUEST_TIMEOUT);
        e = s.fixDomain(e);
        var w;
        if (r(_)) {
            var A = {
                url: e,
                method: y,
                dataType: m,
                timeout: b || v,
                success: function(e) {
                    h || (h = !0, n(e));
                },
                fail: function(e) {
                    h || (h = !0, a({
                        failure: !0,
                        data: e
                    }));
                }
            };
            "POST" === y && t.data && (p === d ? (A.headers = {
                "Content-Type": "application/json"
            }, A.dataType = "json", A.data = JSON.stringify(t.data)) : A.data = t.data);
            var E = o.getMetaInfo("aplus-request-extinfo");
            "object" == typeof E && (A._extInfo = E), _(A);
        } else h || (h = !0, a({
            failure: !0,
            data: w
        }));
        setTimeout(function() {
            h || (h = !0, w = 'aplus log request"' + e + ' timeout", time spend' + v + "ms", 
            console && console.warn(w), a({
                failure: !0,
                data: w
            }));
        }, v);
    }, t.setStorageSync = function(e, t) {
        try {
            var n = l().platType, a = l().ctx;
            "my" === n || "taobao" === n ? a.setStorageSync({
                key: e,
                data: t
            }) : a.setStorageSync(e, t);
        } catch (e) {}
    }, t.getStorageSync = function(e) {
        try {
            var t = l().platType, n = l().ctx;
            return "my" === t || "taobao" === t ? n.getStorageSync({
                key: e
            }).data : n.getStorageSync(e);
        } catch (e) {}
    };
}, function(e, t) {
    function n(e) {
        return "[object String]" === Object.prototype.toString.call(e);
    }
    e.exports = n;
}, function(e, t, n) {
    "use strict";
    var a = n(3), o = n(20), r = {
        base: 1e4,
        timeout: 1e4
    }, i = function(e, t, n, i) {
        /^\/\//.test(e) && (e = a.HTTPS + e);
        var s = !0, u = i && i.timeout ? i.timeout : r.timeout;
        setTimeout(function() {
            s && (s = !1, o(n) && n({
                timeout: u
            }));
        }, u), window.fetch(e).then(function(e) {
            return /application\/json/.test(e.headers.get("content-type")) ? e.json() : e.text();
        }).then(function(e) {
            s && (t(e), s = !1);
        }).catch(function(e) {
            s && n(e);
        });
    }, s = function(e, t, n, a) {
        var o, i = "GET", s = function() {
            o.responseText ? t(o.responseText) : n();
        }, u = window.XMLHttpRequest && "withCredentials" in new XMLHttpRequest();
        u ? (o = new XMLHttpRequest(), o.open(i, e, !0)) : (o = new window.XDomainRequest(), 
        o.open(i, e));
        var c = a && a.timeout ? a.timeout : r.timeout;
        o.timeout = c, o.onload = s, o.onerror = n, o.ontimeout = n, o.send();
    }, u = function(e, t, n, a) {
        window.fetch ? i(e, t, n, a) : s(e, t, n, a);
    }, c = function(e, t) {
        e = e || {}, e.method = (e.method || "POST").toUpperCase(), e.url = e.url || "", 
        e.data = e.data || null, e.success = e.success || function() {}, e.error = e.error || function() {};
        var n = new XMLHttpRequest(), a = [];
        for (var o in e.data) a.push(o + "=" + encodeURIComponent(e.data[o]));
        var r = a.join("&"), i = JSON.stringify(e.data || {});
        "POST" === e.method ? (n.open(e.method, e.url, !0), n.setRequestHeader("Content-Type", t || "application/json")) : "GET" === e.method && n.open(e.method, e.url + "?" + r, !0), 
        n.withCredentials = !0, n.timeout = 3e3, n.onreadystatechange = function() {
            if (4 == n.readyState && 200 == n.status) {
                var t = {};
                try {
                    t = JSON.parse(n.responseText);
                } catch (e) {}
                e.success(t);
            } else 4 == n.readyState && e.error(n.staus);
        }, "POST" === e.method ? n.send(i) : n.send();
    };
    t.request = u, t.request4um = c;
}, function(e, t, n) {
    "use strict";
    var a = n(10);
    e.exports = function() {
        return {
            getLogConfig: function() {
                var e = {}, t = this.options.config.plugins;
                for (var n in t) e[n] = {
                    plugins: t[n],
                    context: {}
                }, a(t[n], function(t) {
                    e[n].context[t.name] = t.config || {};
                });
                return e;
            },
            run: function() {
                this.options.context.logConfig = this.getLogConfig(), this.options.context.logConfig.pageLoadTime = this.options.context.PAGE_LOAD_TIME;
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(38), o = n(88), r = n(3), i = n(2), s = n(8), u = n(36), c = n(90), l = n(49), p = n(39), f = n(91);
    e.exports = function() {
        return {
            ABFPC: "_abfpc",
            VERSION: "2.0",
            IMPRINT_VERSION: "imprintVersion",
            APLUS_IMPRINT_VERSION: "APLUS_IMPRINT_VERSION",
            APLUS_REMOTE_CONFIG: "APLUS_REMOTE_CONFIG",
            tryGetStoreValue: function(e) {
                var t = a.get(e), n = o.getCookie(e);
                return {
                    lsValue: t,
                    cookieValue: n
                };
            },
            syncRcfg: function(e, t) {
                var n = aplus.getMetaInfo(r.APLUS_PV_DOMAIN);
                n = p.fixDomain(n);
                var a = l.loadScript, o = p.getAppKey();
                n && a(n + "/rcfg.js?_abfpc=" + e + "&ak=" + o, t);
            },
            setImprintVersion: function(e) {
                if (this.impv = e, e && u.getLsImpv(this.APLUS_IMPRINT_VERSION) !== e) {
                    u.setLsImpv(this.APLUS_IMPRINT_VERSION, c.getFormatDate(), e);
                    var t = aplus.getMetaInfo(r.APLUS_PV_DOMAIN);
                    t = p.fixDomain(t);
                    var n = t + e;
                    this.syncRemoteCfgData(n);
                } else {
                    var a = u.getLsRemoteCfg(this.APLUS_REMOTE_CONFIG);
                    f.enableCfg(a);
                }
            },
            syncRemoteCfgData: function(e) {
                var t = l.loadScript;
                t(e, function(e) {
                    var t, n;
                    if (e && "error" === e.type) s().w("quicktracking load remote config failed", e); else {
                        try {
                            t = i.getGoldlogVal("imprint"), n = "object" == typeof t ? t : JSON.parse(t), u.setLsRemoteCfg(r.APLUS_REMOTE_CONFIG, c.getFormatDate(), n);
                        } catch (e) {
                            n = null;
                        }
                        f.enableCfg(n);
                    }
                });
            },
            run: function() {
                var e = this, t = e.tryGetStoreValue(e.ABFPC), n = t.lsValue || t.cookieValue;
                n && (n = n.replace("_" + e.VERSION, ""));
                var a = window.aplus_queue || (window.aplus_queue = []);
                setTimeout(function() {
                    a.push({
                        action: r.SUBSCRIBE,
                        arguments: [ "aplusReady", function(t) {
                            "complete" === t && e.syncRcfg(n, function(t) {
                                if (t && "error" === t.type) s().w("remote configuration request failed, err msg:", t); else {
                                    var n = i.getGoldlogVal(e.IMPRINT_VERSION);
                                    e.setImprintVersion(n);
                                }
                            });
                        } ]
                    });
                }, 300);
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    function a(e) {
        if (!document) return "";
        var t = document.cookie.match(new RegExp("(?:^|;)\\s*" + e + "=([^;]+)"));
        return t ? t[1] : "";
    }
    function o(e) {
        var t = new Date(), n = "";
        if ("session" === e.expires) ; else if (e.expires && ("number" == typeof e.expires || e.expires.toUTCString)) "number" == typeof e.expires ? t.setTime(t.getTime() + 24 * e.expires * 60 * 60 * 1e3) : t = e.expires, 
        n = "expires=" + t.toUTCString(); else {
            var a = 20;
            c.indexof([ "v.youku.com", "www.youku.com", "player.youku.com" ], location.hostname) > -1 && (a = 1), 
            t.setTime(t.getTime() + 365 * a * 24 * 60 * 60 * 1e3), n = "expires=" + t.toUTCString();
        }
        return n;
    }
    function r(e, t, n) {
        if (document) {
            n || (n = {}), t += ";" + (n.expires || o(n)), t += "; path=" + (n.path ? n.path : "/"), 
            t += "; domain=" + n.domain, document.cookie = e + "=" + t;
            var r = 0;
            try {
                var i = navigator.userAgent.match(/Chrome\/\d+/);
                i && i[0] && (r = i[0].split("/")[1], r && (r = parseInt(r)));
            } catch (e) {}
            return n.SameSite && r >= 80 && (t += "; SameSite=" + n.SameSite, t += "; Secure", 
            document.cookie = e + "=" + t), a(e);
        }
    }
    function i(e, t, n) {
        try {
            if (!document) return "";
            if (n || (n = {}), n.domain) r(e, t, n); else for (var a = u.getDomains(), o = 0; o < a.length; ) n.domain = a[o], 
            r(e, t, n) ? o = a.length : o++;
        } catch (e) {}
    }
    var s = n(10), u = n(89), c = n(48);
    t.getCookie = a, t.trySetCookie = r, t.setCookie = i;
    var l = [ "tracknick", "thw", "cna" ];
    t.getData = function() {
        var e = {};
        if (s(l, function(t) {
            e[t] = a(t);
        }), location) {
            var t = location.hostname;
            e.cnaui = /\btanx\.com$/.test(t) ? a("cnaui") : "";
        }
        return e;
    }, t.getHng = function() {
        return encodeURIComponent(a("hng") || "");
    }, t.getCookieCna = function(e) {
        return a(e) || a("_" + e);
    }, t.setCookieCna = function(e, t, n) {
        for (var a = u.getDomains(), i = 0; i < a.length; ) if (n.domain = a[i], r(e, t, n)) i = a.length; else {
            if (i === a.length - 1) {
                var s = t + ";" + o(n);
                s += "; path=/", document.cookie = "_" + e + "=" + s;
            }
            i++;
        }
    };
}, function(e, t) {
    "use strict";
    t.getDomains = function() {
        var e = [];
        try {
            for (var t = location.hostname, n = t.split("."), a = 2; a <= n.length; ) e.push(n.slice(n.length - a).join(".")), 
            a++;
        } catch (e) {}
        return e;
    };
}, function(e, t) {
    "use strict";
    function n(e, t, n) {
        var a = "" + Math.abs(e), o = t - a.length, r = e >= 0;
        return (r ? n ? "+" : "" : "-") + Math.pow(10, Math.max(0, o)).toString().substr(1) + a;
    }
    t.getFormatDate = function(e) {
        var t = new Date();
        try {
            return [ t.getFullYear(), n(t.getMonth() + 1, 2, 0), n(t.getDate(), 2, 0) ].join(e || "");
        } catch (e) {
            return "";
        }
    };
}, function(e, t, n) {
    "use strict";
    function a(e) {
        var t;
        return t = l.isWeb() ? p.getLsRemoteCfg(g) : f().getSync(c.APLUS_REMOTE_CONFIG), 
        t && t[e];
    }
    function o(e) {
        var t = l.getContext();
        t.aplus_queue.push({
            action: "aplus.setMetaInfo",
            arguments: [ c.APLUS_DISABLE_AUTOEVENT_REMOTE, e ]
        });
    }
    function r(e) {
        var t = l.getContext();
        t.aplus_queue.push({
            action: "aplus.setMetaInfo",
            arguments: [ c.APLUS_DEVICE_ENABLE, e ]
        });
    }
    function i(e) {
        var t = l.getContext();
        t.aplus_queue.push({
            action: "aplus.setMetaInfo",
            arguments: [ c.APLUS_DISABLE_AUTOPV_REMOTE, e ]
        });
    }
    function s(e) {
        var t = l.getContext();
        t.aplus_queue.push({
            action: "aplus.setMetaInfo",
            arguments: [ c.APLUS_AUTOTRACK_ENABLED_REMOTE, e ]
        });
    }
    var u = n(39), c = n(3), l = n(2), p = n(36), f = n(92), g = "APLUS_REMOTE_CONFIG";
    t.getAutoEventStatus = function() {
        var e = l.getGlobalValue("aplus"), t = e.getMetaInfo(c.APLUS_DISABLE_AUTOEVENT_REMOTE) || a("codelessClickEventStatus");
        return t;
    }, t.getDeviceStatus = function() {
        var e = l.getGlobalValue("aplus");
        return a("currentDeviceEnable") || e.getMetaInfo(c.APLUS_DEVICE_ENABLE);
    }, t.getAutoPageStatus = function() {
        var e = l.getGlobalValue("aplus"), t = e.getMetaInfo(c.APLUS_DISABLE_AUTOPV_REMOTE) || a("codelessCollectorPageStatus");
        return t;
    }, t.getAutoTrackStatus = function() {
        var e = l.getGlobalValue("aplus"), t = e.getMetaInfo(c.APLUS_AUTOTRACK_ENABLED_REMOTE) || a("codelessStatus");
        return t;
    }, t.enableCfg = function(e) {
        var t = l.getContext();
        e && (o(e.codelessClickEventStatus), i(e.codelessCollectorPageStatus), s(e.codelessStatus), 
        r(e.currentDeviceEnable), e.eventSamplingRate && e.eventSamplingRate.length > 0 && t.aplus_queue.push({
            action: "aplus.setMetaInfo",
            arguments: [ c.APLUS_EVENT_LIMITRATES, u.mapEventSampleRates(e.eventSamplingRate) ]
        }), e.codelessIgnoreComponent && e.codelessIgnoreComponent.length > 0 && t.aplus_queue.push({
            action: "aplus.setMetaInfo",
            arguments: [ c.APLUS_AUTOTRACK_CONFIG_REMOTE, e.codelessIgnoreComponent ]
        }));
    };
}, function(e, t, n) {
    var a = n(83), o = n(20), r = n(9), i = n(39), s = n(3);
    e.exports = function() {
        function e() {
            var e = a.getContext();
            this.load = function(t) {
                u ? (e.removeStorage({
                    key: n
                }), o(t) && t()) : (n = "aplus_cache_" + i.getAppKey() || "", e.getStorage({
                    key: n,
                    success: function(a) {
                        u = a && a.data ? r.parse(a.data) || {} : {}, c = !0, e.removeStorage({
                            key: n
                        }), o(t) && t();
                    },
                    fail: function() {
                        u = {}, c = !0, e.removeStorage({
                            key: n
                        }), o(t) && t();
                    }
                }));
            }, this.save = function() {
                u && e.setStorage({
                    key: n,
                    data: r.stringfy(u)
                });
            }, this.set = function(e, t) {
                u && (u[e] = t);
            }, this.get = function(e) {
                return (u || {})[e];
            }, this.remove = function(e) {
                u && u[e] && delete u[e];
            }, this.getAll = function() {
                return u;
            }, this.clear = function() {
                u = null;
            }, this.has = function(e) {
                return !!this.get(e);
            }, this.isLoaded = function() {
                return c;
            }, this.getSync = function(e) {
                try {
                    var t = a.getStorageSync(e);
                    return e === s.APLUS_IMPRINT_VERSION ? t : "string" == typeof t ? r.parse(t) : t;
                } catch (e) {}
            }, this.setSync = function(e, t) {
                try {
                    "object" == typeof t ? a.setStorageSync(e, JSON.stringify(t)) : a.setStorageSync(e, t);
                } catch (e) {}
            };
        }
        var t = null, n = "", u = null, c = !1;
        return function() {
            return t || (t = new e()), t;
        };
    }();
}, function(e, t, n) {
    "use strict";
    var a = n(2), o = n(3);
    e.exports = function() {
        return {
            getMetaInfo: function() {
                var e = a.getGoldlogVal("_$") || {}, t = e.meta_info;
                return t;
            },
            getAplusWaiting: function() {
                var e = this.getMetaInfo() || {};
                return e["aplus-waiting"];
            },
            run: function(e, t) {
                var n = this.options.config || {}, a = this.getAplusWaiting();
                if (a && n.is_auto) switch (a = this.getAplusWaiting() + "", this.options.context.when_to_sendpv = {
                    aplusWaiting: a
                }, a) {
                  case o._USER_ID:
                  case o._ANONY_ID:
                  case "MAN":
                    return "done";

                  case "1":
                    return this.options.context.when_to_sendpv.isWait = !0, setTimeout(function() {
                        t();
                    }, 6e3), 6e3;

                  default:
                    var r = 1 * a;
                    if (r + "" != "NaN") return this.options.context.when_to_sendpv.isWait = !0, setTimeout(function() {
                        t();
                    }, r), r;
                }
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(95), o = n(2), r = n(8), i = n(39), s = "POST", u = "GET";
    e.exports = function() {
        return {
            getMetaInfo: function() {
                var e = o.getGoldlogVal("_$") || {}, t = e.meta_info;
                return t;
            },
            getAplusMetaByKey: function(e) {
                var t = this.getMetaInfo() || {};
                return t[e];
            },
            getRhost: function() {
                var e = this.getAplusMetaByKey("aplus-rhost-v");
                return i.checkDomain(e) ? e : "";
            },
            getHjljHostUrl: function(e) {
                e = i.fixDomain(e);
                var t = "/web_logs", n = e + t;
                return n;
            },
            getPvHostUrl: function(e) {
                e = i.fixDomain(e);
                var t = /\/$/.test(e) ? "" : "/", n = "v.gif";
                return a.isMobile() && (n = "m.gif"), e + t + n;
            },
            getChannel: function(e) {
                var t, n = this.getAplusMetaByKey("aplus-channel"), a = [ "WS", "WS-ONLY", u, s ];
                return a.indexOf(e) > -1 && (t = e), !t && a.indexOf(n) > -1 && (t = n), t;
            },
            run: function() {
                var e = o.getGlobalValue("aplus"), t = !!this.options.context.is_single;
                if (!t) {
                    var n = this.options.config.recordType, a = this.getRhost(n);
                    if (!a) return r().w("current request domain invalid, please check your aplus-rhost-v value inside metainfo!"), 
                    "done";
                    var i;
                    i = "PV" !== n || e._h5_share_enable ? this.getHjljHostUrl(a) : this.getPvHostUrl(a);
                    var c = this.options.config || {}, l = this.getChannel(c.method) || s;
                    l !== s || navigator && navigator.sendBeacon || (l = u), this.options.context.where_to_send.method = c.method, 
                    this.options.context.where_to_send.url = i;
                }
            }
        };
    };
}, function(e, t) {
    "use strict";
    t.isMobile = function() {
        var e = navigator ? navigator.userAgent : "", t = /AliApp|Yunos|cyclone/i.test(e), n = /iPhone|iPad|iPod/i.test(e), a = /Android/i.test(e), o = /Windows Phone/i.test(e) || /IEMobile/i.test(e) || /WPDesktop/i.test(e), r = /BlackBerry/i.test(e), i = /Opera Mini/i.test(e);
        return t || n || a || o || r || i;
    };
}, function(e, t, n) {
    "use strict";
    function a() {
        var e = {}, t = s.getUrlParams();
        try {
            f(t, function(t, n) {
                0 === t.indexOf("utm_") && (e[t] = n);
            });
        } catch (e) {}
        return e;
    }
    var o = n(88), r = n(8), i = n(97), s = n(34), u = n(95), c = n(2), l = n(3), p = n(98), f = n(50), g = n(35), d = s.getUrlParams();
    e.exports = function() {
        return {
            getCommonParams: function() {
                var e = c.getGlobalValue("aplus"), t = e.getMetaInfo("aplus-globaldata") || {}, n = this.options.context || {}, f = n.etag || {}, d = n.userdata || {}, _ = c.getGoldlogVal("_$") || {}, h = this.options.config || {}, m = u.isMobile() ? "WAP" : "PC", v = {
                    _dev_id: e.getMetaInfo("_dev_id"),
                    _anony_id: e.getMetaInfo(l._ANONY_ID),
                    _user_id: e.getMetaInfo(l._USER_ID),
                    _user_nick: e.getMetaInfo("_user_nick") || o.getCookie("tracknick"),
                    _session_id: e.getMetaInfo("_session_id")
                };
                e.globalConfig.isUM || (v._page_title = document.title || "");
                var y = h.pageUrl || (location ? location.href : "-"), b = h.title || document && document.title, w = (e.globalConfig.isDecodeUrl ? "DC_" : "") + i.getLogId(y, b), A = e.getMetaInfo("appKey") || e.getMetaInfo("appId");
                A || r().w("please set appId in aplus metaInfo before sendPV!");
                var E = s.assign({
                    appId: A,
                    cache: w,
                    cna: f.cna || o.getCookieCna("cna") || t.cna || "",
                    _abfpc: t._abfpc || "",
                    etag: f,
                    pre: _.page_referrer || "-",
                    sdk_info: {
                        jsver: e.globalConfig.script_name,
                        lver: e.globalConfig.lver,
                        customSdkId: e.getMetaInfo("customSdkId") || "",
                        platformType: m.toLowerCase()
                    },
                    trackerEventCode: h.trackerEventCode,
                    title: b,
                    url: y,
                    client: e._aplus_client || {},
                    timeZone: p.getTimeZone(),
                    gokey: v,
                    gmkey: d.gmkey || "",
                    method: this.options.context.where_to_send.method
                }, v);
                if (!e.globalConfig.isUM) {
                    var S = a(), T = e.getMetaInfo("aplus-global-args");
                    s.isEmptyObject(T) && s.isEmptyObject(S) || (E.globalArgs = g(T, S));
                }
                return E;
            },
            getPvParams: function() {
                var e = this.getCommonParams(), t = c.getGlobalValue("aplus");
                return this.options.config.is_auto || (e.sdk_info.mansndlog = 1), t.globalConfig.isUM || (e.gokey = s.assign(d, e.gokey)), 
                s.assign(e, {
                    event_code: "2001",
                    logtype: "1",
                    logkey: u.isMobile() ? "/m.gif" : "/v.gif",
                    event_timestamp: t._$.send_pv_count > 0 ? new Date() : t.logConfig.pageLoadTime,
                    is_auto: this.options.config.is_auto,
                    track_type: this.options.config.track_type
                });
            },
            getHjljParams: function() {
                var e = this.options.context || {}, t = e.userdata || {}, n = {
                    event_code: l.EVENT_ID_MAP[t.gmkey] || l.OTHER,
                    logtype: "2",
                    logkey: t.logkey,
                    event_timestamp: new Date()
                };
                return s.assign(this.getCommonParams(), n);
            },
            run: function() {
                var e = {};
                e = "PV" === this.options.config.recordType ? this.getPvParams() : this.getHjljParams(), 
                this.options.context.what_to_send.logdata = e;
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    function a(e, t, n) {
        return e ? o.hash(encodeURIComponent(e)).substr(0, t) : n;
    }
    var o = n(53), r = function(e) {
        function t(e) {
            var t = "0123456789abcdefhijklmnopqrstuvwxyzABCDEFHIJKLMNOPQRSTUVWXYZ", n = "0123456789abcdefghijkmnopqrstuvwxyzABCDEFGHIJKMNOPQRSTUVWXYZ";
            return 1 == e ? t.substr(Math.floor(60 * Math.random()), 1) : 2 == e ? n.substr(Math.floor(60 * Math.random()), 1) : "0";
        }
        for (var n, a = "", o = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", r = !1; a.length < e; ) n = o.substr(Math.floor(62 * Math.random()), 1), 
        !r && a.length <= 2 && ("g" == n.toLowerCase() || "l" == n.toLowerCase()) && (0 === a.length && "g" == n.toLowerCase() ? Math.random() < .5 && (n = t(1), 
        r = !0) : 1 == a.length && "l" == n.toLowerCase() && "g" == a.charAt(0).toLowerCase() && (n = t(2), 
        r = !0)), a += n;
        return a;
    };
    t.getLogId = function(e, t) {
        var n = r(8), o = n.substr(0, 4), i = n.substr(0, 6);
        return [ a(e, 4, o), a(t, 4, o), i ].join("");
    };
}, function(e, t) {
    t.getTimeZone = function() {
        var e = -new Date().getTimezoneOffset() / 60, t = "+";
        e < 0 && (t = "-");
        var n = Math.abs(parseInt(e)), a = Math.abs(parseInt(e) - e), o = "00";
        return a > 0 && (o = 60 * a), "GMT" + t + (n > 9 ? n : "0" + n) + ":" + o;
    };
}, function(e, t, n) {
    "use strict";
    var a = n(33), o = n(100), r = n(34), i = n(2);
    e.exports = function() {
        return {
            getUserdata: function() {
                var e = i.getGlobalValue("aplus"), t = this.options.config || {}, n = {};
                t && !t.is_auto && t.gokey && ("string" == typeof t.gokey ? n = a.param2obj(t.gokey) : "object" == typeof t.gokey && (n = t.gokey));
                var s = function(e) {
                    o(e) ? e.forEach(function(e) {
                        n = r.assign(n, e);
                    }) : n = r.assign(n, e);
                };
                s(e.getMetaInfo("aplus-globaldata")), s(e.getMetaInfo("aplus-cpvdata"));
                var u = this.options.context || {}, c = u.userdata || {};
                return s(c), n;
            },
            processLodashDollar: function() {
                var e = this.options.config || {}, t = i.getGoldlogVal("_$") || {};
                e && e.referrer && (t.page_referrer = e.referrer), i.setGoldlogVal("_$", t);
            },
            updatePre: function(e) {
                var t = i.getGoldlogVal("_$") || {};
                return t.page_referrer && (e.pre = t.page_referrer), e;
            },
            run: function() {
                var e = this.options.context.what_to_send.logdata, t = r.assign(this.getUserdata(), e.userdata || {});
                this.processLodashDollar(), e.gokey = r.assign(e.gokey, t), e = this.updatePre(e), 
                this.options.context.what_to_send.logdata = e, this.options.context.userdata = e.gokey;
            }
        };
    };
}, function(e, t) {
    "use strict";
    e.exports = function(e) {
        return Array.isArray ? Array.isArray(e) : /Array/.test(Object.prototype.toString.call(e));
    };
}, function(e, t, n) {
    "use strict";
    var a = n(102), o = n(103), r = n(35);
    e.exports = function() {
        return {
            getExParamsInfo: function() {
                var e = a.getExParams();
                return this.options.context.what_to_send.logdata.exparams = e, o(e);
            },
            run: function() {
                var e = this.options.context.what_to_send.logdata.gokey;
                e = r(this.getExParamsInfo(), e), this.options.context.what_to_send.logdata.gokey = e;
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    function a(e) {
        for (var t, n = e.split("&"), a = 0, o = n.length, r = []; a < o; a++) t = n[a].split("="), 
        r.push([ t.shift(), t.join("=") ]);
        return r;
    }
    function o(e, t) {
        var n = "aplus&sidx=aplusSidex&ckx=aplusCkx", a = e || n;
        try {
            if (t) {
                var o = u.param2obj(t), r = [ d.APLUS, "cna", d.SPM_CNT, d.SPM_URL, d.SPM_PRE, "logtype", "pre", "uidaplus", "asid", "sidx", "trid", "gokey" ];
                s(r, function(e) {
                    o.hasOwnProperty(e) && (g().w("Can not inject keywords: " + e), delete o[e]);
                }), delete o[""];
                var i = "";
                if (e) {
                    var l = e.match(/aplus&/).index, p = l > 0 ? u.param2obj(e.substring(0, l)) : {};
                    delete p[""], i = u.obj2param(c.assign(p, o)) + "&" + e.substring(l, e.length);
                } else i = u.obj2param(o) + "&" + n;
                return i;
            }
            return a;
        } catch (e) {
            return a;
        }
    }
    function r() {
        var e = aplus && aplus._$ ? aplus._$ : {}, t = e.meta_info || {};
        return t["aplus-exparams"] || "";
    }
    function i() {
        var e = l.getCurrentNode(), t = p.tryToGetAttribute(e, "exparams"), n = o(t, r()) || "";
        return n && n.replace(/&amp;/g, "&").replace(/\buser(i|I)d=/, "uidaplus=");
    }
    var s = n(10), u = n(33), c = n(34), l = n(49), p = n(29), f = n(48), g = n(8), d = n(3);
    t.mergeExparams = o, t.getExParams = i, t.getExparamsInfos = function(e, t) {
        var n = {}, o = e || [ "uidaplus", "pc_i", "pu_i" ], r = i() || "";
        r = r.replace(/&aplus&/, "&");
        for (var s = a(r) || [], u = function(e) {
            return f.indexof(o, e) > -1;
        }, c = 0; c < s.length; c++) {
            var l = s[c], p = l[0] || "", g = l[1] || "";
            p && g && ("EXPARAMS" === t || u(p)) && (n[p] = g);
        }
        return n;
    };
}, function(e, t, n) {
    var a = n(33);
    e.exports = function(e) {
        var t = {};
        try {
            var n = a.param2obj(e.replace(/&amp;/g, "&").replace(/\buser(i|I)d=/, "uidaplus=").replace(/&aplus&/, "&"));
            n.uidaplus && (t.uidaplus = n.uidaplus), t.pc_i = n.pc_i, t.pu_i = n.pu_i;
        } catch (e) {
            console && console.log(e);
        }
        return t;
    };
}, function(e, t, n) {
    "use strict";
    function a(e) {
        var t, n, a, o, i = [], s = {};
        for (t = e.length - 1; t >= 0; t--) n = e[t], a = n[0], a && a.indexOf(r.s_plain_obj) == -1 && s.hasOwnProperty(a) || (o = n[1], 
        ("aplus" == a || o) && (i.unshift([ a, o ]), s[a] = 1));
        return i;
    }
    function o(e) {
        var t, n, a, o, i = [], u = {
            logtype: !0,
            cache: !0,
            scr: !0,
            "spm-cnt": !0
        };
        for (t = e.length - 1; t >= 0; t--) if (n = e[t], a = n[0], o = n[1], !(s.isStartWith(a, r.s_plain_obj) && !s.isStartWith(a, r.mkPlainKeyForExparams()) || u[a])) if (s.isStartWith(a, r.mkPlainKeyForExparams())) {
            var c = r.param2arr(o);
            if ("object" == typeof c && c.length > 0) for (var l = c.length - 1; l >= 0; l--) {
                var p = c[l];
                p && p[1] && i.unshift([ p[0], p[1] ]);
            }
        } else i.unshift([ a, o ]);
        return i;
    }
    var r = n(39), i = n(48), s = n(34), u = n(2), c = n(88), l = n(26), p = n(3);
    e.exports = function() {
        return {
            keyIsAvailable: function(e) {
                var t = [ "functype", "funcId", "spm-cnt", "spm-url", "spm-pre", "_ish5", "_is_g2u", "_h5url", "cna", "isonepage", "lver", "jsver" ];
                return i.indexof(t, e) === -1;
            },
            valIsAvailable: function(e) {
                return "object" != typeof e && "function" != typeof e;
            },
            upUtData: function(e, t) {
                var n = this;
                if (e = e ? e : {}, t && "object" == typeof t) for (var a in t) {
                    var o = t[a];
                    a && n.valIsAvailable(o) && n.keyIsAvailable(a) && (e[a] = o);
                }
                return e;
            },
            getToUtData: function() {
                var e = u.getGoldlogVal("_$") || {}, t = u.getGlobalValue(p.APLUS), n = e.spm || {}, i = this.options.context || {}, s = this.options.config || {}, f = i.what_to_send || {}, g = f.logdata || {}, d = g.sdk_info || {}, _ = this.options.context.etag || {}, h = o(a(g.exparams || []));
                h = r.arr2obj(h);
                var m = i.userdata, v = location.href, y = {}, b = l.getParamFromUrl("scm", v) || "";
                b && (y.scm = b);
                var w = l.getParamFromUrl("pg1stepk", v) || "";
                w && (y.pg1stepk = w);
                var A = l.getParamFromUrl("point", v) || "";
                A && (y.issb = 1), d && d.mansndlog && (y.mansndlog = d.mansndlog), y = this.upUtData(y, h), 
                y = this.upUtData(y, g.gokey), y = this.upUtData(y, m), y.functype = "page", y.funcId = "2001", 
                t && t.globalConfig && t.globalConfig.isAli ? y.url = (location.protocol || "https:") + "//" + location.host + location.pathname : y.url = location.href, 
                s.pageName && (y.url = s.pageName), y._ish5 = "1", y._h5url = v, y._toUT = 2, y._bridgeName = "WindVane", 
                y._bridgeVersion = "3.0.7", n.spm_cnt && (y[p.SPM_CNT] = n.spm_cnt || ""), n.spm_url && (y[p.SPM_URL] = n.spm_url || ""), 
                n.spm_pre && (y[p.SPM_PRE] = n.spm_pre || ""), y.cna = _.cna || c.getCookieCna("cna"), 
                y.lver = d.lver, y.jsver = d.jsver, y.pver = "1.0.0", y.isonepage = -1;
                var E = t.getMetaInfo("aplus-utparam");
                return E && (y["utparam-cnt"] = JSON.stringify(E)), y._is_g2u_ = 1, y._slog = 1, 
                y;
            },
            run: function() {
                var e = this.options.context || {}, t = e.what_to_send || {};
                t.pvdataToUt = this.getToUtData(), this.options.context.what_to_send = t;
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(34), o = n(7), r = n(3), i = n(81);
    e.exports = function() {
        return {
            getToNativeData: function() {
                var e = this.options.context || {}, t = a.cloneDeep(e.userdata) || {}, n = e.what_to_send || {}, s = n.logdata || {}, u = s.sdk_info || {}, c = this.options.context.etag || {}, l = {}, p = {}, f = {};
                return p.cna = c.cna, p.lver = u.lver, p.jsver = u.jsver, p.id = r.PAGE_START, p.ts = Date.now(), 
                p.r = s.arg1 || s.logkey || "-", p.is_h5 = "1", t.hasOwnProperty("autosend") || s.is_auto || "1" === s.track_type ? p.is_auto = 1 : p.is_auto = 0, 
                p.track_type = p.is_auto + "", f = a.cloneDeep(o.deleteInfo(t, [ "_anony_id", "_dev_id", "_session_id", "_src_pos_id", "_user_id", "_user_nick", "_abfpc", "cna" ])), 
                f.duration && (p.duration = f.duration, delete f.duration), f.page_start && (p.page_start = f.page_start, 
                delete f.page_start), s.url && (p.page_name = i.getPageName(location.pathname, f), 
                p.url = s.url || "-", p["spm-cnt"] = encodeURIComponent(p.page_name)), s.pre && (p.ref_url = s.pre || "-"), 
                f.ts && delete f.ts, l.sdkArgs = a.cloneDeep(p), l.cusp = f, l;
            },
            run: function() {
                var e = this.options.context || {}, t = e.what_to_send || {};
                t.pvdataToUmNative = this.getToNativeData(), this.options.context.what_to_send = t;
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(2), o = n(107);
    e.exports = function() {
        return {
            run: function() {
                var e = a.getGoldlogVal("_$") || {}, t = this.options.context.can_to_sendpv || {}, n = e.send_pv_count || 0, r = this.options.config || {};
                return r.is_auto && n > 0 || !o.canSendPV(r.track_type) ? "done" : (t.flag = "YES", 
                this.options.context.can_to_sendpv = t, e.send_pv_count = ++n, void a.setGoldlogVal("_$", e));
            }
        };
    };
}, function(e, t, n) {
    function a(e) {
        var t = r.getGlobalValue(i.APLUS), n = t.getMetaInfo(i.APLUS_EVENT_LIMITRATES);
        if (n && n.length > 0) {
            var a = c.find(n, function(t) {
                return t.eventId === e;
            });
            if (a) {
                var o = Math.ceil(1e3 * Math.random());
                return o < 1e3 * a.samplingRate;
            }
            return !0;
        }
        return !0;
    }
    function o() {
        var e = r.getGlobalValue("aplus"), t = e.globalConfig.isUM;
        return !!t;
    }
    var r = n(2), i = n(3), s = n(91), u = n(108), c = n(48), l = n(83), p = n(34), f = n(39);
    t.canToSendHJLJ = function(e, t) {
        var n = s.getDeviceStatus();
        if (!n) try {
            var o = l.getContext();
            return p.isEmptyObject(o) ? void 0 : t === i.APP_START || t === i.APP_END;
        } catch (e) {}
        var r = s.getAutoTrackStatus(), c = s.getAutoEventStatus(), g = u.getAutoTrackStatus(), d = {};
        if (d = "string" == typeof e ? f.arr2obj(f.param2arr(e)) : e, d.auto_element) {
            if (2 === c || 2 === r) return;
            if (!r && !g) return;
        }
        if (a(t)) return !0;
    }, t.canSendPV = function(e) {
        if (!o()) return !0;
        var t = s.getDeviceStatus(), n = s.getAutoPageStatus(), a = u.localAutoPVDisabled(), r = !0;
        if (t) {
            if ("1" === e) return !(2 === n || !n && a);
        } else r = !1;
        return r;
    };
}, function(e, t, n) {
    "use strict";
    var a = n(3), o = n(2);
    t.localAutoEventDisabled = function() {
        var e = o.getGlobalValue("aplus");
        return !!e.getMetaInfo(a.APLUS_DISABLE_AUTOEVENT);
    }, t.localAutoPVDisabled = function() {
        var e = o.getGlobalValue("aplus");
        return !(!e.getMetaInfo(a.APLUS_DISABLE_AUTOPV) && "MAN" !== e.getMetaInfo("aplus-waiting"));
    }, t.getAutoTrackStatus = function() {
        var e = o.getGlobalValue("aplus");
        return !!e.getMetaInfo(a.APLUS_AUTOTRACK_ENABLED);
    };
}, function(e, t, n) {
    "use strict";
    var a = n(42), o = n(2);
    e.exports = function() {
        return {
            run: function() {
                var e = o.getGlobalValue("aplus"), t = e._$ || {}, n = this.options.context || {};
                o.setGoldlogVal("pv_context", n);
                var r = e.spm_ab || [], i = r.join("."), s = t.send_pv_count, u = {
                    cna: n.etag ? n.etag.cna : "",
                    count: s,
                    spmab_pre: e.spmab_pre
                };
                a.doPubMsg([ "sendPV", "complete", i, u ]), a.doCachePubs([ "sendPV", "complete", i, u ]);
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(33), o = n(100), r = n(34), i = n(2);
    e.exports = function() {
        return {
            getUserData: function() {
                var e = i.getGlobalValue("aplus"), t = this.options.context || {}, n = t.userdata || {}, s = t.what_to_send.logdata.gokey;
                s = r.assign(s, e.getMetaInfo("aplus-globaldata")), s = r.assign(s, a.param2obj(n.gokey));
                var u = e.getMetaInfo("aplus-exinfo");
                u && (s = r.assign(s, a.param2obj(u)));
                var c = e.getMetaInfo("aplus-exdata");
                return o(c) ? c.forEach(function(e) {
                    s = r.assign(s, e);
                }) : s = r.assign(s, e.getMetaInfo("aplus-exdata")), s;
            },
            run: function() {
                this.options.context.what_to_send.logdata.gokey = this.getUserData();
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(102), o = n(103), r = n(34);
    e.exports = function() {
        return {
            getExParamsInfo: function() {
                var e = a.getExParams();
                return this.options.context.what_to_send.logdata.exparams = e, o(e);
            },
            run: function() {
                var e = this.options.context.what_to_send.logdata.gokey;
                e = r.assign(this.getExParamsInfo(), e), this.options.context.what_to_send.logdata.gokey = e;
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(2), o = n(3);
    e.exports = function() {
        return {
            getToUtData: function() {
                var e = a.getGoldlogVal("_$") || {}, t = a.getGlobalValue(o.APLUS), n = e.spm || {}, r = this.options.context || {}, i = r.userdata || {}, s = r.etag || {}, u = r.what_to_send || {}, c = u.logdata || {}, l = c.sdk_info || {}, p = c.gokey || {}, f = [], g = "";
                for (var d in p) if ([ o.SPM_CNT, o.SPM_URL, o.SPM_PRE ].indexOf(d) === -1) {
                    var _ = p[d];
                    "undefined" !== p[d] && void 0 !== p[d] || (_ = ""), f.push(d + "=" + _);
                }
                f.length > 0 && (g = f.join("&"));
                var h = location.href, m = {};
                m.functype = "ctrl", m.funcId = c.event_code, t && t.globalConfig && t.globalConfig.isAli ? m.url = (location.protocol || "https:") + "//" + location.host + location.pathname : m.url = location.href, 
                p.pageName && (m.url = p.pageName), m.logkey = c.logkey, m.gokey = encodeURIComponent(g), 
                m.gmkey = c.gmkey, m._ish5 = "1", m._h5url = h, m._is_g2u_ = 1, m._slog = 1, m._toUT = 2, 
                m._bridgeName = "WindVane", m._bridgeVersion = "3.0.7", n.spm_cnt && (m[o.SPM_CNT] = n.spm_cnt || ""), 
                n.spm_url && (m[o.SPM_URL] = n.spm_url || ""), n.spm_pre && (m[o.SPM_PRE] = n.spm_pre || ""), 
                m.cna = s.cna, m.lver = l.lver, m.jsver = l.jsver, i.hasOwnProperty("autosend") && (m.autosend = i.autosend);
                var v = t.getMetaInfo("aplus-utparam");
                return v && (m["utparam-cnt"] = JSON.stringify(v)), m;
            },
            run: function() {
                var e = this.options.context || {}, t = e.what_to_send || {};
                t.pvdataToUt = this.getToUtData(), this.options.context.what_to_send = t;
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(34), o = n(7), r = n(39), i = n(81);
    e.exports = function() {
        return {
            getToNativeData: function() {
                var e = this.options.context || {}, t = e.userdata || {}, n = e.etag || {}, s = e.what_to_send || {}, u = s.logdata || {}, c = u.sdk_info || {}, l = {}, p = {}, f = {};
                if (p.cna = n.cna, p.lver = c.lver, p.jsver = c.jsver, p.id = t.logkey || "-", p.ts = Date.now(), 
                p.is_h5 = "1", p.event_type_id = u.event_code, t.gokey) switch (typeof t.gokey) {
                  case "string":
                    p.is_auto = !!t.gokey.match("is_auto");
                    break;

                  case "object":
                    p.is_auto = t.gokey.is_auto;
                    break;

                  default:
                    p.is_auto = 0;
                } else p.is_auto = 0;
                p.track_type = p.is_auto || "0", f = "string" == typeof t.gokey ? r.arr2obj(r.param2arr(t.gokey || "")) : a.cloneDeep(o.deleteInfo(t.gokey, [ "_anony_id", "_dev_id", "_session_id", "_src_pos_id", "_user_id", "_user_nick" ])), 
                u.url && (p.page_name = i.getPageName(location.pathname, f), p.url = u.url || "-", 
                p.page_name && f.spmC && (p["spm-cnt"] = [ encodeURIComponent(p.page_name), encodeURIComponent(f.spmC), encodeURIComponent(f.spmD) ].filter(function(e) {
                    return !!e;
                }).join("."), delete f.spmC, delete f.spmB, delete f.spmD)), f.ts && delete f.ts;
                var g = a.cloneDeep(f);
                for (var d in g) "string" == typeof d && o.startsWith(d, "_") && (p[d] = g[d], delete f[d]);
                l.sdkArgs = a.cloneDeep(p);
                var _ = a.cloneDeep(f);
                return l.cusp = _, _.ap && (l.ap = _.ap, delete _.ap), l;
            },
            run: function() {
                var e = this.options.context || {}, t = e.what_to_send || {};
                t.hjljdataToUmNative = this.getToNativeData(), this.options.context.what_to_send = t;
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    e.exports = function() {
        return {
            run: function() {
                n(115)();
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(49), o = n(116);
    e.exports = function() {
        var e = {
            isTouchEnabled: a.isTouch()
        };
        o.run(e);
    };
}, function(e, t, n) {
    "use strict";
    function a(e) {
        for (var t, n; e && (t = e.tagName); ) {
            if ("A" === t) {
                n = !0;
                break;
            }
            if ("BODY" == t || "HTML" == t) break;
            e = e.parentNode;
        }
        return n ? e : "";
    }
    function o(e) {
        var t, n = !1;
        try {
            for (var a; e && (a = e.tagName) && !(t = e && e.getAttribute ? e.getAttribute("data-aplus-pos-id") : ""); ) {
                if ("BODY" == a || "HTML" == a) {
                    t = "PAGE";
                    break;
                }
                e = e.parentNode;
            }
        } catch (e) {}
        return {
            _pos_id: t,
            alinkEl: e,
            isPage: n
        };
    }
    function r(e) {
        var t = aplus.getMetaInfo("aplus-auto-clk") || [], n = {};
        return "PAGE" === e ? t[0] || {} : (f(t, function(t) {
            if (t._pos_id === e) return n = t, "break";
        }), n);
    }
    function i(e, t) {
        if (e && /&?\b_src_pos_id=[^&#]*/.test(e) && (e = e.replace(/&?\b_src_pos_id=[^&#]*/g, "").replace(/&{2,}/g, "&").replace(/\?&/, "?").replace(/\?$/, "")), 
        !t) return e;
        var n, a, o, r, i, s, u, c = "&";
        e.indexOf("#") !== -1 && (o = e.split("#"), e = o.shift(), a = o.join("#")), r = e.split("?"), 
        i = r.length - 1, o = r[0].split("//"), o = o[o.length - 1].split("/"), s = o.length > 1 ? o.pop() : "", 
        i > 0 && (n = r.pop(), e = r.join("?")), n && i > 1 && n.indexOf("&") == -1 && n.indexOf("%") !== -1 && (c = "%26");
        var l = "";
        if (e = e + "?_src_pos_id=" + l + t + (n ? c + n : "") + (a ? "#" + a : ""), u = d.isContain(s, ".") ? s.split(".").pop().toLowerCase() : "") {
            if ({
                png: 1,
                jpg: 1,
                jpeg: 1,
                gif: 1,
                bmp: 1,
                swf: 1
            }.hasOwnProperty(u)) return 0;
            !n && i <= 1 && (a || {
                htm: 1,
                html: 1,
                php: 1,
                aspx: 1,
                shtml: 1,
                xhtml: 1
            }.hasOwnProperty(u) || (e += "&file=" + s));
        }
        return e;
    }
    function s(e, t) {
        var n = e.getElementsByTagName("a"), a = r(t) || {}, s = v.page || {}, u = a.spmB || s.spmB;
        if (u) {
            var c = 1;
            f(n, function(e) {
                var n = o(e), a = n._pos_id;
                if (t === a) {
                    var r = "PAGE" === t ? [ u, c++ ].join(".") : [ u, t, c++ ].join(".");
                    aplus._current_spm = r;
                    var s = window.aplus_queue || (window.aplus_queue = []);
                    s.push({
                        action: "aplus.appendMetaInfo",
                        arguments: [ "aplus-cpvdata", {
                            _src_pos_id: r
                        } ]
                    });
                    try {
                        e && e.setAttribute && (e.getAttribute("aplus-anchor-id") || (e.setAttribute("aplus-anchor-id", r), 
                        e.href && "#" !== e.href && e.setAttribute("href", i(e.href, r))));
                    } catch (e) {
                        console.log(e);
                    }
                }
            });
        }
    }
    function u(e, t) {
        var n, r = a(t);
        if (r && (n = r.getAttribute("aplus-anchor-id"), !n)) {
            var i = o(r);
            n = i._pos_id, s(i.alinkEl, n);
        }
        return n;
    }
    function c(e) {
        var t = window.aplus_queue || (window.aplus_queue = []), n = e || _.getParamFromUrl("_src_pos_id", location.href);
        t.push({
            action: "aplus.appendMetaInfo",
            arguments: [ "aplus-cpvdata", {
                _src_pos_id: n
            } ]
        }), t.push({
            action: "aplus.appendMetaInfo",
            arguments: [ "aplus-exdata", {
                _src_pos_id: n
            } ]
        }), t.push({
            action: "aplus.aplus_pubsub.subscribe",
            arguments: [ m.MW_CHANGE_PV, function(e) {
                "complete" === e.status && aplus.appendMetaInfo("aplus-cpvdata", {
                    _src_pos_id: ""
                });
            } ]
        });
    }
    function l() {
        h.pushIntoGoldlogQueue(m.SUBSCRIBE, [ m.CURRENT_PAGE_CONFIG, function(e) {
            v = e || {};
        } ]);
    }
    function p() {
        if (aplus && aplus.globalConfig && aplus.globalConfig.isUM) ; else {
            var e = window.aplus_queue || (window.aplus_queue = []);
            e.push({
                action: "aplus.setMetaInfo",
                arguments: [ "aplus-auto-clk-userfn", function(e) {
                    var t = e ? e.getAttribute("aplus-anchor-id") : "";
                    if (t) return "_pos_id=" + t;
                    var n = e ? e.getAttribute("data-aplus-pos-id") : "", a = n ? r(n) : {};
                    if (a.spmB && a._pos_id) {
                        var o = [ a.spmB, n ].join(".");
                        return "_pos_id=" + o;
                    }
                    return "";
                } ]
            });
        }
    }
    var f = n(10), g = n(13), d = n(34), _ = n(26), h = n(27), m = n(3), v = {};
    t.run = function(e) {
        var t = document;
        c(), l(), p(), window.aplus.doTrace = u, e && e.isTouchEnabled ? g.on(t, "tapSpm", u) : (g.on(t, "mousedown", u), 
        g.on(t, "keydown", u));
    };
}, function(e, t, n) {
    "use strict";
    e.exports = function() {
        return {
            run: function() {
                n(118)(this.options.context.logConfig);
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(42), o = n(2);
    e.exports = function(e) {
        var t = o.getGlobalValue("aplus");
        if (!t._aplus_api) {
            t._aplus_api = {
                status: "complete"
            };
            var r = n(119).run.create({
                logConfig: e
            });
            for (var i in r) t[i] = r[i];
            n(126).makePVId();
            var s = [ "aplusReady", "complete" ];
            a.doPubMsg(s), a.doCachePubs(s);
        }
    };
}, function(e, t, n) {
    "use strict";
    function a() {
        var e = 5e3;
        try {
            var t = g.getGlobalValue("aplus"), n = t.getMetaInfo("aplus-mmstat-timeout");
            if (n) {
                var a = parseInt(n);
                a >= 1e3 && a <= 1e4 && (e = a);
            }
        } catch (e) {}
        return e;
    }
    function o(e, t, n) {
        var a = e[0], o = e[1], r = (n || {}).spm, i = (n || {}).logkey, s = 1;
        if (r && r[a]) {
            var u = r[a];
            s = u.cp, u[o] && (s = u[o].cp);
        } else i && i[t] && (s = i[t]);
        var c = Math.ceil(Math.random() * Math.floor(1 / s));
        return c;
    }
    var r = document, i = n(21), s = n(88), u = n(13), c = n(40), l = n(8), p = n(42), f = n(34), g = n(2), d = n(20), _ = n(3), h = n(27), m = n(120), v = n(48), y = n(107), b = n(123), w = n(32), A = n(124), E = [], S = [], T = [], P = [], I = function() {};
    t.run = i.extend({
        beforeSendPV: function(e) {
            E.push(e);
        },
        afterSendPV: function(e) {
            S.push(e);
        },
        launch: function() {
            c.logger({
                msg: "warning: This interface is deprecated, can not send pv log, please use goldlog.sendPV instead! API: http://log.alibaba-inc.com/log/info.htm?type=2277&id=31"
            });
        },
        send: function(e, t, n) {
            var o, r = g.getGlobalValue("aplus");
            if (/^\/\//.test(e)) {
                var i = _.HTTPS;
                /^\/\/(\d+\.){3,}\d+/.test(e) && (i = "http:"), e = i + e;
            }
            return o = "POST" === n && navigator && navigator.sendBeacon ? A.postData(e, t) : A.sendImg(e + "?" + t, a()), 
            r.req = o, o;
        },
        sendPV: function(e, t) {
            if (e = e || {}, f.any(E, function(t) {
                return t(n, e) === !1;
            })) return !1;
            var n = g.getGlobalValue("aplus"), a = n.getMetaInfo(_.APLUS_SKIP_APV_RULES) || [];
            if (!v.itemMatch(a, location.href) || !e.is_auto) {
                var o = new m();
                e.recordType = "PV";
                var r = n.globalConfig.isUM, i = n.globalConfig.isAli;
                (i || r) && "GET" !== e.method && (e.method = "POST");
                var s = n.logConfig.pv;
                return o.run({
                    plugins: s.plugins,
                    context: f.cloneDeep(s.context)
                }, {
                    config: e,
                    userdata: t,
                    pubsubType: "pv",
                    messageFnQueue: S,
                    middlewareMessageKey: "mw_change_pv"
                }), !0;
            }
        },
        pageEnter: function(e) {
            h.pushIntoGoldlogQueue(_.PUBLISH, [ _.PAGE_ENTER, e ]), h.pushIntoGoldlogQueue(_.CACHE_PUBS, [ _.PAGE_ENTER, e ]);
        },
        getParam: function(e) {
            var t = window.WindVane || {}, n = t && "function" == typeof t.getParam ? t.getParam(e) : "";
            return n;
        },
        beforeRecord: function(e) {
            T.push(e);
        },
        afterRecord: function(e) {
            P.push(e);
        },
        record: function(e, t, n, a, r) {
            var i = g.getGlobalValue("aplus"), s = i.globalConfig.isAli, u = i.globalConfig.isUM;
            if (e && 0 !== e.indexOf("/") && s && (e = "/" + e), f.any(T, function(e) {
                return e(i) === !1;
            })) return !1;
            var c = 1, l = i.spm_ab instanceof Array;
            if (s && l && i.spm_ab.length > 1 && (c = o(i.spm_ab, e, i.getMetaInfo("aplus-report-rate"))), 
            1 === c) {
                var p = new m(), _ = i.logConfig.hjlj;
                return u ? (y.canToSendHJLJ(n, e) && p.run({
                    plugins: _.plugins,
                    context: f.cloneDeep(_.context)
                }, {
                    config: {
                        recordType: "COMMON_HJLJ",
                        method: u ? a || "POST" : a
                    },
                    userdata: {
                        logkey: e,
                        gmkey: t,
                        gokey: n || {}
                    },
                    pubsubType: "hjlj",
                    messageFnQueue: P,
                    middlewareMessageKey: "mw_change_hjlj"
                }, function() {
                    d(r) && r();
                }), !0) : (p.run({
                    plugins: _.plugins,
                    context: f.cloneDeep(_.context)
                }, {
                    config: {
                        recordType: "COMMON_HJLJ",
                        method: u ? a || "POST" : a
                    },
                    userdata: {
                        logkey: e,
                        gmkey: t,
                        gokey: n || {}
                    },
                    pubsubType: "hjlj",
                    messageFnQueue: P,
                    middlewareMessageKey: "mw_change_hjlj"
                }, function() {
                    d(r) && r();
                }), !0);
            }
            return !1;
        },
        recordUdata: function(e, t, n, a, o) {
            var r = g.getGlobalValue("aplus"), i = new m(), s = r.logConfig.hjlj, u = r.globalConfig.isAli;
            return i.run({
                plugins: s.plugins,
                context: f.cloneDeep(s.context)
            }, {
                config: {
                    recordType: "DATACLICK_HJLJ",
                    method: u ? a : a || "POST"
                },
                userdata: {
                    logkey: e,
                    gmkey: t,
                    gokey: n || {}
                },
                pubsubType: "hjlj",
                messageFnQueue: P,
                middlewareMessageKey: "mw_change_hjlj"
            }, function() {
                d(o) && o();
            }), !0;
        },
        setPageSPM: function(e, t, n) {
            var a = g.getGlobalValue("aplus"), o = a.getMetaInfo("aplus-spm-fixed"), r = "function" == typeof n ? n : function() {};
            a.spm_ab = a.spm_ab || [];
            var i = f.cloneDeep(a.spm_ab);
            e && (a.spm_ab[0] = "" + e, a._$.spm.data.a = "" + e), t && (a.spm_ab[1] = "" + t, 
            a._$.spm.data.b = "" + t);
            var s = w.qGet();
            if (a.spmAPI && a.spmAPI.spaInit(a, s, i), "1" !== o) {
                var u = i.join(".");
                a.spmab_pre = u;
            }
            var c = [ "setPageSPM", {
                spmab_pre: a.spmab_pre,
                spmab: a.spm_ab.join(".")
            } ];
            p.doPubMsg(c), p.doCachePubs(c), b.resetMetaAndBody(), b.resetModules(), r();
        },
        getPageSPM: function() {
            var e = g.getGlobalValue("aplus");
            return e.spm_ab;
        },
        setMetaInfo: function(e, t, n) {
            var a, o, r = "OVERWRITE", i = r;
            if ("object" == typeof e ? (a = e.metaName, o = e.metaValue, i = e.mode || r) : (a = e, 
            o = t), i !== r) return this.appendMetaInfo(a, o);
            if (w.setMetaInfo(a, o, n)) {
                var s = g.getGoldlogVal("_$") || {};
                s.meta_info = w.qGet();
                var u = g.setGoldlogVal("_$", s), c = [ "setMetaInfo", a, o, n ];
                return p.doPubMsg(c), p.doCachePubs(c), u;
            }
        },
        appendMetaInfo: w.appendMetaInfo,
        updatePageProperties: function(e) {
            var t = g.getGlobalValue("aplus");
            e && "object" == typeof e ? (e._page && (e.pageName = e._page, t.setMetaInfo("aplus-pagename", e.pageName), 
            delete e._page), t.appendMetaInfo("aplus-cpvdata", e)) : l().w("warning: typeof updatePageProperties's params must be object");
        },
        updateNextPageProperties: function(e) {
            var t = g.getGlobalValue("aplus");
            "object" == typeof e ? t.appendMetaInfo("aplus-nextpage-properties", e) : l().w("warning: typeof updateNextPageProperties's params must be object");
        },
        getMetaInfo: function(e) {
            return w.getMetaInfo(e);
        },
        on: u.on,
        cloneDeep: f.cloneDeep,
        setCookie: s.setCookie,
        getCookie: s.getCookie,
        pageAppear: I,
        pageDisappear: I,
        updatePageUtparam: I,
        updateNextPageUtparam: I,
        updateSessionProperties: function(e) {
            var t = g.getGlobalValue("aplus");
            "object" == typeof e && t.setMetaInfo("_session_args", e);
        },
        setPageName: function(e) {
            if (!e || "string" != typeof e) return void l().w("setPageName failed:  pagename=" + e);
            var t = r.querySelector("body");
            try {
                t.setAttribute("data-pagename", e);
            } catch (e) {
                l().w("setPageName failed:  err=" + e);
            }
        },
        getPageName: function() {
            return window.document.body && window.document.body.dataset && window.document.body.dataset.pagename ? window.document.body.dataset.pagename : "";
        },
        getElementSPM: function(e) {
            if (e && e.dataset) return e.getAttribute("data-spm-anchor-id");
        },
        recordAppLink: function(e, t, n) {
            if (!e.targetAppKey) return l().w("send $$_app_link failed: targetAppKey is null"), 
            !1;
            var a = g.getGlobalValue("aplus");
            return a.record("$$_app_link", "OTHER", e, t, n);
        }
    });
}, function(e, t, n) {
    "use strict";
    var a = n(10), o = n(2), r = n(20), i = n(42), s = n(40), u = n(3), c = n(121), l = n(122), p = function() {};
    p.prototype.run = function(e, t, n) {
        var p = new l();
        p.init({
            middleware: [],
            config: t.config,
            plugins: e.plugins
        });
        var f = p.run(), g = r(e.context) ? new e.context() : e.context;
        g.userdata = t.userdata, g.logger = s.logger;
        var d = {
            context: g,
            pubsub: o.getGoldlogVal("aplus_pubsub"),
            pubsubType: t && t.pubsubType
        }, _ = new c();
        _.create(d), _.wrap(f, function() {
            d.context.status = u.COMPLETE, t && (t.middlewareMessageKey && i.doPubMsg([ t.middlewareMessageKey, d.context ]), 
            t.messageFnQueue && a(t.messageFnQueue, function(t) {
                t(o.getGlobalValue(u.APLUS), e);
            })), r(n) && n(d.context);
        })();
    }, e.exports = p;
}, function(e, t, n) {
    "use strict";
    function a() {}
    var o = n(20), r = n(48), i = n(8);
    a.prototype.create = function(e) {
        for (var t in e) "undefined" == typeof this[t] && (this[t] = e[t]);
        return this;
    }, a.prototype.calledList = [], a.prototype.setCalledList = function(e) {
        r.indexof(this.calledList, e) === -1 && this.calledList.push(e);
    }, a.prototype.resetCalledList = function() {
        this.calledList = [];
    }, a.prototype.wrap = function(e, t) {
        var n = this, a = this.context || {}, s = a.compose || {}, u = s.maxTimeout || 1e4;
        return function(a) {
            var s, c = e.length, l = 0, p = 0, f = function(g, d) {
                if (l === c) return a = "done", n.resetCalledList(), o(t) && d !== a && t.call(n, a), 
                void clearTimeout(s);
                if (r.indexof(n.calledList, l) === -1) {
                    if (n.setCalledList && n.setCalledList(l), !(e && e[l] && o(e[l][0]))) return;
                    try {
                        a = e[l][0].call(n, a, function() {
                            l++, p = 1, f(l);
                        });
                    } catch (e) {
                        i().w(e);
                    }
                }
                var _ = "number" == typeof a;
                if ("pause" === a || _) {
                    p = 0;
                    var h = _ ? a : u, m = e[l] ? e[l][1] : "";
                    s = setTimeout(function() {
                        0 === p && (i().w("jump the middleware about " + m + ", because waiting timeout maxTimeout = " + h), 
                        a = null, l++, f(l));
                    }, h);
                } else "done" === a ? (l = c, f(l, a)) : (l++, f(l));
            };
            return n.calledList && n.calledList.length > 0 && n.resetCalledList(), f(l);
        };
    }, e.exports = a;
}, function(e, t, n) {
    "use strict";
    var a = n(35), o = n(8);
    e.exports = function() {
        return {
            init: function(e) {
                this.opts = e, e && "object" == typeof e.middleware && e.middleware.length > 0 ? this.middleware = e.middleware : this.middleware = [], 
                this.plugins_name = [];
            },
            pubsubInfo: function(e, t) {
                try {
                    var n = e.pubsub;
                    n && n.publish("plugins_change_" + e.pubsubType, t);
                } catch (e) {
                    o().w(e);
                }
            },
            run: function(e) {
                e || (e = 0);
                var t = this, n = this.middleware, o = this.opts || {}, r = o.plugins;
                if (r && "object" == typeof r && r.length > 0) {
                    var i = r[e];
                    if (this.plugins_name.push(i.name), n.push([ function(e, n) {
                        t.pubsubInfo(this, i);
                        var r = new i.path();
                        return r.init || (r.init = function(e) {
                            this.options = e;
                        }), r.init({
                            context: this.context,
                            config: a(i.config || {}, o.config)
                        }), r.run(e, function(e) {
                            setTimeout(function() {
                                n(i, e);
                            }, 1);
                        });
                    }, i.name ]), e++, r[e]) return this.run(e);
                }
                return n;
            }
        };
    };
}, function(e, t, n) {
    function a(e) {
        var t, n, a, o, r = u.getElementsByTagName("meta");
        for (t = 0, n = r.length; t < n; t++) if (a = r[t], o = a.getAttribute("name"), 
        o === e) return a;
    }
    function o() {
        var e = u.createElement("meta");
        e.setAttribute("name", "data-spm");
        var t = u.getElementsByTagName("head")[0];
        return t && t.insertBefore(e, t.firstChild), e;
    }
    function r() {
        var e = s.getGlobalValue("aplus"), t = a("data-spm"), n = a("spm-id"), r = t || n;
        r || (t = o()), t && t.setAttribute("content", e.spm_ab[0] || ""), n && n.setAttribute("content", (e.spm_ab || []).join("."));
        var i = u.getElementsByTagName("body")[0];
        i && i.setAttribute("data-spm", e.spm_ab[1] || "");
    }
    function i() {
        var e, t, n, a = u.getElementsByTagName("*");
        for (e = 0, t = a.length; e < t; e++) n = a[e], n.getAttribute("data-spm-max-idx") && n.setAttribute("data-spm-max-idx", ""), 
        n.getAttribute("data-spm-anchor-id") && n.setAttribute("data-spm-anchor-id", "");
    }
    var s = n(2), u = document;
    t.resetMetaAndBody = r, t.resetModules = i;
}, function(e, t, n) {
    "use strict";
    function a(e, t, n, a) {
        var o = window || {}, r = new Image(), i = "_img_" + Math.random();
        o[i] = r;
        var s = function() {
            if (o[i]) try {
                delete o[i];
            } catch (e) {
                o[i] = void 0;
            }
        };
        return r.onload = function() {
            s(), n && n();
        }, r.onerror = function() {
            s(), a && a();
        }, setTimeout(function() {
            window[i] && (window[i].src = "", s());
        }, t || 5e3), r.src = e, r = null, e;
    }
    var o = n(125), r = n(40);
    t.sendImgCore = a, t.sendImg = function(e, t) {
        var n = function() {
            r.log("日志上报成功！");
        }, i = function() {
            o.toDynamicsNetwork();
        };
        a(e, t, n, i);
    }, t.postData = function(e, t) {
        return navigator.sendBeacon(e, t), e;
    };
}, function(e, t, n) {
    "use strict";
    function a(e, t) {
        if ("dynamics" === t) {
            var n = [ "gm.mmstat.com", "wgo.mmstat.com" ];
            return n.indexOf(e) > -1 ? "d-" + e : e;
        }
    }
    function o(e) {
        function t() {
            var e = r.getGlobalValue("aplus"), t = e.getMetaInfo("aplus-rhost-g"), n = a(t, o);
            n !== t && e.setMetaInfo("aplus-rhost-g", n);
        }
        e = e || {};
        var n = e.maxCount || 1, o = e.networkType || "static", s = e.directSwitch || !1, u = 0;
        return function(e) {
            e = e || s, e ? t() : (++u, u >= n && (i.logger({
                lever: "warn",
                msg: "日志上报失败，注意，要切成动态网络啦!"
            }), t(), u = 0));
        };
    }
    var r = n(2), i = n(40);
    t.toDynamicsNetwork = o({
        maxCount: 1,
        networkType: "dynamics",
        directSwitch: !1
    });
}, function(e, t, n) {
    "use strict";
    function a() {
        var e, t = i.getGlobalValue("aplus");
        try {
            var n = t.getMetaInfo("aplus-disable-pvid") + "";
            "true" === n ? e = !0 : "false" === n && (e = !1);
        } catch (e) {}
        return e;
    }
    function o() {
        var e = i.getGlobalValue("aplus");
        return a() ? "" : e.pvid;
    }
    var r = n(42), i = n(2), s = n(97);
    t.isDisablePvid = a, t.makePVId = function() {
        var e = i.getGlobalValue("aplus"), t = e.pvid, n = location && location.href, u = document && document.title;
        e.pvid = s.getLogId(n, u), e.getPvId = o;
        var c = [ "pvidChange", {
            pre_pvid: t,
            pvid: e.pvid
        } ];
        return r.doPubMsg(c), r.doCachePubs(c), a() ? "" : e.pvid;
    }, t.getPvId = o;
}, function(e, t, n) {
    var a = n(13), o = n(102), r = n(38), i = n(35), s = n(88), u = n(49), c = n(3), l = n(128), p = n(39);
    e.exports = function() {
        return {
            ABFPC: "_abfpc",
            CNA: "cna",
            VERSION: "2.0",
            gl: "",
            canvas: "",
            writeCookie: function(e, t) {
                try {
                    var n = new Date();
                    n.setTime(n.getTime() + 31536e6), s.setCookie(e, t, {
                        SameSite: !0,
                        expires: "expires=" + n.toString()
                    });
                } catch (e) {
                    console.log(e);
                }
            },
            trySyncFp: function() {
                var e = this.tryGetStoreValue(this.ABFPC);
                this.syncLS2Cookie(this.ABFPC, e);
            },
            tryGetStoreValue: function(e) {
                var t = r.get(e), n = s.getCookie(e);
                return {
                    LSValue: t,
                    cookieValue: n
                };
            },
            getClientInfo: function() {
                var e = {};
                try {
                    e = goldlog ? goldlog._aplus_client : {};
                } catch (e) {}
                return e;
            },
            hasUsableSWF: function() {
                var e;
                try {
                    e = "undefined" != typeof window.ActiveXObject ? new ActiveXObject("ShockwaveFlash.ShockwaveFlash") : navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                return e ? "true" : "false";
            },
            getCanvas: function() {
                try {
                    this.canvas || (this.canvas = document.createElement("canvas"));
                } catch (e) {}
                return this.canvas;
            },
            getWebGl: function() {
                try {
                    var e = this.getCanvas();
                    !this.gl && e && (this.gl = window.WebGLRenderingContext && (e.getContext("webgl") || e.getContext("experimental-webgl")));
                } catch (e) {}
                return this.gl;
            },
            initUint8ArrayHashCode2: function() {
                Uint8Array.prototype.hashCode2 || (Uint8Array.prototype.hashCode2 = function() {
                    var e, t, n, a = 0;
                    if (0 === this.length) return a;
                    for (e = 0, n = this.length; e < n; e++) t = this[e], a = (a << 5) - a + t, a |= 0;
                    return a;
                });
            },
            getWebGlPrinting: function() {
                var e = this.getWebGl();
                if (e) try {
                    this.initUint8ArrayHashCode2();
                    var t, n, a = e.getExtension("WEBGL_debug_renderer_info");
                    return a ? (t = e.getParameter(a.UNMASKED_VENDOR_WEBGL), n = e.getParameter(a.UNMASKED_RENDERER_WEBGL)) : (t = "No debug Info", 
                    n = "No debug Info"), {
                        myGl: e,
                        ven: t,
                        ren: n
                    };
                } catch (e) {}
            },
            getResolution: function() {
                var e = 1, t = screen.width * e, n = screen.height * e, a = screen.colorDepth + "_" + Math.round(t) + "_" + Math.round(n) + "_" + e + "_" + screen.width + "_" + screen.height + "_" + screen.colorDepth;
                return a;
            },
            generateWebGlPrint: function() {
                var e = "", t = this.getWebGl();
                if (t) {
                    try {
                        var n = "attribute vec2 attrVertex;varying vec2 varyinTexCoordinate;uniform vec2 uniformOffset;void main(){varyinTexCoordinate=attrVertex+uniformOffset;gl_Position=vec4(attrVertex,0,1);}", a = "precision mediump float;varying vec2 varyinTexCoordinate;void main() {gl_FragColor=vec4(varyinTexCoordinate,0,1);}", o = t.createBuffer();
                        t.bindBuffer(t.ARRAY_BUFFER, o);
                        var r = new Float32Array([ -.2, -.9, 0, .4, -.26, 0, 0, .732134444, 0 ]);
                        t.bufferData(t.ARRAY_BUFFER, r, t.STATIC_DRAW), o.itemSize = 3, o.numItems = 3;
                        var i = t.createProgram(), s = t.createShader(t.VERTEX_SHADER);
                        t.shaderSource(s, n), t.compileShader(s);
                        var u = t.createShader(t.FRAGMENT_SHADER);
                        t.shaderSource(u, a), t.compileShader(u), t.attachShader(i, s), t.attachShader(i, u), 
                        t.linkProgram(i), t.useProgram(i), i.vertexPosAttrib = t.getAttribLocation(i, "attrVertex"), 
                        i.offsetUniform = t.getUniformLocation(i, "uniformOffset"), t.enableVertexAttribArray(i.vertexPosArray), 
                        t.vertexAttribPointer(i.vertexPosAttrib, o.itemSize, t.FLOAT, !1, 0, 0), t.uniform2f(i.offsetUniform, 1, 1), 
                        t.drawArrays(t.TRIANGLE_STRIP, 0, o.numItems), e = t.canvas.toDataURL();
                    } catch (e) {}
                    return e;
                }
            },
            audioFingerPrinting: function() {
                try {
                    var e = new (window.AudioContext || window.webkitAudioContext)(), t = e.destination;
                    return e.sampleRate.toString() + "_" + t.maxChannelCount + "_" + t.numberOfInputs + "_" + t.numberOfOutputs + "_" + t.channelCount + "_" + t.channelCountMode + "_" + t.channelInterpretation;
                } catch (e) {
                    return "not supported";
                }
            },
            getPluginsPrinting: function() {
                var e = "";
                if (navigator && navigator.plugins) {
                    for (var t = navigator.plugins.length, n = 0; n < t; n++) e += navigator.plugins[n].name + "_";
                    e = e.replace(/[^a-zA-Z ]/g, "");
                }
                return e;
            },
            checkIsTouch: function() {
                try {
                    return "ontouchend" in document.createElement("div") ? "true" : "false";
                } catch (e) {}
            },
            generateFp: function() {
                var e = this.getWebGlPrinting() || {}, t = s.getData(), n = o.getExparamsInfos(), a = aplus.getMetaInfo("_user_id") || aplus.getMetaInfo("_dev_id") || aplus.getMetaInfo("_anony_id"), u = n.uidaplus || new Date().getTime(), c = l.getCanvasHash(), p = i(this.getClientInfo(), {
                    WebGL: this.gl ? "true" : "false",
                    webglPrint: this.generateWebGlPrint(),
                    adBlock: "No",
                    audio: this.audioFingerPrinting(),
                    cookieEnabled: navigator ? !!navigator.cookieEnabled : "false",
                    cpu_cores: navigator && navigator.hardwareConcurrency ? navigator.hardwareConcurrency : -1,
                    fontlist: this.hasUsableSWF(),
                    gpu: e.ren,
                    hash: e.hash,
                    inc: e.inc,
                    isSupportLS: r.test() ? "true" : "false",
                    plugins: this.getPluginsPrinting(),
                    resolution: this.getResolution(),
                    timezone: -new Date().getTimezoneOffset() / 60,
                    isTouch: this.checkIsTouch(),
                    lang: navigator ? navigator.language : "",
                    tracknick: t.tracknick || n.pu_i || a || u
                }), f = [ c ];
                for (var g in p) p[g] && f.push(p[g]);
                var d = l.calcSHA1(f.join("_")) + "_" + this.VERSION;
                return r.set(this.ABFPC, d), this.writeCookie(this.ABFPC, d), d;
            },
            syncCNA: function(e, t) {
                var n = u.loadScript, a = aplus.getMetaInfo("aplus-rhost-v");
                a = p.fixDomain(a), a && n(a + "/pbe.js?_abfpc=" + e, t);
            },
            syncLS2Cookie: function(e, t) {
                var n = t.LSValue, a = t.cookieValue;
                n && n !== a && this.writeCookie(e, n), a && !n && r.set(e, a);
            },
            updateGlobalData: function(e) {
                e && e._abfpc && (e._abfpc = e._abfpc.replace("_" + this.VERSION, "")), aplus.appendMetaInfo("aplus-globaldata", e);
            },
            run: function() {
                var e = this, t = e.tryGetStoreValue(e.ABFPC), n = e.tryGetStoreValue(e.CNA);
                e.syncLS2Cookie(this.ABFPC, t), e.syncLS2Cookie(this.CNA, n);
                var o = t.LSValue || t.cookieValue, i = n.LSValue || n.cookieValue;
                if (o || (o = e.generateFp()), o = o.replace("_" + e.VERSION, ""), o && aplus && aplus.appendMetaInfo) {
                    var s = {
                        _abfpc: o
                    };
                    i && (s.cna = i), e.updateGlobalData(s);
                }
                a.on(window, "beforeunload", function() {
                    e.trySyncFp();
                }), i || setTimeout(function() {
                    aplus_queue.push({
                        action: c.SUBSCRIBE,
                        arguments: [ "aplusReady", function(t) {
                            "complete" === t && e.syncCNA(o, function() {
                                var t = goldlog.cna;
                                t && (e.updateGlobalData({
                                    _abfpc: o,
                                    cna: t
                                }), r.set(e.CNA, t), e.writeCookie(e.CNA, t));
                            });
                        } ]
                    });
                }, 300);
            }
        };
    };
}, function(e, t) {
    function n(e) {
        for (var t = "", n = 7; n >= 0; n--) t += c.charAt(e >> 4 * n & 15);
        return t;
    }
    function a(e) {
        for (var t = (e.length + 8 >> 6) + 1, n = new Array(16 * t), a = 0; a < 16 * t; a++) n[a] = 0;
        var o;
        for (o = 0; o < e.length; o++) n[o >> 2] |= e.charCodeAt(o) << 24 - o % 4 * 8;
        return n[o >> 2] |= 128 << 24 - o % 4 * 8, n[16 * t - 1] = 8 * e.length, n;
    }
    function o(e, t) {
        var n = (65535 & e) + (65535 & t), a = (e >> 16) + (t >> 16) + (n >> 16);
        return a << 16 | 65535 & n;
    }
    function r(e, t) {
        return e << t | e >>> 32 - t;
    }
    function i(e, t, n, a) {
        return e < 20 ? t & n | ~t & a : e < 40 ? t ^ n ^ a : e < 60 ? t & n | t & a | n & a : t ^ n ^ a;
    }
    function s(e) {
        return e < 20 ? 1518500249 : e < 40 ? 1859775393 : e < 60 ? -1894007588 : -899497514;
    }
    function u(e) {
        for (var t = a(e), u = new Array(80), c = 1732584193, p = -271733879, f = -1732584194, g = 271733878, d = -1009589776, _ = 0; _ < t.length; _ += 16) {
            for (var h = c, m = p, v = f, y = g, b = d, w = 0; w < 80; w++) {
                w < 16 ? u[w] = t[_ + w] : u[w] = r(u[w - 3] ^ u[w - 8] ^ u[w - 14] ^ u[w - 16], 1);
                var A = o(o(r(c, 5), i(w, p, f, g)), o(o(d, u[w]), s(w)));
                d = g, g = f, f = r(p, 30), p = c, c = A;
            }
            c = o(c, h), p = o(p, m), f = o(f, v), g = o(g, y), d = o(d, b);
        }
        return l(n(c) + n(p) + n(f) + n(g) + n(d));
    }
    var c = "0123456789abcdef", l = function(e) {
        return e.replace(/\+/g, "-").replace(/\//g, "_").replace(/\=+$/, "");
    }, p = function() {
        var e = "Not supported";
        try {
            var t = document.createElement("canvas"), n = t.getContext("2d");
            t.style.display = "inline", n.textBaseline = "alphabetic", n.fillStyle = "#f60", 
            n.fillRect(125, 1, 62, 20), n.fillStyle = "#069", n.font = "11pt no-real-font-123", 
            n.fillText("Cwm fjordbank glyphs vext quiz, 😃", 2, 15), n.fillStyle = "rgba(102, 204, 0, 0.7)", 
            n.font = "18pt Arial", n.fillText("Cwm fjordbank glyphs vext quiz, 😃", 4, 45), 
            e = t.toDataURL();
        } catch (e) {}
        return e;
    };
    t.calcSHA1 = u, t.getCanvasHash = function() {
        var e;
        e || (e = p());
        var t = u(e);
        return l(t);
    };
}, function(e, t, n) {
    "use strict";
    var a = n(130), o = n(2);
    e.exports = function() {
        return {
            run: function() {
                var e = this.options.context.aplus_config, t = e.globalConfig.APLUS_QUEUE, n = o.getContext(), r = n[t] || [], i = a.getFormatQueue(r, "metaQueue");
                n[t] = i.queue, a.processGoldlogQueue(i.formatQueue, this.options.config);
            }
        };
    };
}, function(e, t, n) {
    function a() {
        var e = u.getGoldlogVal("_$") || {}, t = e.meta_info;
        return t;
    }
    function o() {
        var e = a() || {}, t = e.uaid + "";
        return "1" !== t || e._anony_id ? e._hold || e["aplus-waiting"] : "BLOCK";
    }
    function r(e) {
        var t = o(), n = a() || {}, r = !0, i = e.arguments || [], s = i[0], u = i[1], c = "START";
        if ("_hold" === s && u === c) return c;
        if ("_anony_id" === s && u) return c;
        if (e && /sendPV|record|setPageSPM|setMetaInfo|appendMetaInfo$/.test(e.action)) switch (t) {
          case "BLOCK":
            n[t] || (h.push(e), r = !1);
        }
        return r;
    }
    function i(e) {
        g(d, e), g(_, e), g(h, e);
    }
    function s(e, t) {
        return t && f.openAPIs.indexOf(e) > -1 && (e = "_" + e), e;
    }
    var u = n(2), c = n(48), l = n(20), p = n(8), f = n(3), g = function(e, t) {
        function n() {
            if (e && c.isArray(e) && e.length) {
                for (var n = v(e).queue, a = {}, o = []; a = n.shift(); ) m(a, t, function(e) {
                    o.push(e);
                });
                o.length > 0 && setTimeout(function() {
                    for (;a = o.shift(); ) m(a, t);
                }, 100);
            }
        }
        try {
            n();
        } catch (e) {
            p().w(e);
        }
    };
    t.processGoldlogQueue = g;
    var d = [], _ = [], h = [];
    t.subscribeAndProcessQueue = function(e, t) {
        var n = u.getGlobalValue(e);
        n.push({
            action: f.SUBSCRIBE,
            arguments: [ f.SET_META_INFO, function(e, n) {
                e === f._USER_ID && n ? g(d, t) : e === f._ANONY_ID && n ? g(_, t) : "_hold" === e && "START" === n && i(t);
            } ]
        });
    };
    var m = function(e, t, n) {
        var a = !!t.isOpenApi, o = e ? e.action : "", f = e ? e.arguments : "", g = r(e);
        if (g) {
            var d = u.getContext();
            try {
                if (o && f && c.isArray(f)) {
                    var _, h = o.split("."), m = d, v = d;
                    if (3 === h.length) m = d[h[0]][h[1]] || {}, _ = s(h[2], a), v = m[_] ? m[_] : ""; else for (;h.length; ) if (_ = s(h.shift(), a), 
                    v = m = m[_], !m) return void (l(n) && n(e));
                    l(v) && v.apply(m, f), "START" === g && i(t);
                }
            } catch (e) {
                p().w(e);
            }
        }
    };
    t.processTask = m;
    var v = function(e, t) {
        for (var n = {
            subscribeMwChangeQueue: [],
            subscribeMetaQueue: [],
            subscribeQueue: [],
            metaQueue: [],
            othersQueue: []
        }, a = [], o = {}; o = e.shift(); ) try {
            var r = o.action, i = o.arguments[0];
            /subscribe/.test(r) ? "setMetaInfo" === i ? n.subscribeMetaQueue.push(o) : i === f.MW_CHANGE_PV || i === f.MW_CHANGE_HJLJ ? n.subscribeMwChangeQueue.push(o) : n.subscribeQueue.push(o) : /MetaInfo/.test(r) ? n.metaQueue.push(o) : n.othersQueue.push(o);
        } catch (e) {
            p().w(e), n.othersQueue.push(o);
        }
        var s;
        return t && n[t] && (s = n[t], n[t] = []), a = n.subscribeMwChangeQueue.concat(n.metaQueue), 
        a = a.concat(n.subscribeQueue), a = a.concat(n.subscribeMetaQueue, n.othersQueue), 
        {
            queue: a,
            formatQueue: s
        };
    };
    t.getFormatQueue = v;
}, function(e, t, n) {
    "use strict";
    function a(e) {
        var t = e.Promise, n = e.document, a = e.navigator.userAgent, r = /Windows\sPhone\s(?:OS\s)?[\d\.]+/i.test(a) || /Windows\sNT\s[\d\.]+/i.test(a), i = /iPhone|iPad|iPod/i.test(a), s = /Android/i.test(a), u = Math.floor(65536 * Math.random()), c = 1, l = [], p = 3, f = "iframe_", g = "param_", d = 6e5, _ = 6e4, h = {
            trace: function(e, t, n, a, o) {
                return h.call(e, t, n, a, o);
            },
            call: function(e, n, a, o, r) {
                var i, s;
                "number" == typeof arguments[arguments.length - 1] && (r = arguments[arguments.length - 1]), 
                "function" != typeof a && (a = null), !t || a || o || (s = new t(function(e, t) {
                    a = e, o = t;
                })), i = m.getSid();
                var u = {
                    success: a,
                    failure: o
                };
                return r > 0 && (u.timeout = setTimeout(function() {
                    h.onFailure(i, {
                        ret: "HY_TIMEOUT"
                    });
                }, r)), m.registerCall(i, u), m.registerGC(i, r), m.evokeNative(e, n, i), s;
            },
            fireEvent: function(e, t) {
                var a = n.createElement("HTMLEvents");
                a.initEvent(e, !1, !0), a.param = m.parseData(t), n.dispatchEvent(a);
            },
            getParam: function(e) {
                return m.getParam(e);
            },
            find: function(e, t) {
                t || m.unregisterCall(e, !1);
            },
            onSuccess: function(e, t, n) {
                m.onComplete(e, t, "success", n);
            },
            onFailure: function(e, t) {
                m.onComplete(e, t, "failure");
            }
        }, m = {
            params: {},
            calls: {},
            getSid: function() {
                return (u + c++) % 65536 + "";
            },
            buildParam: function(e) {
                return e && "object" == typeof e ? JSON.stringify(e) : e || "";
            },
            getParam: function(e) {
                return this.params[g + e] || "";
            },
            setParam: function(e, t) {
                this.params[g + e] = t;
            },
            parseData: function(e) {
                var t;
                if (e && "string" == typeof e) try {
                    t = JSON.parse(e);
                } catch (n) {
                    t = {
                        ret: "HY_RESULT_PARSE_ERROR",
                        originValue: e
                    };
                } else t = e || {};
                return t;
            },
            registerCall: function(e, t) {
                this.calls[e] = t;
            },
            unregisterCall: function(e, t) {
                var n = this.calls[e] || {}, a = n.timeout;
                return a && clearTimeout(a), t || delete this.calls[e], n;
            },
            useIframe: function(e, t) {
                var a = f + e, o = l.pop();
                o || (o = n.createElement("iframe"), o.setAttribute("frameborder", "0"), o.style.cssText = "width:0;height:0;border:0;display:none;"), 
                o.setAttribute("id", a), o.setAttribute("src", t), o.parentNode || setTimeout(function() {
                    n.body.appendChild(o);
                }, 5);
            },
            retrieveIframe: function(e) {
                var t = f + e, a = n.querySelector("#" + t);
                if (a) if (l.length >= p) try {
                    n.body.removeChild(a);
                } catch (e) {} else l.indexOf(a) < 0 && l.push(a);
            },
            evokeNative: function(e, t, n) {
                var a = {
                    className: "Umeng4Aplus",
                    methodName: e,
                    sid: n,
                    callback: "",
                    params: t
                }, u = JSON.stringify(a);
                o().i("Umeng4AplusFlutter ===== ", window.Umeng4AplusFlutter), r ? o().w("jsbridge not support windows os devices.") : i ? window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.Umeng4Aplus && window.webkit.messageHandlers.Umeng4Aplus.postMessage ? (o().i("jsbridge native logs: " + u), 
                window.webkit.messageHandlers.Umeng4Aplus.postMessage(u)) : window.Umeng4AplusFlutter ? window.Umeng4AplusFlutter.postMessage(u) : o().w("jsbridge iOS environment invalid") : s && (window.Umeng4Aplus ? window.Umeng4Aplus.CALL ? (o().i("jsbridge native logs: " + u), 
                window.Umeng4Aplus.CALL(u)) : window.Umeng4Aplus.call ? (o().i("jsbridge native hamonyos logs: " + u), 
                window.Umeng4Aplus.call(u)) : o().w("jsbridge Android environment error, Umeng4Aplus exists, but method not found") : window.Umeng4AplusFlutter ? window.Umeng4AplusFlutter.postMessage(u) : o().w("jsbridge Android environment invalid"));
            },
            registerGC: function(e, t) {
                var n = this, a = Math.max(t || 0, d), o = Math.max(t || 0, _);
                setTimeout(function() {
                    n.unregisterCall(e);
                }, a), i && setTimeout(function() {
                    n.params[g + e] && delete n.params[g + e];
                }, o);
            },
            onComplete: function(e, t, n, a) {
                var o = this.unregisterCall(e, a), r = o.success, s = o.failure;
                t = this.parseData(t);
                var u = t.ret;
                "string" == typeof u && (t = t.value || t, t.ret || (t.ret = [ u ])), "success" === n ? r && r(t) : "failure" === n && s && s(t), 
                i && (this.retrieveIframe(e), this.params[g + e] && delete this.params[g + e]);
            }
        };
        return h;
    }
    var o = n(8);
    e.exports = function() {
        return {
            subscribeLogs: function(e, t) {
                aplus.aplus_pubsub.subscribe(e, function(e) {
                    "complete" === e.status && t(e);
                });
            },
            isJsBridgeReady: function() {
                return window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.Umeng4Aplus && window.webkit.messageHandlers.Umeng4Aplus || window.Umeng4Aplus;
            },
            callUT: function(e, t) {
                t._bridgeName = this.options.bridgeName || "AtmBridge", t._bridgeVersion = this.options.bridgeVersion || "1.0.0";
                try {
                    window.AtmBridge.trace(e, t, function(e) {
                        o().i("SUCCESS:", e);
                    }, function(e) {
                        o().w("FAILURE:", e);
                    });
                } catch (e) {
                    o().w(e);
                }
            },
            callMergeToNativeGP: function(e, t) {
                o().i("current bridge gp: " + JSON.stringify(t));
            },
            watchLOG: function() {
                var e = this;
                e.subscribeLogs("mw_change_pv", function(t) {
                    var n = t.what_to_send || {}, a = n.pvdataToUmNative || {};
                    e.callUT("sendPV", a);
                }), e.subscribeLogs("mw_change_hjlj", function(t) {
                    var n = t.what_to_send || {}, a = n.hjljdataToUmNative || {};
                    e.callUT("sendEvent", a);
                });
            },
            run: function() {
                if (!window.AtmBridge) {
                    var e = a(window);
                    window.AtmBridge = e;
                }
                window.AtmBridge && this.watchLOG();
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(21), o = n(2), r = n(130), i = a.extend({
        push: function(e) {
            this.length++, r.processTask(e, this.opts);
        }
    });
    e.exports = function() {
        return {
            processAplusQueue: function(e) {
                var t = this.options.config || {}, n = o.getGlobalValue(e);
                r.processGoldlogQueue(n, t), o.setGlobalValue(e, i.create({
                    opts: t,
                    startLength: n.length,
                    length: 0
                }));
            },
            run: function() {
                var e = this.options.context.aplus_config, t = e.globalConfig.APLUS_QUEUE;
                this.processAplusQueue(t), "aplus_queue" === t && this.processAplusQueue("goldlog_queue"), 
                r.subscribeAndProcessQueue(t, this.options.config);
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(10), o = n(49), r = n(48);
    e.exports = function() {
        return {
            init: function(e) {
                this.options = e;
            },
            addStyle: function(e, t) {
                var n = e + "_style", a = document.getElementById(n);
                a || (a = document.createElement("link"), a.id = n, a.href = t, a.rel = "stylesheet", 
                a.type = "text/css", document.getElementsByTagName("head").item(0).appendChild(a));
            },
            run: function() {
                var e = this, t = parent !== self, n = this.options.config || {};
                !t && n.urlRules && a(n.urlRules, function(t) {
                    var n, i = new RegExp(t.rule);
                    try {
                        n = t.id ? window.sessionStorage.getItem(t.id) : "";
                    } catch (e) {}
                    if (i.test(location.href) || n) {
                        try {
                            window.sessionStorage.setItem(t.id, !0);
                        } catch (e) {}
                        r.isArray(t.cdnPath) ? a(t.cdnPath, function(n) {
                            /\.css$/.test(n) ? e.addStyle(t.id, n) : /\.js/.test(n) && o.addScript(n);
                        }) : o.addScript(t.cdnPath);
                    }
                });
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    e.exports = function() {
        return {
            run: function() {
                aplus._aplus_vt_cfg || n(135)();
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    function a() {
        var e = window.aplus_queue || (window.aplus_queue = []);
        e.push({
            action: "aplus.sendPV",
            arguments: [ {
                is_auto: !1,
                track_type: "1"
            }, {} ]
        });
    }
    function o() {
        var e = i.getGlobalValue(s.APLUS), t = e && e.getMetaInfo("pageConfig");
        if (t) if (t.hashMode) {
            var n = location.hash;
            t[n] ? t[n].skipMe || a() : a();
        } else {
            var o = location.pathname;
            t[o] ? t[o].skipMe || a() : a();
        } else a();
    }
    function r() {
        aplus._aplus_apv ? aplus._aplus_apv = {
            status: "complete"
        } : o();
    }
    var i = n(2), s = n(3), u = n(26);
    e.exports = function() {
        r(), u.watchHistoryChange(o), u.watchHashChange(o);
    };
}, function(e, t, n) {
    "use strict";
    e.exports = function() {
        return {
            run: function() {
                n(137)();
            }
        };
    };
}, function(e, t, n) {
    function a() {
        var e = [], t = aplus.getMetaInfo(l.APLUS_AUTOTRACK_CONFIG);
        return t && t.collect_tags && g.isObject(t.collect_tags) && _(t.collect_tags, function(t, n) {
            n && e.push(t);
        }), e;
    }
    function o() {
        return aplus.getMetaInfo(l.APLUS_AUTOTRACK_CONFIG_REMOTE) || [];
    }
    function r(e) {
        var t = e;
        if ("object" != typeof t) return null;
        if ("string" != typeof t.tagName) return null;
        var n = t.tagName.toLowerCase();
        if ("body" === n.toLowerCase() || "html" === n.toLowerCase()) return null;
        if (!t || !t.parentNode || !t.parentNode.children) return null;
        var r = t.parentNode, i = a(), s = o();
        if (p.hasAttribute(e, "aplus-autotrack-off")) return null;
        if (!(s.length > 0 && d.indexof(s, n) > -1)) {
            if ("a" === n || "button" === n || "input" === n || "textarea" === n) return t;
            if ("button" === r.tagName.toLowerCase() || "a" === r.tagName.toLowerCase()) return r;
            if (d.indexof(i, n) > -1) return t;
            var u = p.getPrev(r);
            return "area" === n && "map" === r.tagName.toLowerCase() && u.tagName && "img" === u.tagName.toLowerCase() ? u : null;
        }
    }
    function i(e) {
        try {
            var t = window.aplus_queue || (window.aplus_queue = []), n = null;
            e["clk-logkey"] && (n = e["clk-logkey"], delete e["clk-logkey"]);
            var a, o = v.hash(y.getAppKey()) + v.hash(e.ap.element_selector, y.getAppKey());
            a = n || o, t.push({
                action: "aplus.record",
                arguments: [ a, "CLK", e || {} ]
            });
        } catch (e) {
            h().w("autotrack event send failed, e=", e);
        }
    }
    function s(e) {
        var t = {
            is_auto: 1,
            auto_element: 1
        };
        try {
            if (e && e.hasAttributes) for (var n = e.attributes, a = 0; a < n.length; a++) {
                var o = n[a].name || "", r = n[a].value;
                if (o && o.indexOf("data-") > -1) {
                    var i = o.toLowerCase().replace(/^data-/, "");
                    t[i] = encodeURIComponent(r);
                }
            }
        } catch (e) {
            h().w(e && e.message);
        }
        return t;
    }
    function u(e) {
        var t = s(e);
        return e && (t = m(t, {
            ap: {
                element_type: e.tagName.toLowerCase(),
                element_name: e.getAttribute && e.getAttribute("name") || "",
                element_id: e.getAttribute && e.getAttribute("id") || "",
                element_class_name: "string" == typeof e.className ? e.className : "",
                element_content: p.getElementContent(e, e.tagName) || "",
                element_selector: p.getDomSelector(e) || "",
                element_path: p.getElementPath(e)
            }
        })), t;
    }
    function c() {
        function e(e) {
            if (!e) return !1;
            var t = e.target, n = r(t);
            n && i(u(n));
        }
        f.addHandler(document, f.clickEvent(), e), document.addEventListener("unload", function() {
            f.removeHandler(document, f.clickEvent(), e);
        }, !1);
    }
    var l = n(3), p = n(138), f = n(139), g = n(140), d = n(48), _ = n(50), h = n(8), m = n(35), v = n(53), y = n(39);
    e.exports = function() {
        var e = window.aplus || (window.aplus = {});
        e._autotracked_enable || (e._autotracked_enable = !0, c());
    };
}, function(e, t, n) {
    function a(e, t) {
        return e && e[t] ? e[t].toLowerCase() : "";
    }
    function o(e) {
        return e && e.id && /^[A-Za-z][-A-Za-z0-9_:.]*$/.test(e.id);
    }
    function r(e) {
        var t = [];
        if (!e) return "";
        for (;e.parentNode; ) {
            if (o(e)) {
                t.unshift(a(e, "tagName") + "#" + e.id);
                break;
            }
            if (e === document.body) {
                t.unshift("body");
                break;
            }
            e.tagName && e.tagName.toLowerCase && (t.unshift(a(e, "tagName")), e = e.parentNode);
        }
        return t.join(" > ");
    }
    function i(e) {
        return e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    }
    t.siblings = function(e, t) {
        return "nextSibling" === t ? e.nextSibling : "previousSibling" === t ? e.previousSibling : null;
    }, t.sibling = function(e, t) {
        for (;(e = e[t]) && 1 !== e.nodeType; ) ;
        return e;
    }, t.previousElementSibling = function(e) {
        var t = e;
        if ("previousElementSibling" in document.documentElement) return this.getPrev(t);
        for (;t.previousSibling; ) if (t = t.previousSibling, 1 === t.nodeType) return t;
        return null;
    }, t.getSameTypeSiblings = function(e) {
        for (var t = e, n = t.parentNode, o = a(t, "tagName"), r = [], i = 0; i < n.children.length; ) {
            var s = n.children[i];
            1 === s.nodeType && o && a(s, "tagName") === o && r.push(n.children[i]), i++;
        }
        return r;
    }, t.getNext = function(e) {
        return this.sibling(e, "nextSibling");
    }, t.getPrev = function(e) {
        return this.sibling(e, "previousSibling");
    }, t.indexOf = function(e, t) {
        var n = e.indexOf;
        if (n) return n.call(e, t);
        for (var a = 0; a < e.length; a++) if (t === e[a]) return a;
        return -1;
    }, t.getClosestLi = function(e) {
        return function(e, t) {
            for (;e && e !== document && 1 === e.nodeType; e = e.parentNode) if (a(e, "tagName") === t) return e;
            return null;
        }(e, "li");
    }, t.getElementPath = r, t.getDomIndex = function(e) {
        if (!e.parentNode) return -1;
        for (var t = 0, n = a(e, "tagName"), o = e.parentNode.children, r = 0; r < o.length; ) {
            if (n && a(o[r], "tagName") === n) {
                if (e === o[r]) return t;
                t++;
            }
            r++;
        }
        return -1;
    }, t.selector = function(e) {
        var t = e.parentNode && 9 === e.parentNode.nodeType ? -1 : this.getDomIndex(e);
        return e.getAttribute && e.getAttribute("id") && /^[A-Za-z][-A-Za-z0-9_:.]*$/.test(e.getAttribute("id")) ? "#" + e.getAttribute("id") : a(e, "tagName") + (~t ? ":nth-of-type(" + (t + 1) + ")" : "");
    }, t.getDomSelector = function(e, t) {
        if (!e || !e.parentNode || !e.parentNode.children) return null;
        t = t && t.join ? t : [];
        var n = a(e, "nodeName");
        return "body" !== n && 1 === e.nodeType ? (t.unshift(this.selector(e)), e.getAttribute && e.getAttribute("id") && /^[A-Za-z][-A-Za-z0-9_:.]*$/.test(e.getAttribute("id")) ? t.join(" > ") : this.getDomSelector(e.parentNode, t)) : (t.unshift("body"), 
        t.join(" > "));
    };
    var s = n(48);
    t.hasAttributes = function(e, t) {
        if ("string" == typeof t) return this.hasAttribute(e, t);
        if (s.isArray(t)) {
            for (var n = !1, a = 0; a < t.length; a++) if (this.hasAttribute(e, t[a])) {
                n = !0;
                break;
            }
            return n;
        }
    }, t.hasAttribute = function(e, t) {
        if ("aplus-autotrack-off" === t) {
            for (var n = e, a = !1; n; ) {
                if (n.hasAttribute && n.hasAttribute(t)) {
                    a = "true" === n.getAttribute(t);
                    break;
                }
                n = n.parentNode;
            }
            return a;
        }
        return e.hasAttribute ? e.hasAttribute(t) : !(!e.attributes[t] || !e.attributes[t].specified);
    }, t.getElementContent = function(e, t) {
        var a = "";
        if (e.textContent) a = i(e.textContent); else if (e.innerText) a = i(e.innerText); else if ("input" === t || "INPUT" === t) {
            var o = n(3), r = aplus.getMetaInfo(o.APLUS_AUTOTRACK_CONFIG);
            r.collect_input && (a = encodeURIComponent(e.value) || "");
        } else "button" !== e.type && "submit" !== e.type || (a = e.value || "");
        return a && (a = a.replace(/[\r\n]/g, " ").replace(/[ ]+/g, " ").substring(0, 255)), 
        a;
    };
}, function(e, t, n) {
    var a = n(3);
    e.exports = {
        addHandler: function(e, t, n) {
            if (e.addEventListener) {
                var o = window.aplus || (window.aplus = {}), r = o.getMetaInfo(a.APLUS_AUTOTRACK_CONFIG) || {};
                e.addEventListener(t, n, !!r.element_capture_enable || !1);
            } else e.attachEvent ? e.attachEvent("on" + t, n) : e["on" + t] = n;
        },
        removeHandler: function(e, t, n) {
            e.removeEventListener ? e.removeEventListener(t, n, !1) : e.detachEvent ? e.detachEvent("on" + t, n) : e["on" + t] = null;
        },
        clickEvent: function() {
            return "ontouchstart" in document.documentElement == !0 ? "touchstart" : "click";
        }
    };
}, function(e, t) {
    t.isObject = function(e) {
        return null !== e && "[object Object]" === Object.prototype.toString.call(e);
    }, t.isEmptyObject = function(e) {
        if (this.isObject(e)) for (var t in e) if (Object.prototype.hasOwnProperty.call(e, t)) return !1;
        return !0;
    };
}, function(e, t, n) {
    "use strict";
    e.exports = function() {
        return {
            run: function() {
                var e = window.aplus || (window.aplus = {});
                e._aplus_plugin_xwj || (e._aplus_plugin_xwj = {
                    status: "init"
                }, n(142)());
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    function a() {
        function e() {
            for (var e = I.split("&"), t = {}, n = 0; n < e.length; n++) {
                var a = e[n], o = a.split("=");
                t[o[0]] = o[1];
            }
            return t;
        }
        function t(e, t) {
            return e && e.getAttribute ? e.getAttribute(t) || "" : "";
        }
        function a() {
            return g = g || r.getElementsByTagName("head")[0], d || (g ? d = g.getElementsByTagName("meta") : []);
        }
        function s(e) {
            var n, o, r, i = a(), s = i.length;
            for (n = 0; n < s; n++) if (o = i[n], t(o, "name") === e) {
                r = t(o, "content");
                break;
            }
            return r;
        }
        function u() {
            return s("ahot-aplus");
        }
        function c() {
            var e = n(2), t = e.getGlobalValue("aplus");
            return s("aplus-heatmap-enabled") || t.getMetaInfo("aplus-heatmap-enabled");
        }
        function l() {
            var e = n(2), t = e.getGlobalValue("aplus"), a = s("aplus-rate-ahot") || t.getMetaInfo("aplus-rate-ahot");
            return parseFloat(a || "");
        }
        function p() {
            return s("microscope-data");
        }
        var f = 6;
        if (!(o._ap_xwj_heat && f <= o._ap_xwj_heat.version)) {
            var g, d, _ = o.performance || o.mozPerformance || o.msPerformance || o.webkitPerformance || {
                _na: 1
            }, h = location, m = location.href, v = h.hostname, y = o.navigator, b = y.appVersion, w = y ? y.userAgent : "", A = u(), E = c(), S = l(), T = p(), P = r.getElementById("beacon-aplus"), I = t(P, "exparams"), x = {
                layout: 0,
                shouldBindMonitor: !1
            }, C = {
                RATE: {
                    RESOURCE_TIMING: isNaN(S) ? 1 : S
                }
            }, M = function(e) {
                return "number" == typeof e;
            }, k = function(e, t) {
                return e.indexOf(t) > -1;
            }, O = function() {
                return k(I, "atp_isdpp");
            }, N = function() {
                if (A) return !0;
                var e, t, n = [ "item.taobao.com", "detail.tmall.com", "s.taobao.com" ];
                for (t = n.length, e = 0; e < t; e++) if (k(v, n[e])) return !1;
                return !k(m, "/go/act/") && !O();
            }, R = o.addEventListener ? function(e) {
                o.addEventListener("load", e, !1);
            } : function() {}, L = o.attachEvent ? function(e) {
                o.attachEvent("onload", e);
            } : R, U = function(e) {
                var t, n, a, o, i, s, u = r.getElementsByTagName("*");
                for (t = []; e && 1 === e.nodeType; e = e.parentNode) if (e.id) {
                    for (s = e.id, o = 0, n = 0; n < u.length; n++) if (i = u[n], i.id && i.id === s) {
                        o++;
                        break;
                    }
                    if (e.tagName.toLowerCase && t.unshift(e.tagName.toLowerCase() + "[@id='" + s + "']"), 
                    1 === o) return t.unshift("/"), t.join("/");
                } else {
                    for (n = 1, a = e.previousSibling; a; a = a.previousSibling) a.tagName === e.tagName && n++;
                    e.tagName.toLowerCase && t.unshift(e.tagName.toLowerCase() + "[" + n + "]");
                }
                return t.length ? "/" + t.join("/") : null;
            }, D = function(e, t, n) {
                var a = Math.max(F.scrollWidth, F.clientWidth), o = F.scrollTop, r = F.scrollLeft, i = t.pageX, s = t.pageY;
                M(i) || (i = t.clientX + r, s = t.clientY + o);
                var u, c, l = -1;
                if (e && e.getBoundingClientRect && (c = e.getBoundingClientRect(), l = c.left + r, 
                u = c.top + o), 0 === n || "0" === n) {
                    var p = a >> 1;
                    i -= p, l -= p;
                } else 2 === n && (i -= a, l -= a);
                return {
                    x: i,
                    y: s,
                    ex: l,
                    ey: u,
                    sw: a
                };
            }, j = function(e) {
                var t = 0;
                return parseFloat(e.replace(/\./g, function() {
                    return 0 === t++ ? "." : "";
                }));
            }, V = function(e, t) {
                var n, a;
                t[n = "trident"] = .1, (a = e.match(/Trident\/([\d.]*)/)) && a[1] && (t[n] = j(a[1])), 
                t.core = n;
            }, G = function(e) {
                var t, n;
                return (t = e.match(/MSIE ([^;]*)|Trident.*; rv(?:\s|:)?([0-9.]+)/)) && (n = t[1] || t[2]) ? j(n) : 0;
            }, B = function(e) {
                return e || "other";
            }, H = function(e) {
                function t() {
                    for (var t = [ [ "Windows NT 5.1", "winXP" ], [ "Windows NT 6.1", "win7" ], [ "Windows NT 6.0", "winVista" ], [ "Windows NT 6.2", "win8" ], [ "iPad", "ios" ], [ "iPhone;", "ios" ], [ "iPod", "ios" ], [ "Macintosh", "mac" ], [ "Android", "android" ], [ "Ubuntu", "ubuntu" ], [ "Linux", "linux" ], [ "Windows NT 5.2", "win2003" ], [ "Windows NT 5.0", "win2000" ], [ "Windows", "winOther" ], [ "rhino", "rhino" ] ], n = 0, a = t.length; n < a; ++n) if (e.indexOf(t[n][0]) !== -1) return t[n][1];
                    return "other";
                }
                function n(e, t, n, a) {
                    var r, i = o.navigator.mimeTypes;
                    try {
                        for (r in i) if (i.hasOwnProperty(r) && i[r][e] === t) {
                            if (void 0 !== n && a.test(i[r][n])) return !0;
                            if (void 0 === n) return !0;
                        }
                        return !1;
                    } catch (e) {
                        return !1;
                    }
                }
                var a, i, s, u, c, l, p, f, g = "", d = g, _ = g, h = [ 6, 9 ], m = "{{version}}", v = "<!--[if IE " + m + "]><s></s><![endif]-->", y = r && r.createElement("div"), w = [], A = {
                    webkit: void 0,
                    trident: void 0,
                    gecko: void 0,
                    presto: void 0,
                    chrome: void 0,
                    safari: void 0,
                    firefox: void 0,
                    ie: void 0,
                    ieMode: void 0,
                    opera: void 0,
                    mobile: void 0,
                    core: void 0,
                    shell: void 0,
                    phantomjs: void 0,
                    os: void 0,
                    ipad: void 0,
                    iphone: void 0,
                    ipod: void 0,
                    ios: void 0,
                    android: void 0,
                    nodejs: void 0,
                    extraName: void 0,
                    extraVersion: void 0
                };
                if (y && y.getElementsByTagName && (y.innerHTML = v.replace(m, ""), w = y.getElementsByTagName("s")), 
                w.length > 0) {
                    for (V(e, A), u = h[0], c = h[1]; u <= c; u++) if (y.innerHTML = v.replace(m, u), 
                    w.length > 0) {
                        A[_ = "ie"] = u;
                        break;
                    }
                    !A.ie && (s = G(e)) && (A[_ = "ie"] = s);
                } else (i = e.match(/AppleWebKit\/([\d.]*)/)) && i[1] ? (A[d = "webkit"] = j(i[1]), 
                (i = e.match(/OPR\/(\d+\.\d+)/)) && i[1] ? A[_ = "opera"] = j(i[1]) : (i = e.match(/Chrome\/([\d.]*)/)) && i[1] ? A[_ = "chrome"] = j(i[1]) : (i = e.match(/\/([\d.]*) Safari/)) && i[1] && (A[_ = "safari"] = j(i[1])), 
                / Mobile\//.test(e) && e.match(/iPad|iPod|iPhone/) ? (A.mobile = "apple", i = e.match(/OS ([^\s]*)/), 
                i && i[1] && (A.ios = j(i[1].replace("_", "."))), a = "ios", i = e.match(/iPad|iPod|iPhone/), 
                i && i[0] && (A[i[0].toLowerCase()] = A.ios)) : / Android/i.test(e) ? (/Mobile/.test(e) && (a = A.mobile = "android"), 
                i = e.match(/Android ([^\s]*);/), i && i[1] && (A.android = j(i[1]))) : (i = e.match(/NokiaN[^\/]*|Android \d\.\d|webOS\/\d\.\d/)) && (A.mobile = i[0].toLowerCase()), 
                (i = e.match(/PhantomJS\/([^\s]*)/)) && i[1] && (A.phantomjs = j(i[1]))) : (i = e.match(/Presto\/([\d.]*)/)) && i[1] ? (A[d = "presto"] = j(i[1]), 
                (i = e.match(/Opera\/([\d.]*)/)) && i[1] && (A[_ = "opera"] = j(i[1]), (i = e.match(/Opera\/.* Version\/([\d.]*)/)) && i[1] && (A[_] = j(i[1])), 
                (i = e.match(/Opera Mini[^;]*/)) && i ? A.mobile = i[0].toLowerCase() : (i = e.match(/Opera Mobi[^;]*/)) && i && (A.mobile = i[0]))) : (s = G(e)) ? (A[_ = "ie"] = s, 
                V(e, A)) : (i = e.match(/Gecko/)) && (A[d = "gecko"] = .1, (i = e.match(/rv:([\d.]*)/)) && i[1] && (A[d] = j(i[1]), 
                /Mobile|Tablet/.test(e) && (A.mobile = "firefox")), (i = e.match(/Firefox\/([\d.]*)/)) && i[1] && (A[_ = "firefox"] = j(i[1])));
                a || (a = t());
                var E, S;
                if (!n("type", "application/vnd.chromium.remoting-viewer")) {
                    E = "scoped" in r.createElement("style"), S = "v8Locale" in o;
                    try {
                        f = o.external || void 0;
                    } catch (e) {}
                    if (i = e.match(/360SE/)) l = "360"; else if ((i = e.match(/SE\s([\d.]*)/)) || f && "SEVersion" in f) l = "sougou", 
                    p = j(i[1]) || .1; else if ((i = e.match(/Maxthon(?:\/)+([\d.]*)/)) && f) {
                        l = "maxthon";
                        try {
                            p = j(f.max_version || i[1]);
                        } catch (e) {
                            p = .1;
                        }
                    } else E && S ? l = "360se" : E || S || !/Gecko\)\s+Chrome/.test(b) || A.opera || A.trident || (l = "360ee");
                }
                return (i = e.match(/TencentTraveler\s([\d.]*)|QQBrowser\/([\d.]*)/)) ? (l = "tt", 
                p = j(i[2]) || .1) : (i = e.match(/LBBROWSER/)) || f && "LiebaoGetVersion" in f ? l = "liebao" : (i = e.match(/TheWorld/)) ? (l = "theworld", 
                p = 3) : (i = e.match(/TaoBrowser\/([\d.]*)/)) && (l = "taobao", p = j(i[1]) || .1), 
                A.os = a, A.core = A.core || d, A.shell = _, A.ieMode = A.ie && r.documentMode || A.ie, 
                A.extraName = l, A.extraVersion = p, A.resolution = o.screen.width + "x" + o.screen.height, 
                A;
            }, F = "BackCompat" === r.compatMode ? r.body : r.documentElement, W = h.protocol, q = new Date().getTime(), K = 0, J = function(e) {
                this.config = e;
            };
            J.prototype = {
                startup: function() {
                    var e = this;
                    "complete" === document.readyState ? x.shouldBindMonitor && e.bindMonitor() : L(function() {
                        x.shouldBindMonitor && e.bindMonitor();
                    });
                },
                collectPerformanceTiming: function() {
                    var e = _.timing, t = {};
                    if (!e) return t;
                    var n, a, r, i = {
                        navigationStart: "ns",
                        unloadEventStart: "ues",
                        unloadEventEnd: "uee",
                        redirectStart: "rds",
                        redirectEnd: "rde",
                        fetchStart: "fs",
                        domainLookupStart: "dls",
                        domainLookupEnd: "dle",
                        connectStart: "cs",
                        connectEnd: "ce",
                        secureConnectionStart: "scs",
                        requestStart: "rqs",
                        responseStart: "rps",
                        responseEnd: "rpe",
                        domLoading: "dl",
                        domInteractive: "di",
                        domContentLoadedEventStart: "dcles",
                        domContentLoadedEventEnd: "dclee",
                        domComplete: "dc",
                        loadEventStart: "les",
                        loadEventEnd: "lee"
                    }, s = e.navigationStart;
                    for (n in e) a = e[n], r = i[n], r && (0 === a || void 0 === a ? t[r] = "na" : "number" == typeof a && (t[r] = a - s));
                    var u, c;
                    return "number" == typeof e.msFirstPaint ? u = e.msFirstPaint : o.chrome && o.chrome.loadTimes(c = o.chrome.loadTimes().firstPaintTime) && (u = Math.ceil(1e3 * c)), 
                    "number" == typeof u ? u -= s : u = "na", t.fp = u, t;
                },
                collectResourceTiming: function() {
                    if (!("performance" in o && "getEntriesByType" in _ && _.getEntriesByType("resource") instanceof Array)) return [];
                    var e = [], t = _.getEntriesByType("resource"), n = function(e) {
                        return void 0 === e || 0 === e ? 0 : Math.floor(e);
                    };
                    for (var a in t) if (t.hasOwnProperty(a)) {
                        var r = t[a];
                        r.initiatorType && e.push({
                            rs: n(r.redirectStart),
                            re: n(r.redirectEnd),
                            fs: n(r.fetchStart),
                            st: n(r.startTime),
                            dls: n(r.domainLookupStart),
                            dle: n(r.domainLookupEnd),
                            cs: n(r.connectStart),
                            ce: n(r.connectEnd),
                            scs: n(r.secureConnectionStart),
                            resqs: n(r.requestStart),
                            resps: n(r.responseStart),
                            respe: n(r.responseEnd),
                            restype: r.initiatorType,
                            n: r.name
                        });
                    }
                    return e;
                },
                sendPV: function() {
                    var t = this;
                    if (!this.initialized) {
                        var n, a, o, r, i, s, u, c, l, p, f, g, d, _ = 1;
                        try {
                            n = H(w), a = n.os, o = n.shell, r = n.core, i = n.resolution, s = n.extraName, 
                            u = n.extraVersion, c = a ? a + (n[a] ? n[a] : "") : "", l = o ? o + parseInt(n[o]) : "", 
                            p = r, f = i, g = s ? s + (u ? parseInt(u) : "") : "";
                        } catch (e) {}
                        var h = {
                            p: _,
                            o: B(c),
                            b: B(l),
                            w: B(p),
                            s: f,
                            mx: g
                        };
                        "https:" === W && (h.isps = 1), (d = e().trid) && (h.trid = d), setTimeout(function() {
                            var e, n, a = t.collectPerformanceTiming();
                            for (e in a) a.hasOwnProperty(e) && (n = a[e], h[e] || (h[e] = n));
                            t.initialized = !0, t.sendData(h, !0);
                        }, 0);
                    }
                },
                bindMonitor: function() {
                    var e = this, t = !!r.attachEvent, n = t ? "attachEvent" : "addEventListener";
                    r[n]((t ? "on" : "") + "mousedown", function(t) {
                        t = t || o.event;
                        var n = t.target || t.srcElement;
                        n && e.mousedown(n, t);
                    }, !1);
                },
                mousedown: function(e, t) {
                    var n, a = e.tagName, o = {
                        type: 1
                    };
                    if (!a || "HTML" !== a) {
                        "A" !== a && "AREA" !== a || (n = e.getAttribute("href", 2) || "", o.href = n);
                        var r = D(e, t, this.config.layout);
                        o.xpath = U(e), o.x = r.x, o.y = r.y, o.ex = r.ex, o.ey = r.ey, o.sw = r.sw, o.ew = e.offsetWidth, 
                        o.eh = e.offsetHeight, o.t = new Date().getTime() - q, o.n = ++K, A && T && (o.so = encodeURIComponent(T)), 
                        this.sendData(o);
                    }
                },
                sendData: function(e, t) {
                    var n = "$$_hotpoint", a = Math.ceil(1e3 * Math.random()), o = window.aplus_queue || (window.aplus_queue = []);
                    t ? o.push({
                        action: "aplus.sendPV",
                        arguments: [ {
                            is_auto: !0
                        }, e ]
                    }) : a < 1e3 * C.RATE.RESOURCE_TIMING && E && o.push({
                        action: "aplus.record",
                        arguments: [ n, "CLK", i({
                            is_auto: 1
                        }, e), "POST" ]
                    });
                }
            }, N() && (x.shouldBindMonitor = !0);
            var z = _.setResourceTimingBufferSize || _.webkitSetResourceTimingBufferSize;
            z && z.call(_, 200), o._ap_xwj_heat = {
                version: f
            };
            var $ = new J(x);
            $.startup();
        }
    }
    var o = window, r = document, i = n(35);
    e.exports = function() {
        try {
            a();
        } catch (t) {
            var e = window.aplus_queue || (window.aplus_queue = []);
            e.push({
                action: "aplus._aplus_cplugin_m.do_tracker_jserror",
                arguments: [ {
                    message: "headmapall",
                    error: encodeURIComponent(t.stack),
                    filename: "aplus_xwj_plugin"
                } ]
            });
        }
    };
}, function(e, t, n) {
    "use strict";
    e.exports = function() {
        return {
            run: function() {
                n(144)();
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(3), o = n(13), r = n(8), i = "hidden";
    e.exports = function() {
        o.on(window, "unload", function() {
            try {
                var e = window.aplus_queue || (window.aplus_queue = []);
                e.push({
                    action: "aplus.record",
                    arguments: [ a.PAGE_LEAVE, "OTHER", {} ]
                }), document.visibilityState === i && window.sessionStorage.removeItem(a.START_ID);
            } catch (e) {
                r().w("send browser close evnet failed");
            }
        });
    };
}, function(e, t, n) {
    "use strict";
    e.exports = function(e) {
        try {
            var t = window, a = "g_tb_aplus_loaded";
            if (t[a]) return;
            t[a] = 1, n(146).isDebugAplus();
            var o = n(8), r = n(42), i = n(34), s = n(10), u = n(147), c = "running", l = [ "aplusReady", c ];
            r.doPubMsg(l), u.run({
                plugins: e.plugins,
                context: function() {
                    var t = {
                        PAGE_LOAD_TIME: new Date()
                    }, n = [];
                    return s(e.plugins, function(e) {
                        t[e.name] = e.config || {}, "aplus_log_inject" === e.name && e.config && e.config.plugins && (n = e.config.plugins.pv, 
                        s(n, function(e) {
                            t[e.name] = e.config;
                        }));
                    }), i.assign(t, {
                        aplus_config: e
                    });
                }
            }, function() {
                o().v("APLUS INIT SUCCESS");
            });
        } catch (e) {}
    };
}, function(e, t, n) {
    "use strict";
    var a, o = n(2), r = n(8);
    t.isDebugAplus = function(e) {
        if ("boolean" == typeof a) return a;
        if ("boolean" == typeof e && (a = e), localStorage && location) {
            var t = location.href.match(/aplusDebug=(true|false)/);
            t && t.length > 0 && localStorage.setItem("aplusDebug", t[1]), a = "true" === localStorage.getItem("aplusDebug");
        } else a = !1;
        return o.setGoldlogVal("aplusDebug", a), a && r().setDebug(a), a;
    };
}, function(e, t, n) {
    "use strict";
    var a = n(120), o = n(20), r = n(42);
    t.run = function(e, t) {
        var n = new a();
        n.run({
            plugins: e.plugins,
            context: e.context
        }, {
            config: {},
            userdata: {},
            pubsubType: "aplusinit",
            messageFnQueue: [],
            middlewareMessageKey: "mw_change_aplusinit"
        }, function(e) {
            var n = [ "aplusInitContext", e ];
            r.doPubMsg(n), r.doCachePubs(n), o(t) && t(e);
        });
    };
} ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,